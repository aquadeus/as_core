////////////////////////////////////////////////////////////////////////////////
//
//  MILLENIUM-STUDIO
//  Copyright 2018 Millenium-studio SARL
//  All Rights Reserved.
//
////////////////////////////////////////////////////////////////////////////////

#include "ScriptMgr.h"
#include "ScriptedCreature.h"
#include "SpellScript.h"
#include "Vehicle.h"
#include "GarrisonMgr.hpp"

/// Grand Artificer Romuul - 121263
class npc_grand_artificer_romuul_121263 : public CreatureScript
{
    public:
        npc_grand_artificer_romuul_121263() : CreatureScript("npc_grand_artificer_romuul_121263") { }

        struct npc_grand_artificer_romuul_121263AI : public ScriptedAI
        {
            npc_grand_artificer_romuul_121263AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eEvents
            {
                Event_MoveToBeacon = 1
            };

            enum ePoints
            {
                Point_Beacon = 1
            };

            enum eSpells
            {
                Spell_LightforgedBeaconDeparture = 247987,
                Spell_TeleportAzuremystIsle = 243270,
                Spell_DarkfallRidge = 250547,
                Spell_FireKillcredit = 253957,
                Spell_TheBurningThroneScene = 253955,
                Spell_TeleportToFoothold = 252067,
                Spell_TeleportToExodusPoint = 243310
            };

            enum eQuests
            {
                Quest_ImprisonedInquisitor = 47104,
                Quest_FoilingTheLegionsJailbreak = 47134
            };

            enum eKillcredits
            {
                Killcredit_SpeakWithGrandArtificerRomuul = 123615,
                Killcredit_SpeakToRomuulToTravelToTheArcatraz = 121864
            };

            enum eConversations
            {
                Conv_ImprisonedInquisitor = 5918
            };

            EventMap m_Events;
            Position const m_LightforgedBeaconPos = { -4077.358f, -11421.9f, -141.3749f, 5.256058f };
            Position const m_ArcatrazTeleportPos = { 75.78f, -224.62f, 938.13f };

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(p_Who) < 50.0f && l_Player->GetQuestStatus(eQuests::Quest_ImprisonedInquisitor) == QUEST_STATUS_INCOMPLETE)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ImprisonedInquisitor, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_SpeakWithGrandArtificerRomuul);
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_FoilingTheLegionsJailbreak:
                {
                    Talk(0, p_Player->GetGUID());
                    break;
                }
                default:
                    break;
                }
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 p_Action) override
            {
                switch (p_Action)
                {
                case 0:
                {
                    p_Player->CastSpell(p_Player, eSpells::Spell_DarkfallRidge, true);
                    break;
                }
                case 1:
                {
                    p_Player->KilledMonsterCredit(eKillcredits::Killcredit_SpeakToRomuulToTravelToTheArcatraz);
                    p_Player->TeleportTo(1746, m_ArcatrazTeleportPos);
                    break;
                }
                case 2:
                {
                    p_Player->CastSpell(p_Player, eSpells::Spell_FireKillcredit, true);
                    p_Player->CastSpell(p_Player, eSpells::Spell_TheBurningThroneScene, true);
                    break;
                }
                case 3:
                {
                    p_Player->CastSpell(p_Player, eSpells::Spell_TeleportToExodusPoint, true);
                    break;
                }
                case 4:
                {
                    p_Player->CastSpell(p_Player, eSpells::Spell_TeleportToFoothold, true);
                    break;
                }
                default:
                    break;
                }

                p_Player->PlayerTalkClass->SendCloseGossip();
            }

            void IsSummonedBy(Unit* /*p_Summoner*/) override
            {
                m_Events.ScheduleEvent(eEvents::Event_MoveToBeacon, urand(1000, 6000));
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                if (me->GetExactDist2d(&m_LightforgedBeaconPos) <= 5.0f)
                {
                    me->GetMotionMaster()->Clear();
                    DoCast(eSpells::Spell_LightforgedBeaconDeparture, true);
                    me->DespawnOrUnsummon();
                }

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_MoveToBeacon:
                {
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_Beacon, m_LightforgedBeaconPos);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_grand_artificer_romuul_121263AI(p_Creature);
        }
};

/// Prophet Velen - 126307
class npc_prophet_velen_126307 : public CreatureScript
{
    public:
        npc_prophet_velen_126307() : CreatureScript("npc_prophet_velen_126307") { }

        struct npc_prophet_velen_126307AI : public ScriptedAI
        {
            npc_prophet_velen_126307AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eQuests
            {
                Quest_IntoTheNight = 48440,
                Quest_AloneInTheAbyss = 46938,
                Quest_AMomentOfRespite = 48500,
                Quest_EssenceOfTheLightMother = 49143,
                Quest_AnOfferingOfLight = 48559,
                Quest_TheBurningHeart = 48199,
                Quest_LordOfTheSpire = 47993,
                Quest_AFloatingRuin = 48081
            };

            enum eObjectives
            {
                Obj_ArrivalOnVindicaarConversation = 292150,
                Obj_ConversationAfterLordHeard = 292620
            };

            enum eKillcredits
            {
                Killcredit_TuralyonAndVelenConversation = 293839
            };

            enum eConversations
            {
                Conv_ArrivalOnVindicaar = 5213,
                Conv_TransportToLand = 5216,
                Conv_TuralyonPlsCalmDown = 5251,
                Conv_QuestAnOfferingOfLightAccept = 5859,
                Conv_QuestTheBurningHeartAccept = 5897,
                Conv_ArrivalAfterLord = 5662,
                Conv_QuestAFloatingRuinAccept = 5623
            };

            enum eSpells
            {
                Spell_HolyDissolveOut = 105616,
                Spell_TeachTaxiNodeStygianWake = 252319,
                Spell_TeachTaxiNodeMacAree = 250498
            };

            enum eNpcs
            {
                Npc_Turalyon = 122378
            };

            enum eEvents
            {
                Event_MoveToTuralyon = 1,
                Event_ReturnToDefaultPos = 2
            };

            enum ePoints
            {
                Point_VelenMoveToTuralyon = 1,
                Point_VelenReturnToDefaultPos = 2
            };

            enum eActions
            {
                Action_TuralyonCalmDown = 1
            };

            std::array<uint32, 8> m_CreaturesForTransportArray =
            { {
                121410,
                120979,
                120845,
                121417,
                121264,
                121308,
                121421,
                121423
            } };

            EventMap m_Events;
            ObjectGuid m_SummonerGuid;
            ObjectGuid m_TuralyonGuid;
            Position const m_TuralyonSpawnPos = { 462.9635f, 1453.167f, 757.6565f, 3.748456f };
            Position const m_VelenToTuralyonMovePos = { 464.4063f, 1452.896f, 757.5728f };
            Position const m_VelenDefaultMovePos = { 480.3853f, 1463.426f, 757.718f };

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(p_Who) < 40.0f && l_Player->GetQuestObjectiveCounter(eObjectives::Obj_ArrivalOnVindicaarConversation) == 0 &&
                    l_Player->GetQuestStatus(eQuests::Quest_IntoTheNight) == QUEST_STATUS_COMPLETE)
                {
                    l_Player->SetQuestObjectiveCounter(eObjectives::Obj_ArrivalOnVindicaarConversation, 1);

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ArrivalOnVindicaar, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }

                if (me->GetExactDist2d(p_Who) < 20.0f && l_Player->GetQuestObjectiveCounter(eObjectives::Obj_ConversationAfterLordHeard) == 0 &&
                    l_Player->GetQuestStatus(eQuests::Quest_LordOfTheSpire) == QUEST_STATUS_COMPLETE)
                {
                    l_Player->SetQuestObjectiveCounter(eObjectives::Obj_ConversationAfterLordHeard, 1);

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ArrivalAfterLord, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_AloneInTheAbyss:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TransportToLand, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    for (auto l_Itr : m_CreaturesForTransportArray)
                    {
                        if (Creature* l_Creature = me->FindNearestCreature(l_Itr, 50.0f, true))
                        {
                            if (Creature* l_NewCreature = p_Player->SummonCreature(l_Itr, l_Creature->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                            {
                                uint16 l_Delay = urand(5000, 8000);
                                l_Creature->DestroyForPlayer(p_Player);
                                l_NewCreature->DelayedCastSpell(l_NewCreature, eSpells::Spell_HolyDissolveOut, true, l_Delay);
                            }
                        }
                    }

                    break;
                }
                case eQuests::Quest_AMomentOfRespite:
                {
                    Talk(0, p_Player->GetGUID());
                    break;
                }
                case eQuests::Quest_EssenceOfTheLightMother:
                {
                    p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID());
                    break;
                }
                case eQuests::Quest_AnOfferingOfLight:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestAnOfferingOfLightAccept, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eQuests::Quest_TheBurningHeart:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestTheBurningHeartAccept, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    p_Player->CastSpell(p_Player, eSpells::Spell_TeachTaxiNodeStygianWake, true);
                    break;
                }
                case eQuests::Quest_AFloatingRuin:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestAFloatingRuinAccept, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    p_Player->CastSpell(p_Player, eSpells::Spell_TeachTaxiNodeMacAree, true);
                    break;
                }
                default:
                    break;
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                if (Creature* l_Creature = p_Summoner->SummonCreature(eNpcs::Npc_Turalyon, m_TuralyonSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Summoner->GetGUID()))
                {
                    m_TuralyonGuid = l_Creature->GetGUID();
                    l_Creature->AI()->DoAction(eActions::Action_TuralyonCalmDown);
                }

                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TuralyonPlsCalmDown, p_Summoner, nullptr, p_Summoner->GetPosition()))
                        delete l_Conversation;
                }

                me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_QUESTGIVER);
                m_SummonerGuid = p_Summoner->GetGUID();
                m_Events.ScheduleEvent(eEvents::Event_MoveToTuralyon, 2000);
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_PointId)
                    {
                    case ePoints::Point_VelenMoveToTuralyon:
                    {
                        me->SetFacingTo(3.281219f);
                        me->SetAIAnimKitId(14079);
                        m_Events.ScheduleEvent(eEvents::Event_ReturnToDefaultPos, 19000);
                        break;
                    }
                    case ePoints::Point_VelenReturnToDefaultPos:
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_TuralyonGuid))
                        {
                            l_Creature->DespawnOrUnsummon();
                        }

                        me->SetFacingTo(3.497811f);
                        l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_TuralyonAndVelenConversation);
                        me->DespawnOrUnsummon();
                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_MoveToTuralyon:
                {
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_VelenMoveToTuralyon, m_VelenToTuralyonMovePos, false);
                    break;
                }
                case eEvents::Event_ReturnToDefaultPos:
                {
                    me->SetAIAnimKitId(0);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_VelenReturnToDefaultPos, m_VelenDefaultMovePos, false);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_prophet_velen_126307AI(p_Creature);
        }
};

/// Prophet Velen - 119543
class npc_prophet_velen_119543 : public CreatureScript
{
    public:
        npc_prophet_velen_119543() : CreatureScript("npc_prophet_velen_119543") { }

        struct npc_prophet_velen_119543AI : public ScriptedAI
        {
            npc_prophet_velen_119543AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eValues
            {
                Quest_AloneInTheAbyss = 46938,
                Obj_BattlefieldGreetingSeen = 290756,
                Conv_BattlefieldGreeting = 5218
            };

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(p_Who) < 15.0f && l_Player->GetQuestObjectiveCounter(eValues::Obj_BattlefieldGreetingSeen) == 0 &&
                    l_Player->GetQuestStatus(eValues::Quest_AloneInTheAbyss) == QUEST_STATUS_COMPLETE)
                {
                    l_Player->SetQuestObjectiveCounter(eValues::Obj_BattlefieldGreetingSeen, 1);

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eValues::Conv_BattlefieldGreeting, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_prophet_velen_119543AI(p_Creature);
        }
};

/// Illidan Stormrage - 119535
class npc_illidan_stormrage_119535 : public CreatureScript
{
    public:
        npc_illidan_stormrage_119535() : CreatureScript("npc_illidan_stormrage_119535") { }

        struct npc_illidan_stormrage_119535AI : public ScriptedAI
        {
            npc_illidan_stormrage_119535AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eValues
            {
                Quest_OverwhelmingPower = 46297,
                Conv_AcceptQuestOverwhelmingPower = 5816
            };

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eValues::Quest_OverwhelmingPower:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eValues::Conv_AcceptQuestOverwhelmingPower, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void IsSummonedBy(Unit* /*p_Summoner*/) override
            {
                me->SetFacingTo(2.491872f);
                me->DespawnOrUnsummon(120000);
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_illidan_stormrage_119535AI(p_Creature);
        }
};

/// Chieftain Hatuun - 126239
class npc_chieftain_hatuun_126239 : public CreatureScript
{
    public:
        npc_chieftain_hatuun_126239() : CreatureScript("npc_chieftain_hatuun_126239") { }

        struct npc_chieftain_hatuun_126239AI : public ScriptedAI
        {
            npc_chieftain_hatuun_126239AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eValues
            {
                Event_ResetLOS = 1,
                Event_Say = 2,
                Event_PlayVisual = 3,
                Conv_Help = 5741,
                Spell_Vanish = 210194
            };

            EventMap m_Events;
            ObjectGuid m_SummonerGuid;
            bool m_CanCreateConversation = true;

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player || me->isSummon())
                    return;

                if (me->GetExactDist2d(p_Who) < 30.0f && m_CanCreateConversation)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        m_CanCreateConversation = false;
                        m_Events.ScheduleEvent(eValues::Event_ResetLOS, 30000);

                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eValues::Conv_Help, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* /*p_Quest*/) override
            {
                p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID());
                me->DestroyForPlayer(p_Player);
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_Events.ScheduleEvent(eValues::Event_Say, 1000);
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eValues::Event_ResetLOS:
                {
                    m_CanCreateConversation = true;
                    break;
                }
                case eValues::Event_Say:
                {
                    if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                    {
                        me->SetAIAnimKitId(0);
                        m_Events.ScheduleEvent(eValues::Event_PlayVisual, 1000);
                    }
                    else
                    {
                        me->DespawnOrUnsummon();
                    }

                    break;
                }
                case eValues::Event_PlayVisual:
                {
                    if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                    {
                        Talk(0, l_Player->GetGUID());
                        me->SendPlaySpellVisualKit(86887, 0, 0);
                        me->DelayedCastSpell(me, eValues::Spell_Vanish, true, 4000);
                        me->DespawnOrUnsummon(4000);
                    }
                    else
                    {
                        me->DespawnOrUnsummon();
                    }

                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_chieftain_hatuun_126239AI(p_Creature);
        }
};

/// Felbound Drudge - 123085
class npc_felbound_drudge_123085 : public CreatureScript
{
    public:
        npc_felbound_drudge_123085() : CreatureScript("npc_felbound_drudge_123085") { }

        struct npc_felbound_drudge_123085AI : public ScriptedAI
        {
            npc_felbound_drudge_123085AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_SetHealth = 244971,
                Spell_ChieftainsSalve = 250647,
                Spell_Vanish = 210194
            };

            enum eEvents
            {
                Event_SetFacing = 1,
                Event_Say = 2
            };

            enum eKillcredits
            {
                Killcredit_FelboundDrudgeHealed = 123085
            };

            EventMap m_Events;
            ObjectGuid m_SummonerGuid;

            void InitializeAI() override
            {
                if (!me->isSummon())
                {
                    DoCast(eSpells::Spell_SetHealth, true);
                }
            }

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                Player* l_Player = p_Caster->ToPlayer();
                if (!l_Player || p_Spell->Id != eSpells::Spell_ChieftainsSalve)
                    return;

                me->AddToHideList(l_Player->GetGUID(), 360000);
                me->DestroyForPlayer(l_Player);
                l_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID());
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                p_Summoner->ToPlayer()->KilledMonsterCredit(eKillcredits::Killcredit_FelboundDrudgeHealed);
                m_Events.ScheduleEvent(eEvents::Event_SetFacing, 1000);
                m_SummonerGuid = p_Summoner->GetGUID();
                me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_SPELLCLICK);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                if (!me->isSummon())
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SetFacing:
                {
                    if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                    {
                        me->SetInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
                        me->SetFacingToObject(l_Player);
                        m_Events.ScheduleEvent(eEvents::Event_Say, 1000);
                    }
                    else
                    {
                        me->DespawnOrUnsummon();
                    }

                    break;
                }
                case eEvents::Event_Say:
                {
                    if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                    {
                        Talk(0, l_Player->GetGUID());
                        me->DelayedCastSpell(me, eSpells::Spell_Vanish, true, 5000);
                        me->DespawnOrUnsummon(5000);
                    }
                    else
                    {
                        me->DespawnOrUnsummon();
                    }

                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_felbound_drudge_123085AI(p_Creature);
        }
};

/// Legion Devastator - 122918, 123068, 123067
class npc_legion_devastators : public CreatureScript
{
    public:
        npc_legion_devastators() : CreatureScript("npc_legion_devastators") { }

        struct npc_legion_devastatorsAI : public ScriptedAI
        {
            npc_legion_devastatorsAI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eValues
            {
                Spell_DevastatorBombardment = 245036,
                Event_DevastatorBombardmentCast = 1
            };

            std::array<Position const, 6> m_ShieldsPosArray =
            { {
                { 696.1285f, 1518.569f, 627.0402f },
                { 691.6458f, 1523.977f, 625.9921f },
                { 702.9722f, 1543.885f, 613.0905f },
                { 697.4393f, 1515.929f, 624.0746f },
                { 700.691f, 1546.637f, 615.0083f },
                { 705.5677f, 1537.997f, 613.0905f }
            } };

            EventMap m_Events;

            void InitializeAI() override
            {
                if (!me->isSummon())
                {
                    m_Events.ScheduleEvent(eValues::Event_DevastatorBombardmentCast, urand(0, 30000));
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eValues::Event_DevastatorBombardmentCast:
                {
                    me->CastSpell(m_ShieldsPosArray[urand(0, 5)], eValues::Spell_DevastatorBombardment, true);
                    m_Events.ScheduleEvent(eValues::Event_DevastatorBombardmentCast, urand(10000, 30000));
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_legion_devastatorsAI(p_Creature);
        }
    };

    /// Devastator Anchor - 123041, 123069, 123070
    class npc_devastator_anchors : public CreatureScript
    {
    public:
        npc_devastator_anchors() : CreatureScript("npc_devastator_anchors") { }

        struct npc_devastator_anchorsAI : public ScriptedAI
        {
            npc_devastator_anchorsAI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eValues
            {
                Spell_Destroying = 246188,
                Spell_ProphetsWrath = 245262,
                Spell_LargeCameraShake = 211741,
                Obj_CannonADestroyed = 290619,
                Obj_CannonBDestroyed = 290622,
                Obj_CannonCDestroyed = 290623,
                Killcredit_SouthernDevastatorDestroyed = 123049,
                Killcredit_WesternDevastatorDestroyed = 128719,
                Killcredit_EasternDevastatorDestroyed = 128720,
                Npc_SouthernLegionDevastator = 122918,
                Npc_WesternLegionDevastator = 123067,
                Npc_EasternLegionDevastator = 123068,
                Npc_SouthernDevastatorAnchor = 123041,
                Npc_WesternDevastatorAnchor = 123069,
                Npc_EasternDevastatorAnchor = 123070,
                Conv_SouthernDevastatorDestroyed = 5253,
                Conv_WesternDevastatorDestroyed = 5254,
                Conv_EasternDevastatorDestroyed = 5255
            };

            EventMap m_Events;

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                Player* l_Player = p_Caster->ToPlayer();
                if (!l_Player || p_Spell->Id != eValues::Spell_Destroying)
                    return;

                me->DestroyForPlayer(l_Player);

                if (Creature* l_Creature = l_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                {
                    l_Creature->SetAIAnimKitId(13340);
                    l_Creature->DespawnOrUnsummon();
                }

                switch (me->GetEntry())
                {
                case eValues::Npc_SouthernDevastatorAnchor:
                {
                    l_Player->SetQuestObjectiveCounter(eValues::Obj_CannonADestroyed, l_Player->GetQuestObjectiveCounter(eValues::Obj_CannonADestroyed) + 1);

                    if (l_Player->GetQuestObjectiveCounter(eValues::Obj_CannonADestroyed) == 3)
                    {
                        if (Creature* l_Creature = me->FindNearestCreature(eValues::Npc_SouthernLegionDevastator, 10.0f, true))
                        {
                            if (Creature* l_NewCreature = l_Player->SummonCreature(l_Creature->GetEntry(), l_Creature->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                l_Player->KilledMonsterCredit(eValues::Killcredit_SouthernDevastatorDestroyed);
                                l_Creature->DestroyForPlayer(l_Player);
                                l_NewCreature->RemoveAllAuras();
                                l_NewCreature->DelayedCastSpell(l_NewCreature, eValues::Spell_ProphetsWrath, true, 2000);
                                l_NewCreature->DelayedCastSpell(l_NewCreature, eValues::Spell_LargeCameraShake, true, 2000);
                                l_NewCreature->DespawnOrUnsummon(2000);

                                if (Conversation* l_Conversation = new Conversation)
                                {
                                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eValues::Conv_SouthernDevastatorDestroyed, l_Player, nullptr, l_Player->GetPosition()))
                                        delete l_Conversation;
                                }
                            }
                        }
                    }

                    break;
                }
                case eValues::Npc_WesternDevastatorAnchor:
                {
                    l_Player->SetQuestObjectiveCounter(eValues::Obj_CannonBDestroyed, l_Player->GetQuestObjectiveCounter(eValues::Obj_CannonBDestroyed) + 1);

                    if (l_Player->GetQuestObjectiveCounter(eValues::Obj_CannonBDestroyed) == 3)
                    {
                        if (Creature* l_Creature = me->FindNearestCreature(eValues::Npc_WesternLegionDevastator, 10.0f, true))
                        {
                            if (Creature* l_NewCreature = l_Player->SummonCreature(l_Creature->GetEntry(), l_Creature->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                l_Player->KilledMonsterCredit(eValues::Killcredit_WesternDevastatorDestroyed);
                                l_Creature->DestroyForPlayer(l_Player);
                                l_NewCreature->RemoveAllAuras();
                                l_NewCreature->DelayedCastSpell(l_NewCreature, eValues::Spell_ProphetsWrath, true, 2000);
                                l_NewCreature->DelayedCastSpell(l_NewCreature, eValues::Spell_LargeCameraShake, true, 2000);
                                l_NewCreature->DespawnOrUnsummon(2000);

                                if (Conversation* l_Conversation = new Conversation)
                                {
                                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eValues::Conv_WesternDevastatorDestroyed, l_Player, nullptr, l_Player->GetPosition()))
                                        delete l_Conversation;
                                }
                            }
                        }
                    }

                    break;
                }
                case eValues::Npc_EasternDevastatorAnchor:
                {
                    l_Player->SetQuestObjectiveCounter(eValues::Obj_CannonCDestroyed, l_Player->GetQuestObjectiveCounter(eValues::Obj_CannonCDestroyed) + 1);

                    if (l_Player->GetQuestObjectiveCounter(eValues::Obj_CannonCDestroyed) == 3)
                    {
                        if (Creature* l_Creature = me->FindNearestCreature(eValues::Npc_EasternLegionDevastator, 10.0f, true))
                        {
                            if (Creature* l_NewCreature = l_Player->SummonCreature(l_Creature->GetEntry(), l_Creature->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                l_Player->KilledMonsterCredit(eValues::Killcredit_EasternDevastatorDestroyed);
                                l_Creature->DestroyForPlayer(l_Player);
                                l_NewCreature->RemoveAllAuras();
                                l_NewCreature->DelayedCastSpell(l_NewCreature, eValues::Spell_ProphetsWrath, true, 2000);
                                l_NewCreature->DelayedCastSpell(l_NewCreature, eValues::Spell_LargeCameraShake, true, 2000);
                                l_NewCreature->DespawnOrUnsummon(2000);

                                if (Conversation* l_Conversation = new Conversation)
                                {
                                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eValues::Conv_EasternDevastatorDestroyed, l_Player, nullptr, l_Player->GetPosition()))
                                        delete l_Conversation;
                                }
                            }
                        }
                    }

                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_devastator_anchorsAI(p_Creature);
        }
};

/// Eredar Conqueror - 120395
class npc_eredar_conqueror_120395 : public CreatureScript
{
    public:
        npc_eredar_conqueror_120395() : CreatureScript("npc_eredar_conqueror_120395") { }

        struct npc_eredar_conqueror_120395AI : public ScriptedAI
        {
            npc_eredar_conqueror_120395AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eValues
            {
                Killcredit_ConquerorEncountered = 126259,
                Spell_DreadCrush = 250962,
                Spell_OverpoweringFlurry = 250963,
                Spell_UnchainedDominance = 245061,
                Event_CastDreadCrush = 1,
                Event_CastOverpoweringFlurry = 2,
                Event_CastUnchainedDominance = 3
            };

            EventMap m_Events;

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player || me->isSummon() || me->isInCombat())
                    return;

                if (me->GetExactDist2d(p_Who) < 20.0f)
                {
                    l_Player->KilledMonsterCredit(eValues::Killcredit_ConquerorEncountered);
                }
            }

            void EnterCombat(Unit* /*victim*/) override
            {
                m_Events.ScheduleEvent(eValues::Event_CastDreadCrush, urand(2000, 5000));
                m_Events.ScheduleEvent(eValues::Event_CastUnchainedDominance, urand(5000, 10000));
                m_Events.ScheduleEvent(eValues::Event_CastOverpoweringFlurry, urand(10000, 20000));
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                if (!UpdateVictim())
                    return;

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eValues::Event_CastDreadCrush:
                {
                    DoCast(eValues::Spell_DreadCrush);
                    m_Events.ScheduleEvent(eValues::Event_CastDreadCrush, urand(10000, 20000));
                    break;
                }
                case eValues::Event_CastUnchainedDominance:
                {
                    DoCast(eValues::Spell_UnchainedDominance);
                    m_Events.ScheduleEvent(eValues::Event_CastUnchainedDominance, urand(40000, 60000));
                    break;
                }
                case eValues::Event_CastOverpoweringFlurry:
                {
                    DoCast(eValues::Spell_OverpoweringFlurry);
                    m_Events.ScheduleEvent(eValues::Event_CastOverpoweringFlurry, urand(20000, 30000));
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_eredar_conqueror_120395AI(p_Creature);
        }
};

/// Argus Rift - 122902
class npc_argus_rift_122902 : public CreatureScript
{
    public:
        npc_argus_rift_122902() : CreatureScript("npc_argus_rift_122902") { }

        struct npc_argus_rift_122902AI : public ScriptedAI
        {
            npc_argus_rift_122902AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eValues
            {
                Point_LeftShield = 1,
                Point_RightShield = 2
            };

            std::array<uint32, 3> m_CreaturesForSummonArray =
            { {
                    119533,
                    120395,
                    119602
            } };

            std::array<Position const, 3> m_LeftShieldPositionsArray =
            { {
                { 711.331116f, 1521.006958f, 600.224854f },
                { 713.496948f, 1529.631470f, 598.163269f },
                { 710.545898f, 1538.829102f, 596.194336f }
            } };

            std::array<Position const, 3> m_RightShieldPositionsArray =
            { {
                { 701.345520f, 1539.473999f, 598.792786f },
                { 698.364319f, 1547.010986f, 597.316956f },
                { 693.953796f, 1551.808838f, 596.438110f }
            } };

            void InitializeAI() override
            {
                for (uint8 l_Itr = 0; l_Itr < 3; l_Itr++)
                {
                    if (int32(me->GetPosition().GetPositionX()) == 743)
                    {
                        if (Creature* l_Creature = me->SummonCreature(m_CreaturesForSummonArray[urand(0, 2)], me->GetPosition(), TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000))
                        {
                            if (me->HasInPhaseList(9309))
                                l_Creature->SetInPhase(9309, true, true);
                            else
                                l_Creature->SetInPhase(47724, true, true);

                            l_Creature->SetWalk(false);
                            l_Creature->GetMotionMaster()->MovePoint(eValues::Point_LeftShield, m_LeftShieldPositionsArray[urand(0, 2)], true);
                        }
                    }
                    else
                    {
                        if (Creature* l_Creature = me->SummonCreature(m_CreaturesForSummonArray[urand(0, 2)], me->GetPosition(), TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000))
                        {
                            if (me->HasInPhaseList(9309))
                                l_Creature->SetInPhase(9309, true, true);
                            else
                                l_Creature->SetInPhase(47724, true, true);

                            l_Creature->SetWalk(false);
                            l_Creature->GetMotionMaster()->MovePoint(eValues::Point_RightShield, m_RightShieldPositionsArray[urand(0, 2)], true);
                        }
                    }
                }
            }

            void SummonedCreatureDies(Creature* /*p_Summon*/, Unit* /*p_Killer*/) override
            {
                if (int32(me->GetPosition().GetPositionX()) == 743)
                {
                    if (Creature* l_Creature = me->SummonCreature(m_CreaturesForSummonArray[urand(0, 2)], me->GetPosition(), TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000))
                    {
                        if (me->HasInPhaseList(9309))
                            l_Creature->SetInPhase(9309, true, true);
                        else
                            l_Creature->SetInPhase(47724, true, true);

                        l_Creature->SetWalk(false);
                        l_Creature->GetMotionMaster()->MovePoint(eValues::Point_LeftShield, m_LeftShieldPositionsArray[urand(0, 2)], true);
                    }
                }
                else
                {
                    if (Creature* l_Creature = me->SummonCreature(m_CreaturesForSummonArray[urand(0, 2)], me->GetPosition(), TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000))
                    {
                        if (me->HasInPhaseList(9309))
                            l_Creature->SetInPhase(9309, true, true);
                        else
                            l_Creature->SetInPhase(47724, true, true);

                        l_Creature->SetWalk(false);
                        l_Creature->GetMotionMaster()->MovePoint(eValues::Point_RightShield, m_RightShieldPositionsArray[urand(0, 2)], true);
                    }
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_argus_rift_122902AI(p_Creature);
        }
};

/// Illidan Stormrage - 123148
class npc_illidan_stormrage_123148 : public CreatureScript
{
    public:
        npc_illidan_stormrage_123148() : CreatureScript("npc_illidan_stormrage_123148") { }

        struct npc_illidan_stormrage_123148AI : public ScriptedAI
        {
            npc_illidan_stormrage_123148AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eNpcs
            {
                Npc_HighVindicator = 126362,
                Npc_LightswornAnchorite = 126363,
                Npc_ProphetVelen = 123149,
                Npc_AntaenLightBreaker = 120361
            };

            enum eConversations
            {
                Conv_AntaenDied = 5182
            };

            enum eEvents
            {
                Event_SummonsEmotestate = 1,
                Event_AttackAntaen = 2,
                Event_CastShear = 3,
                Event_CastGlaiveStrike = 4
            };

            enum eSpells
            {
                Spell_Shear = 253076,
                Spell_GlaiveStrike = 253094
            };

            enum eQuests
            {
                Quest_Vengeance = 47627,
                Quest_SignsOfResistance = 47641
            };

            enum eActions
            {
                Action_AntaenDied = 1,
                Action_VelenShield = 2
            };

            std::array<Position const, 6> m_HighVindicatorsPosArray =
            { {
                { 780.9583f, 1757.076f, 596.2074f, 0.8073703f },
                { 779.2639f, 1760.747f, 596.4713f, 0.7224479f },
                { 799.8316f, 1747.983f, 596.5927f, 1.153218f },
                { 775.3611f, 1762.745f, 596.7319f, 0.6359f },
                { 797.8837f, 1750.998f, 595.9626f, 1.194977f },
                { 793.7656f, 1750.339f, 595.574f, 1.098896f }
            } };

            std::array<Position const, 2> m_LightswornAnchoritsPosArray =
            { {
                { 796.0382f, 1745.819f, 596.1243f, 1.245226f },
                { 776.7153f, 1758.061f, 596.5623f, 0.7314777f }
            } };

            std::vector<ObjectGuid> m_SummonGuidsVector;
            ObjectGuid m_SummonerGuid;
            ObjectGuid m_VelenGuid;
            ObjectGuid m_AntaenLightBreakerGuid;
            Position const m_AntaenSpawnPos = { 807.4549f, 1786.13f, 593.4291f, 4.137975f };
            Position const m_VelenSpawnPos = { 785.6511f, 1758.08f, 595.7473f, 0.8410391f };
            EventMap m_Events;

            void sQuestAccept(Player* p_Player, Quest const* /*p_Quest*/) override
            {
                if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_AntaenLightBreaker, m_AntaenSpawnPos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, p_Player->GetGUID()))
                {
                    m_AntaenLightBreakerGuid = l_Creature->GetGUID();
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                Player* l_Player = p_Summoner->ToPlayer();
                if (!l_Player)
                    return;

                m_Events.ScheduleEvent(eEvents::Event_SummonsEmotestate, 22000);
                m_SummonerGuid = l_Player->GetGUID();

                if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_ProphetVelen, m_VelenSpawnPos, TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 360000, 0, l_Player->GetGUID()))
                {
                    m_VelenGuid = l_Creature->GetGUID();
                    m_SummonGuidsVector.push_back(l_Creature->GetGUID());
                }

                for (auto l_Itr : m_HighVindicatorsPosArray)
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_HighVindicator, l_Itr, TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 360000, 0, l_Player->GetGUID()))
                    {
                        m_SummonGuidsVector.push_back(l_Creature->GetGUID());
                    }
                }

                for (auto l_Itr : m_LightswornAnchoritsPosArray)
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_LightswornAnchorite, l_Itr, TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 360000, 0, l_Player->GetGUID()))
                    {
                        m_SummonGuidsVector.push_back(l_Creature->GetGUID());
                    }
                }
            }

            void EnterCombat(Unit* /*victim*/) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastShear, 4000);
                m_Events.ScheduleEvent(eEvents::Event_CastGlaiveStrike, urand(6000, 11000));
            }

            void DoAction(int32 const p_Action) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_Action)
                    {
                    case eActions::Action_AntaenDied:
                    {
                        for (auto l_Itr : m_SummonGuidsVector)
                        {
                            if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                            {
                                l_Creature->DespawnOrUnsummon();
                            }
                        }

                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_VelenGuid))
                        {
                            l_Creature->DespawnOrUnsummon();
                        }

                        me->DespawnOrUnsummon();

                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AntaenDied, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }

                        break;
                    }
                    case eActions::Action_VelenShield:
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_VelenGuid))
                        {
                            l_Creature->AI()->DoAction(eActions::Action_VelenShield);
                        }
                    }
                    default:
                        break;
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                if (!me->isSummon())
                    return;

                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !l_Player->IsInWorld())
                {
                    for (auto l_Itr : m_SummonGuidsVector)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->DespawnOrUnsummon();
                        }
                    }

                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AntaenLightBreakerGuid))
                    {
                        l_Creature->DespawnOrUnsummon();
                    }

                    me->DespawnOrUnsummon();
                }

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SummonsEmotestate:
                {
                    for (auto l_Itr : m_SummonGuidsVector)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 333);
                            l_Creature->SetUInt32Value(UNIT_FIELD_BYTES_2, 1);
                        }
                    }

                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 333);
                    me->SetUInt32Value(UNIT_FIELD_BYTES_2, 1);
                    m_Events.ScheduleEvent(eEvents::Event_AttackAntaen, 8000);
                    break;
                }
                case eEvents::Event_AttackAntaen:
                {
                    if (Creature* l_AntaenLightBreaker = ObjectAccessor::GetCreature(*me, m_AntaenLightBreakerGuid))
                    {
                        me->Attack(l_AntaenLightBreaker, true);
                        me->CombatStart(l_AntaenLightBreaker, true);

                        for (auto l_Itr : m_SummonGuidsVector)
                        {
                            if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                            {
                                l_Creature->Attack(l_AntaenLightBreaker, true);
                                l_Creature->CombatStart(l_AntaenLightBreaker, false);
                            }
                        }
                    }

                    break;
                }
                case eEvents::Event_CastShear:
                {
                    DoCastVictim(eSpells::Spell_Shear);
                    m_Events.ScheduleEvent(eEvents::Event_CastShear, urand(8000, 11000));
                    break;
                }
                case eEvents::Event_CastGlaiveStrike:
                {

                    DoCast(eSpells::Spell_GlaiveStrike);
                    m_Events.ScheduleEvent(eEvents::Event_CastGlaiveStrike, 11000);
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_illidan_stormrage_123148AI(p_Creature);
        }
};

/// Prophet Velen - 123149
class npc_prophet_velen_123149 : public CreatureScript
{
    public:
        npc_prophet_velen_123149() : CreatureScript("npc_prophet_velen_123149") { }

        struct npc_prophet_velen_123149AI : public ScriptedAI
        {
            npc_prophet_velen_123149AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eNpcs
            {
                Npc_Illidan = 119535,
                Npc_Velen = 123232
            };

            enum eEvents
            {
                Event_CastSmite = 1,
                Event_CastCircleOfLight = 2,
                Event_CastLightsVengeance = 3
            };

            enum eSpells
            {
                Spell_Smite = 197428,
                Spell_CircleOfLight = 251076,
                Spell_LightsVengeance = 251079,
                Spell_LightsProtection = 250893
            };

            enum eConversations
            {
                Conv_VelenSummoned = 4746
            };

            Position const m_IllidanSpawnPos = { 790.3333f, 1754.91f, 595.5783f, 1.087271f };
            Position const m_VelenSpawnPos = { 785.6511f, 1758.08f, 595.7473f, 0.8410391f };
            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void sQuestAccept(Player* p_Player, Quest const* /*p_Quest*/) override
            {
                p_Player->SummonCreature(eNpcs::Npc_Illidan, m_IllidanSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID());
                p_Player->SummonCreature(eNpcs::Npc_Velen, m_VelenSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID());

                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_VelenSummoned, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void EnterCombat(Unit* /*victim*/) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastSmite, 3000);
                m_Events.ScheduleEvent(eEvents::Event_CastCircleOfLight, 8000);
                m_Events.ScheduleEvent(eEvents::Event_CastLightsVengeance, 14000);
                SetCombatMovement(false);
            }

            void DoAction(int32 const p_Action) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    me->CastStop();
                    DoCast(eSpells::Spell_LightsProtection);
                    Talk(0, l_Player->GetGUID());
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                if (!me->isSummon())
                    return;

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastSmite:
                {
                    DoCastVictim(eSpells::Spell_Smite);
                    m_Events.ScheduleEvent(eEvents::Event_CastSmite, urand(3000, 4000));
                    break;
                }
                case eEvents::Event_CastCircleOfLight:
                {
                    DoCast(eSpells::Spell_CircleOfLight);
                    m_Events.ScheduleEvent(eEvents::Event_CastCircleOfLight, urand(15000, 30000));
                    break;
                }
                case eEvents::Event_CastLightsVengeance:
                {
                    DoCast(eSpells::Spell_LightsVengeance);
                    m_Events.ScheduleEvent(eEvents::Event_CastLightsVengeance, urand(15000, 30000));
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_prophet_velen_123149AI(p_Creature);
        }
};

/// Antaen Light-Breaker - 120361
class npc_antaen_light_breaker_120361 : public CreatureScript
{
    public:
        npc_antaen_light_breaker_120361() : CreatureScript("npc_antaen_light_breaker_120361") { }

        struct npc_antaen_light_breaker_120361AI : public ScriptedAI
        {
            npc_antaen_light_breaker_120361AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eEvents
            {
                Event_RemoveAnimKit = 1,
                Event_SetAnimKit = 2,
                Event_CastRecklessStomp = 3,
                Event_CastFelshockBombardment = 4,
                Event_SetFlag = 5
            };

            enum eSpells
            {
                Spell_RecklessStomp = 250863,
                Spell_FelshockBombardment = 250880
            };

            enum eActions
            {
                Action_AntaenDied = 1,
                Action_VelenShield = 2
            };

            enum eNpcs
            {
                Npc_ProphetVelen = 123149,
                Npc_Illidan = 123148
            };

            enum ePoints
            {
                Point_AntaenMove = 1
            };

            enum eConversations
            {
                Conv_EightyPct = 5177,
                Conv_SixtyPct = 5178,
                Conv_FortyPct = 5179,
                Conv_TwentyPct = 5181,
                Conv_QuestVengeanceaccept = 5175
            };

            enum eQuests
            {
                Quest_Vengeance = 47627
            };

            enum eKillcredits
            {
                Killcredit_SiegeWeaponDestroyed = 120361
            };

            EventMap m_Events;
            ObjectGuid m_SummonerGuid;
            ObjectGuid m_IllidanGuid;
            Position const m_AntaenMovePos = { 798.577f, 1769.931f, 594.3916f };
            Position const m_IllidanSpawnPos = { 790.3333f, 1754.91f, 595.5783f, 1.087271f };

            bool EightyPctConversationComplete = false;
            bool SixtyPctConversationComplete = false;
            bool FortyPctConversationComplete = false;
            bool TwentyPctConversationComplete = false;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_Events.ScheduleEvent(eEvents::Event_RemoveAnimKit, 21000);
                m_Events.ScheduleEvent(eEvents::Event_CastRecklessStomp, 29000);
                m_SummonerGuid = p_Summoner->GetGUID();
                me->SetReactState(ReactStates::REACT_PASSIVE);

                if (Creature* l_Creature = p_Summoner->SummonCreature(eNpcs::Npc_Illidan, m_IllidanSpawnPos, TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 360000, 0, p_Summoner->GetGUID()))
                {
                    m_IllidanGuid = l_Creature->GetGUID();
                }

                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestVengeanceaccept, p_Summoner, nullptr, p_Summoner->GetPosition()))
                        delete l_Conversation;
                }
            }

            void EnterCombat(Unit* /*victim*/) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastRecklessStomp, 9000);
                m_Events.ScheduleEvent(eEvents::Event_CastFelshockBombardment, 14000);
            }

            void DamageTaken(Unit* /*attacker*/, uint32& /*damage*/, SpellInfo const* /*p_SpellInfo*/) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    if (me->GetHealthPct() <= 80)
                    {
                        if (!EightyPctConversationComplete)
                        {
                            if (Conversation* l_Conversation = new Conversation)
                            {
                                if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_EightyPct, l_Player, nullptr, l_Player->GetPosition()))
                                    delete l_Conversation;
                            }

                            EightyPctConversationComplete = true;
                        }
                    }
                    if (me->GetHealthPct() <= 60)
                    {
                        if (!SixtyPctConversationComplete)
                        {
                            if (Conversation* l_Conversation = new Conversation)
                            {
                                if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_SixtyPct, l_Player, nullptr, l_Player->GetPosition()))
                                    delete l_Conversation;
                            }

                            SixtyPctConversationComplete = true;
                        }
                    }
                    if (me->GetHealthPct() <= 40)
                    {
                        if (!FortyPctConversationComplete)
                        {
                            if (Conversation* l_Conversation = new Conversation)
                            {
                                if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_FortyPct, l_Player, nullptr, l_Player->GetPosition()))
                                    delete l_Conversation;
                            }

                            FortyPctConversationComplete = true;
                        }
                    }
                    if (me->GetHealthPct() <= 20)
                    {
                        if (!TwentyPctConversationComplete)
                        {
                            if (Conversation* l_Conversation = new Conversation)
                            {
                                if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TwentyPct, l_Player, nullptr, l_Player->GetPosition()))
                                    delete l_Conversation;
                            }

                            TwentyPctConversationComplete = true;
                        }
                    }
                }
            }

            void JustDied(Unit* p_Killer) override
            {
                if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_IllidanGuid))
                {
                    l_Creature->AI()->DoAction(eActions::Action_AntaenDied);
                }

                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    if (l_Player->GetQuestStatus(eQuests::Quest_Vengeance) == QUEST_STATUS_INCOMPLETE)
                    {
                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_SiegeWeaponDestroyed);
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !l_Player->IsInWorld())
                {
                    me->DespawnOrUnsummon();
                    return;
                }

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_RemoveAnimKit:
                {
                    me->SetAIAnimKitId(0);
                    me->SendPlaySound(47944, false);
                    me->PlayOneShotAnimKitId(11389);
                    m_Events.ScheduleEvent(eEvents::Event_SetAnimKit, 1000);
                    break;
                }
                case eEvents::Event_SetAnimKit:
                {
                    me->SetAIAnimKitId(13076);
                    me->SetAIAnimKitId(0);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_AntaenMove, m_AntaenMovePos, false);
                    m_Events.ScheduleEvent(eEvents::Event_SetFlag, 6000);
                    break;
                }
                case eEvents::Event_SetFlag:
                {
                    me->RemoveFlag(UNIT_FIELD_FLAGS, 33587968);
                    me->RemoveFlag(UNIT_FIELD_FLAGS_2, 2099200);
                    me->SetAIAnimKitId(0);
                    me->SetReactState(ReactStates::REACT_AGGRESSIVE);

                    if (Creature* l_Creature = l_Player->FindNearestCreature(eNpcs::Npc_Illidan, 50.0f, true))
                    {
                        me->Attack(l_Creature, true);
                    }

                    break;
                }
                case eEvents::Event_CastRecklessStomp:
                {
                    DoCast(eSpells::Spell_RecklessStomp);
                    m_Events.ScheduleEvent(eEvents::Event_CastRecklessStomp, 22000);
                    break;
                }
                case eEvents::Event_CastFelshockBombardment:
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_IllidanGuid))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenShield);
                    }

                    Talk(0, l_Player->GetGUID());
                    me->CastStop();
                    DoCast(eSpells::Spell_FelshockBombardment);
                    m_Events.ScheduleEvent(eEvents::Event_CastFelshockBombardment, 36000);
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_antaen_light_breaker_120361AI(p_Creature);
        }
};

/// Prophet Velen - 123232
class npc_prophet_velen_123232 : public CreatureScript
{
    public:
        npc_prophet_velen_123232() : CreatureScript("npc_prophet_velen_123232") { }

        struct npc_prophet_velen_123232AI : public ScriptedAI
        {
            npc_prophet_velen_123232AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_Velen[91] =
            {
                { 784.7118f, 1750.941f, 595.7941f },
                { 784.2118f, 1748.441f, 595.7941f },
                { 783.7118f, 1745.191f, 595.5441f },
                { 783.4618f, 1741.691f, 595.2941f },
                { 782.9618f, 1738.441f, 595.2941f },
                { 782.4618f, 1734.941f, 595.2941f },
                { 781.9618f, 1731.191f, 595.2941f },
                { 781.4618f, 1727.441f, 595.5441f },
                { 780.9618f, 1724.191f, 595.2941f },
                { 780.7118f, 1720.691f, 594.7941f },
                { 780.2118f, 1717.191f, 594.2941f },
                { 779.9618f, 1713.691f, 594.0441f },
                { 779.4618f, 1710.691f, 593.5441f },
                { 779.4618f, 1707.691f, 593.0441f },
                { 779.2118f, 1704.691f, 592.5441f },
                { 779.2118f, 1701.941f, 592.2941f },
                { 778.9618f, 1699.441f, 591.7941f },
                { 779.2118f, 1696.941f, 591.5441f },
                { 779.4618f, 1694.691f, 591.0441f },
                { 779.7118f, 1692.441f, 590.7941f },
                { 780.4618f, 1690.191f, 590.2941f },
                { 781.2118f, 1687.691f, 590.0441f },
                { 782.4618f, 1685.191f, 589.5441f },
                { 783.9618f, 1682.191f, 588.7941f },
                { 785.7118f, 1678.691f, 587.5441f },
                { 787.7118f, 1675.691f, 586.5441f },
                { 789.7118f, 1672.441f, 585.7941f },
                { 791.9618f, 1668.941f, 585.0441f },
                { 793.9618f, 1665.941f, 584.2941f },
                { 795.9618f, 1662.941f, 583.7941f },
                { 797.9618f, 1660.191f, 583.2941f },
                { 799.9618f, 1657.441f, 582.7941f },
                { 801.7118f, 1654.441f, 582.2941f },
                { 803.4618f, 1651.691f, 581.7941f },
                { 805.2118f, 1648.441f, 581.2941f },
                { 806.9618f, 1645.191f, 581.0441f },
                { 808.7118f, 1641.441f, 580.5441f },
                { 810.4618f, 1637.941f, 580.2941f },
                { 811.9618f, 1634.191f, 580.0441f },
                { 813.4618f, 1630.691f, 580.0441f },
                { 814.9618f, 1627.191f, 580.0441f },
                { 816.4618f, 1624.191f, 580.0441f },
                { 817.7118f, 1621.191f, 579.7941f },
                { 819.2118f, 1618.441f, 579.7941f },
                { 820.9618f, 1615.691f, 579.7941f },
                { 822.7118f, 1613.191f, 579.7941f },
                { 824.7118f, 1610.441f, 579.7941f },
                { 827.2118f, 1607.441f, 579.5441f },
                { 829.4618f, 1604.441f, 579.5441f },
                { 831.9618f, 1601.691f, 579.2941f },
                { 834.7118f, 1598.691f, 579.0441f },
                { 837.4618f, 1596.191f, 578.7941f },
                { 840.2118f, 1593.941f, 578.2941f },
                { 842.7118f, 1591.691f, 577.7941f },
                { 845.4618f, 1589.441f, 577.2941f },
                { 848.2118f, 1587.441f, 576.7941f },
                { 851.4618f, 1584.941f, 576.2941f },
                { 854.4618f, 1583.191f, 576.0441f },
                { 857.4618f, 1580.941f, 575.5441f },
                { 860.2118f, 1579.191f, 575.0441f },
                { 863.4618f, 1576.941f, 575.0441f },
                { 865.9618f, 1574.941f, 575.0441f },
                { 868.9618f, 1572.941f, 575.0441f },
                { 871.4618f, 1570.941f, 575.0441f },
                { 874.2118f, 1569.191f, 575.0441f },
                { 877.2118f, 1566.941f, 573.7941f },
                { 879.9618f, 1564.691f, 572.7941f },
                { 882.4618f, 1562.941f, 571.7941f },
                { 884.9618f, 1561.191f, 570.5441f },
                { 887.4618f, 1559.441f, 569.5441f },
                { 889.4618f, 1557.941f, 568.5441f },
                { 891.9618f, 1556.441f, 567.5441f },
                { 894.2118f, 1554.941f, 566.5441f },
                { 896.7118f, 1553.691f, 565.5441f },
                { 898.9618f, 1552.441f, 564.5441f },
                { 901.7118f, 1551.191f, 563.2941f },
                { 904.4618f, 1550.191f, 562.5441f },
                { 907.2118f, 1548.941f, 561.7941f },
                { 909.9618f, 1547.441f, 560.7941f },
                { 912.7118f, 1546.191f, 559.0441f },
                { 915.2118f, 1544.941f, 557.0441f },
                { 917.7118f, 1544.191f, 556.2941f },
                { 920.2118f, 1543.941f, 555.5441f },
                { 922.9618f, 1543.941f, 554.7941f },
                { 925.9618f, 1544.191f, 554.0441f },
                { 928.7118f, 1544.691f, 553.2941f },
                { 931.7118f, 1545.191f, 552.7941f },
                { 934.9618f, 1546.191f, 552.2941f },
                { 937.7118f, 1546.941f, 552.0441f },
                { 940.2118f, 1547.441f, 551.7941f },
                { 941.7778f, 1547.786f, 551.2566f }
            };

            enum eEvents
            {
                Event_Mount = 1,
                Event_StartPath = 2,
                Event_SetFace = 3,
                Event_Despawn = 4
            };

            enum ePoints
            {
                Point_VelenPathEnd = 1
            };

            enum eKillcredits
            {
                Killcredit_MeetOutsideVillage = 123228
            };

            enum eNpcs
            {
                Npc_Jost = 122201,
                Npc_Divinius = 122200
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
                me->SetFacingTo(5.798089f);
                m_Events.ScheduleEvent(eEvents::Event_Mount, 32000);
                m_Events.ScheduleEvent(eEvents::Event_StartPath, 36000);

                if (Player* l_Player = p_Summoner->ToPlayer())
                {
                    if (Creature* l_Creature = l_Player->FindNearestCreature(eNpcs::Npc_Jost, 200.0f, true))
                    {
                        l_Player->SummonCreature(eNpcs::Npc_Jost, l_Creature->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID());
                        l_Creature->DestroyForPlayer(l_Player);
                    }

                    if (Creature* l_Creature = l_Player->FindNearestCreature(eNpcs::Npc_Divinius, 200.0f, true))
                    {
                        l_Player->SummonCreature(eNpcs::Npc_Divinius, l_Creature->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID());
                        l_Creature->DestroyForPlayer(l_Player);
                    }
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                if (p_PointId == ePoints::Point_VelenPathEnd)
                {
                    me->SetUInt32Value(UNIT_FIELD_MOUNT_DISPLAY_ID, 0);
                    m_Events.ScheduleEvent(eEvents::Event_SetFace, 2000);
                    m_Events.ScheduleEvent(eEvents::Event_Despawn, 4000);
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_Mount:
                {
                    me->SetUInt32Value(UNIT_FIELD_MOUNT_DISPLAY_ID, 31368);
                    break;
                }
                case eEvents::Event_StartPath:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_VelenPathEnd, Path_Velen, 91, false);
                    break;
                }
                case eEvents::Event_SetFace:
                {
                    me->SetFacingTo(3.159046f);
                    break;
                }
                case eEvents::Event_Despawn:
                {
                    if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                    {
                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_MeetOutsideVillage);
                        me->DespawnOrUnsummon();
                    }

                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_prophet_velen_123232AI(p_Creature);
        }
};

/// Jost - 122201
class npc_jost_122201 : public CreatureScript
{
    public:
        npc_jost_122201() : CreatureScript("npc_jost_122201") { }

        struct npc_jost_122201AI : public ScriptedAI
        {
            npc_jost_122201AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eEvents
            {
                Event_Move = 1,
                Event_SetFacing = 2,
                Event_ReturnToHome = 3,
                Event_SetDefaultFacing = 4
            };

            enum ePoints
            {
                Point_JostMove = 1
            };

            EventMap m_Events;
            Position const JostMovePointPos = { 784.712f, 1687.84f, 589.8282f };
            Position const JostReturnPos = { 782.8212f, 1687.734f, 589.9185f };

            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->SetAIAnimKitId(12976);
                m_Events.ScheduleEvent(eEvents::Event_Move, 40000);
                m_Events.ScheduleEvent(eEvents::Event_SetFacing, 41000);
                m_Events.ScheduleEvent(eEvents::Event_ReturnToHome, 50000);
                m_Events.ScheduleEvent(eEvents::Event_SetDefaultFacing, 51000);
                me->DespawnOrUnsummon(120000);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_Move:
                {
                    me->SetAIAnimKitId(0);
                    me->SetAIAnimKitId(13848);
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_JostMove, JostMovePointPos, false);
                    break;
                }
                case eEvents::Event_SetFacing:
                {
                    me->SetAIAnimKitId(12976);
                    me->SetFacingTo(3.263766f);
                    break;
                }
                case eEvents::Event_ReturnToHome:
                {
                    me->SetAIAnimKitId(0);
                    me->SetAIAnimKitId(13848);
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_JostMove, JostReturnPos, false);
                    break;
                }
                case eEvents::Event_SetDefaultFacing:
                {
                    me->SetAIAnimKitId(12976);
                    me->SetFacingTo(4.779923f);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_jost_122201AI(p_Creature);
        }
};

/// Divinius - 122200
class npc_divinius_122200 : public CreatureScript
{
    public:
        npc_divinius_122200() : CreatureScript("npc_divinius_122200") { }

        struct npc_divinius_122200AI : public ScriptedAI
        {
            npc_divinius_122200AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eEvents
            {
                Event_Move = 1,
                Event_SetFacing = 2,
                Event_ReturnToHome = 3,
                Event_SetDefaultFacing = 4
            };

            enum ePoints
            {
                Point_JostMove = 1
            };

            EventMap m_Events;
            Position const DiviniusMovePointPos = { 777.068f, 1687.44f, 590.1975f };
            Position const DiviniusReturnPos = { 778.9271f, 1687.069f, 589.9301f };

            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->SetAIAnimKitId(12975);
                m_Events.ScheduleEvent(eEvents::Event_Move, 40000);
                m_Events.ScheduleEvent(eEvents::Event_SetFacing, 41000);
                m_Events.ScheduleEvent(eEvents::Event_ReturnToHome, 50000);
                m_Events.ScheduleEvent(eEvents::Event_SetDefaultFacing, 51000);
                me->DespawnOrUnsummon(120000);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_Move:
                {
                    me->SetAIAnimKitId(0);
                    me->SetAIAnimKitId(13848);
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_JostMove, DiviniusMovePointPos, false);
                    break;
                }
                case eEvents::Event_SetFacing:
                {
                    me->SetAIAnimKitId(12975);
                    me->SetFacingTo(6.126106f);
                    break;
                }
                case eEvents::Event_ReturnToHome:
                {
                    me->SetAIAnimKitId(0);
                    me->SetAIAnimKitId(13848);
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_JostMove, DiviniusReturnPos, false);
                    break;
                }
                case eEvents::Event_SetDefaultFacing:
                {
                    me->SetAIAnimKitId(12975);
                    me->SetFacingTo(4.762372f);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_divinius_122200AI(p_Creature);
        }
};

/// Prophet Velen - 121345
class npc_prophet_velen_121345 : public CreatureScript
{
    public:
        npc_prophet_velen_121345() : CreatureScript("npc_prophet_velen_121345") { }

        struct npc_prophet_velen_121345AI : public ScriptedAI
        {
            npc_prophet_velen_121345AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_Velen[34] =
            {
                { 941.8455f, 1556.512f, 551.1345f },
                { 942.3455f, 1559.762f, 550.8845f },
                { 944.5955f, 1562.762f, 550.6345f },
                { 947.0955f, 1565.262f, 550.6345f },
                { 951.0955f, 1568.762f, 549.1345f },
                { 961.0486f, 1576.517f, 547.0253f },
                { 962.5486f, 1579.017f, 546.7753f },
                { 962.7986f, 1581.267f, 546.5253f },
                { 962.5486f, 1584.017f, 546.2753f },
                { 962.0486f, 1586.517f, 545.5253f },
                { 961.7986f, 1589.767f, 544.7753f },
                { 961.7986f, 1592.267f, 544.0253f },
                { 961.7986f, 1594.767f, 543.2753f },
                { 961.7986f, 1597.267f, 542.2753f },
                { 962.2986f, 1600.267f, 541.2753f },
                { 962.7986f, 1602.767f, 540.5253f },
                { 963.5486f, 1605.517f, 539.5253f },
                { 964.2986f, 1608.517f, 538.5253f },
                { 965.2986f, 1612.017f, 537.2753f },
                { 965.7986f, 1615.767f, 536.5253f },
                { 966.5486f, 1619.267f, 535.2753f },
                { 967.0486f, 1623.517f, 534.2753f },
                { 967.5486f, 1627.767f, 533.0253f },
                { 968.0486f, 1631.767f, 532.2753f },
                { 968.5486f, 1636.017f, 531.0253f },
                { 969.0486f, 1639.517f, 530.2753f },
                { 969.7986f, 1643.017f, 529.5253f },
                { 970.2986f, 1646.267f, 528.5253f },
                { 971.2986f, 1649.517f, 527.7753f },
                { 972.5486f, 1653.017f, 527.0253f },
                { 974.0486f, 1656.517f, 526.2753f },
                { 975.2986f, 1659.767f, 525.7753f },
                { 976.5486f, 1662.517f, 525.5253f },
                { 977.7726f, 1665.191f, 525.2204f }
            };

            enum eEvents
            {
                Event_Conversation = 1,
                Event_StartPath = 2,
                Event_Killcredit = 3
            };

            enum eConversations
            {
                Conv_QuestTheProphetsGambitAccept = 4740,
                Conv_PathAlmostDone = 4819,
                Conv_QuestTheProphetsGambl_Itrewarded = 5209
            };

            enum ePoints
            {
                Point_VelenPathEnd = 1
            };

            enum eKillcredits
            {
                Killcredit_SurvivorsFound = 120230
            };

            enum eSpells
            {
                Spell_PlaySceneVillageIntro = 240239
            };

            enum eQuests
            {
                Quest_TheProphetsGambit = 46732
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void sQuestAccept(Player* p_Player, Quest const* /*p_Quest*/) override
            {
                p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID());

                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestTheProphetsGambitAccept, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }
            }

            void sQuestComplete(Player* p_Player, Quest const* p_Quest) override
            {
                if (p_Quest->GetQuestId() == eQuests::Quest_TheProphetsGambit)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestTheProphetsGambl_Itrewarded, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                m_SummonerGuid = p_Summoner->GetGUID();
                m_Events.ScheduleEvent(eEvents::Event_StartPath, 9000);
                m_Events.ScheduleEvent(eEvents::Event_Conversation, 13000);
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    if (p_PointId == ePoints::Point_VelenPathEnd)
                    {
                        Talk(0, l_Player->GetGUID());
                        me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 333);
                        m_Events.ScheduleEvent(eEvents::Event_Killcredit, 6000);
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !me->isSummon())
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartPath:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_VelenPathEnd, Path_Velen, 34, false);
                    break;
                }
                case eEvents::Event_Conversation:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_PathAlmostDone, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eEvents::Event_Killcredit:
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_SurvivorsFound);
                    l_Player->CastSpell(l_Player, eSpells::Spell_PlaySceneVillageIntro, true);
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_prophet_velen_121345AI(p_Creature);
        }
};

/// Generic Bunny - 54638
class npc_generic_bunny_54638 : public CreatureScript
{
    public:
        npc_generic_bunny_54638() : CreatureScript("npc_generic_bunny_54638") { }

        struct npc_generic_bunny_54638AI : public ScriptedAI
        {
            npc_generic_bunny_54638AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_BeaconImpact = 240425,
                Spell_TeleporterArrivalFirst = 243634,
                Spell_TeleporterArrivalSecond = 243787
            };

            enum eEvents
            {
                Event_CastTeleporterArrivalSecond = 1,
                Event_KillcreditToPlayer = 2,
                Event_SummonEventNpcs = 3,
                Event_CastTeleporterArrivalSecondDestinyPoint = 4,
                Event_KillcreditBeaconPlaced = 5,
                Event_SummonTuralyonDestinyPoint = 6

            };

            enum eNpcs
            {
                Npc_LightforgedBeacon = 118830,
                Npc_LightforgedBeaconDestinyPoint = 124569,
                Npc_Turalyon = 120529,
                Npc_Lothraxion = 120643,
                Npc_TuralyonDestinyPoint = 120763
            };

            enum eKillcredits
            {
                Killcredit_PylonVisible = 120644,
                Killcredit_VisualBeaconDestinyPointPlaced = 126673
            };

            enum eActions
            {
                Action_LothraxionConversationWithTuralyon = 1,
                Action_BunnyDestinyPointStartEvent = 2,
                Action_TuralyonConversationWithLothraxion = 3,
                Action_BunnyStartEvent = 4,
                Actiom_TuralyonSummonedDestinyPoint = 5
            };

            enum eQuests
            {
                Quest_GatheringLight = 47431
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;
            Position const m_LightforgedBeaconSpawnPos = { 985.8195f, 1711.891f, 516.7661f, 2.894986f };
            Position const m_LightforgedBeaconDestinyPointSpawnPos = { 1437.483f, 1444.274f, 491.4666f, 0.2649446f };
            Position const m_TuralyonDestinyPointSpawnPos = { 1438.07f, 1444.86f, 491.745f, 0.2792527f };
            Position const m_LothraxionSpawnPos = { 985.78f, 1712.01f, 517.191f, 4.921828f };

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_BunnyStartEvent:
                {
                    DoCast(eSpells::Spell_BeaconImpact, true);
                    me->DelayedCastSpell(me, eSpells::Spell_TeleporterArrivalFirst, true, 2000);
                    m_Events.ScheduleEvent(eEvents::Event_CastTeleporterArrivalSecond, 7000);
                    break;
                }
                case eActions::Action_BunnyDestinyPointStartEvent:
                {
                    DoCast(eSpells::Spell_BeaconImpact, true);
                    me->DelayedCastSpell(me, eSpells::Spell_TeleporterArrivalFirst, true, 2000);
                    m_Events.ScheduleEvent(eEvents::Event_CastTeleporterArrivalSecondDestinyPoint, 7000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !me->isSummon())
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastTeleporterArrivalSecond:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_LightforgedBeacon, m_LightforgedBeaconSpawnPos, TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 2000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->PlayOneShotAnimKitId(14161);
                    }

                    me->RemoveAllAuras();
                    DoCast(eSpells::Spell_TeleporterArrivalSecond, true);
                    m_Events.ScheduleEvent(eEvents::Event_KillcreditToPlayer, 2500);
                    break;
                }
                case eEvents::Event_KillcreditToPlayer:
                {
                    if (Creature* l_Creature = l_Player->FindNearestCreature(eNpcs::Npc_Turalyon, 50.0f, true))
                    {
                        if (Creature* l_Turalyon = l_Player->SummonCreature(eNpcs::Npc_Turalyon, l_Creature->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                        {
                            l_Turalyon->AI()->DoAction(eActions::Action_TuralyonConversationWithLothraxion);
                        }
                    }

                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_PylonVisible);
                    m_Events.ScheduleEvent(eEvents::Event_SummonEventNpcs, 1500);
                    break;
                }
                case eEvents::Event_SummonEventNpcs:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Lothraxion, m_LothraxionSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_LothraxionConversationWithTuralyon);
                    }

                    me->DespawnOrUnsummon();
                    break;
                }
                case eEvents::Event_CastTeleporterArrivalSecondDestinyPoint:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_LightforgedBeacon, m_LightforgedBeaconDestinyPointSpawnPos, TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 2000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->PlayOneShotAnimKitId(14161);
                    }

                    me->RemoveAllAuras();
                    DoCast(eSpells::Spell_TeleporterArrivalSecond, true);
                    m_Events.ScheduleEvent(eEvents::Event_KillcreditBeaconPlaced, 2500);
                    break;
                }
                case eEvents::Event_KillcreditBeaconPlaced:
                {
                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_VisualBeaconDestinyPointPlaced);
                    m_Events.ScheduleEvent(eEvents::Event_SummonTuralyonDestinyPoint, 1500);
                    break;
                }
                case eEvents::Event_SummonTuralyonDestinyPoint:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_TuralyonDestinyPoint, m_TuralyonDestinyPointSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Actiom_TuralyonSummonedDestinyPoint);
                    }

                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_generic_bunny_54638AI(p_Creature);
        }
};

/// High Exarch Turalyon - 120529
class npc_high_exarch_turalyon_120529 : public CreatureScript
{
    public:
        npc_high_exarch_turalyon_120529() : CreatureScript("npc_high_exarch_turalyon_120529") { }

        struct npc_high_exarch_turalyon_120529AI : public ScriptedAI
        {
            npc_high_exarch_turalyon_120529AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_TuralyonFirst[38] =
            {
                { 978.6155f, 1656.828f, 525.9001f },
                { 972.1155f, 1654.828f, 526.9001f },
                { 967.3655f, 1650.828f, 527.9001f },
                { 963.8655f, 1646.078f, 529.1501f },
                { 962.8655f, 1640.328f, 530.6501f },
                { 963.8655f, 1634.828f, 531.6501f },
                { 966.1155f, 1629.578f, 532.6501f },
                { 967.6155f, 1625.078f, 533.6501f },
                { 968.3655f, 1620.078f, 534.9001f },
                { 967.8655f, 1615.328f, 535.9001f },
                { 967.1155f, 1611.078f, 537.1501f },
                { 965.6155f, 1607.328f, 538.4001f },
                { 963.6155f, 1603.828f, 539.9001f },
                { 961.1155f, 1600.578f, 541.4001f },
                { 960.1155f, 1598.328f, 542.1501f },
                { 959.1155f, 1595.078f, 543.4001f },
                { 959.6155f, 1590.828f, 544.6501f },
                { 960.3655f, 1587.078f, 545.6501f },
                { 961.3655f, 1583.828f, 546.1501f },
                { 962.6155f, 1580.828f, 546.6501f },
                { 963.3655f, 1577.078f, 546.9001f },
                { 963.3655f, 1574.328f, 547.1501f },
                { 963.6155f, 1571.078f, 547.1501f },
                { 964.3655f, 1567.828f, 547.1501f },
                { 966.1155f, 1564.328f, 547.1501f },
                { 968.6155f, 1561.328f, 546.9001f },
                { 971.1155f, 1558.828f, 546.6501f },
                { 974.1155f, 1556.078f, 546.4001f },
                { 977.6155f, 1553.578f, 546.4001f },
                { 980.6155f, 1551.578f, 546.4001f },
                { 984.1155f, 1549.578f, 546.1501f },
                { 988.8655f, 1547.328f, 545.9001f },
                { 992.3655f, 1546.578f, 545.6501f },
                { 995.8655f, 1545.828f, 545.4001f },
                { 999.6155f, 1545.328f, 545.1501f },
                { 1003.365f, 1545.328f, 545.1501f },
                { 1006.865f, 1545.578f, 545.1501f },
                { 1010.255f, 1546.024f, 544.9132f }
            };

            G3D::Vector3 const Path_TuralyonSecond[56] =
            {
                { 977.7743f, 1702.715f, 523.8217f },
                { 969.9445f, 1708.395f, 525.0905f },
                { 968.9445f, 1709.395f, 525.0905f },
                { 964.5355f, 1712.168f, 526.9255f },
                { 963.7855f, 1712.668f, 526.9255f },
                { 963.0355f, 1713.418f, 527.4255f },
                { 962.2855f, 1713.918f, 527.6755f },
                { 961.0355f, 1714.668f, 527.9255f },
                { 960.0355f, 1715.418f, 527.9255f },
                { 959.7344f, 1715.778f, 528.2311f },
                { 958.4844f, 1716.528f, 528.7311f },
                { 957.4844f, 1717.028f, 528.9811f },
                { 954.9844f, 1718.028f, 529.2311f },
                { 953.7344f, 1718.778f, 529.4811f },
                { 952.9844f, 1718.778f, 529.4811f },
                { 951.4844f, 1719.528f, 529.9811f },
                { 948.4844f, 1720.778f, 530.4811f },
                { 946.1093f, 1722.077f, 530.9095f },
                { 942.8593f, 1722.827f, 531.1595f },
                { 941.3593f, 1723.077f, 530.9095f },
                { 939.8593f, 1723.577f, 530.9095f },
                { 939.6121f, 1723.672f, 530.7793f },
                { 937.8621f, 1724.172f, 530.7793f },
                { 936.8621f, 1725.922f, 530.5293f },
                { 935.8621f, 1726.922f, 530.0293f },
                { 935.1121f, 1727.922f, 529.5293f },
                { 934.1121f, 1729.172f, 529.2793f },
                { 933.6121f, 1730.172f, 529.0293f },
                { 932.8621f, 1731.172f, 528.7793f },
                { 932.5715f, 1731.441f, 528.6264f },
                { 933.5715f, 1732.941f, 528.6264f },
                { 934.8215f, 1734.691f, 528.1264f },
                { 935.5715f, 1735.941f, 527.8764f },
                { 936.5715f, 1737.191f, 527.3764f },
                { 936.6214f, 1737.499f, 527.1936f },
                { 936.8714f, 1737.999f, 526.9436f },
                { 941.8714f, 1740.749f, 525.9436f },
                { 943.1214f, 1741.499f, 525.6936f },
                { 944.6214f, 1742.249f, 525.4436f },
                { 945.6927f, 1742.929f, 524.8086f },
                { 950.6927f, 1745.179f, 524.5586f },
                { 953.1927f, 1746.179f, 524.3086f },
                { 955.4427f, 1747.179f, 524.0586f },
                { 957.4028f, 1748.258f, 523.8621f },
                { 960.1528f, 1750.508f, 523.8621f },
                { 961.9028f, 1753.258f, 523.8621f },
                { 963.2491f, 1755.093f, 523.6137f },
                { 963.7491f, 1757.343f, 523.6137f },
                { 963.9991f, 1759.093f, 523.8637f },
                { 964.4991f, 1760.593f, 523.6137f },
                { 964.9151f, 1762.833f, 523.9815f },
                { 964.6651f, 1764.583f, 523.7315f },
                { 964.4151f, 1767.083f, 522.9815f },
                { 964.4151f, 1769.333f, 522.7315f },
                { 964.4151f, 1770.833f, 522.7315f },
                { 965.0333f, 1773.276f, 522.4412f }
            };

            enum eEvents
            {
                Event_StartFirstPath = 1,
                Event_SetAnimKit = 2,
                Event_Killcredit = 3,
                Event_SetFacing = 4,
                Event_StartSecondPath = 5,
                Event_SetFacingToLothraxion = 6,
                Event_SetDefaultOrientation = 7
            };

            enum eConversations
            {
                Conv_TuralyonPathStart = 4878,
                Conv_TuralyonMet = 5107,
                Conv_LothraxionArrived = 4852
            };

            enum ePoints
            {
                Point_TuralyonFirstPathEnd = 1,
                Point_TuralyonSecondPathEnd = 2
            };

            enum eKillcredits
            {
                Killcredit_WalkWithTuralyon = 120813,
                Killcredit_MeetTuralyonInKrokuun = 122382,
                Killcredit_GossipSelect = 289811,
                Killcredit_LothraxionVisible = 120648
            };

            enum eObjectives
            {
                Obj_MeetTuralyonInKrokuun = 291300,
                Obj_RubbleBlocker = 290608
            };

            enum eQuests
            {
                Quest_FromDarkness = 46839,
                Quest_GatheringLight = 47431
            };

            enum eNpcs
            {
                Npc_ChieftainHatuun = 119388
            };

            enum eActions
            {
                Action_TuralyonGossipSelect = 1,
                Action_TuralyonMet = 2,
                Action_TuralyonConversationWithLothraxion = 3
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;
            Position const m_ChieftainHatuunSpawnPos = { 975.5486f, 1700.762f, 523.6988f, 5.089485f };

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) < 10.0f && l_Player->GetQuestStatus(eQuests::Quest_GatheringLight) == QUEST_STATUS_INCOMPLETE &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_MeetTuralyonInKrokuun) == 0)
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_MeetTuralyonInKrokuun);

                    if (Creature* l_Creature = l_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TuralyonMet);
                    }

                    l_Player->SummonCreature(eNpcs::Npc_ChieftainHatuun, m_ChieftainHatuunSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID());

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TuralyonMet, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                if (p_Quest->GetQuestId() == eQuests::Quest_FromDarkness)
                {
                    Talk(0, p_Player->GetGUID());
                }
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_GossipSelect);
                p_Player->PlayerTalkClass->SendCloseGossip();

                if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_TuralyonGossipSelect);
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_TuralyonFirstPathEnd:
                {
                    me->SetFacingTo(0.2792527f);
                    m_Events.ScheduleEvent(eEvents::Event_SetAnimKit, 1000);
                    break;
                }
                case ePoints::Point_TuralyonSecondPathEnd:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }

            void DoAction(int32 const p_Action) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_Action)
                    {
                    case eActions::Action_TuralyonGossipSelect:
                    {
                        me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                        m_Events.ScheduleEvent(eEvents::Event_StartFirstPath, 3000);
                        break;
                    }
                    case eActions::Action_TuralyonMet:
                    {
                        me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                        m_Events.ScheduleEvent(eEvents::Event_SetFacing, 21000);
                        break;
                    }
                    case eActions::Action_TuralyonConversationWithLothraxion:
                    {
                        me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                        m_Events.ScheduleEvent(eEvents::Event_SetFacingToLothraxion, 7500);
                        m_Events.ScheduleEvent(eEvents::Event_SetDefaultOrientation, 50000);
                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !me->isSummon())
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartFirstPath:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TuralyonPathStart, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_TuralyonFirstPathEnd, Path_TuralyonFirst, 38, true);
                    break;
                }
                case eEvents::Event_SetAnimKit:
                {
                    me->SetAIAnimKitId(782);
                    m_Events.ScheduleEvent(eEvents::Event_Killcredit, 3000);
                    break;
                }
                case eEvents::Event_Killcredit:
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_WalkWithTuralyon);
                    me->DespawnOrUnsummon();
                    break;
                }
                case eEvents::Event_SetFacing:
                {
                    me->SetFacingTo(2.565634f);
                    m_Events.ScheduleEvent(eEvents::Event_StartSecondPath, 26000);
                    break;
                }
                case eEvents::Event_StartSecondPath:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_TuralyonSecondPathEnd, Path_TuralyonSecond, 56, false);
                    break;
                }
                case eEvents::Event_SetFacingToLothraxion:
                {
                    me->SetFacingTo(1.53589f);
                    break;
                }
                case eEvents::Event_SetDefaultOrientation:
                {
                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_LothraxionVisible);
                    me->SetFacingTo(3.515049f);
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_high_exarch_turalyon_120529AI(p_Creature);
        }
};

/// Lothraxion - 120643
class npc_lothraxion_120643 : public CreatureScript
{
    public:
        npc_lothraxion_120643() : CreatureScript("npc_lothraxion_120643") { }

        struct npc_lothraxion_120643AI : public ScriptedAI
        {
            npc_lothraxion_120643AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_Lothraxion[9] =
            {
                { 988.1591f, 1702.945f, 517.0717f },
                { 988.6591f, 1699.945f, 517.3217f },
                { 988.6591f, 1696.945f, 518.3217f },
                { 988.6591f, 1693.945f, 519.3217f },
                { 988.6591f, 1691.445f, 520.3217f },
                { 988.6591f, 1688.695f, 521.8217f },
                { 988.6591f, 1686.195f, 522.8217f },
                { 988.9091f, 1684.195f, 523.3217f },
                { 989.0052f, 1681.847f, 523.5444f }
            };

            enum eEvents
            {
                Event_StartPath = 1,
                Event_Conversation = 2
            };

            enum eSpells
            {
                Spell_LightforgedBeaconArrival = 245570
            };

            enum ePoints
            {
                Point_LothraxionathEnd = 1
            };

            enum eActions
            {
                Action_LothraxionConversationWithTuralyon = 1
            };

            enum eConversations
            {
                Conv_LothraxionArrived = 4852
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_LothraxionConversationWithTuralyon:
                {
                    DoCast(eSpells::Spell_LightforgedBeaconArrival, true);
                    m_Events.ScheduleEvent(eEvents::Event_StartPath, 5000);
                    me->DespawnOrUnsummon(48000);
                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_LothraxionathEnd:
                {
                    me->SetFacingTo(4.303022f);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !me->isSummon())
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartPath:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_LothraxionathEnd, Path_Lothraxion, 9, true);
                    m_Events.ScheduleEvent(eEvents::Event_Conversation, 2000);
                    break;
                }
                case eEvents::Event_Conversation:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_LothraxionArrived, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_lothraxion_120643AI(p_Creature);
        }
};

/// Chieftain Hatuun - 119388
class npc_chieftain_hatuun_119388 : public CreatureScript
{
    public:
        npc_chieftain_hatuun_119388() : CreatureScript("npc_chieftain_hatuun_119388") { }

        struct npc_chieftain_hatuun_119388AI : public ScriptedAI
        {
            npc_chieftain_hatuun_119388AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eEvents
            {
                Event_MoveToRubble = 1,
                Event_RemoveRubble = 2,
                Event_ReturnToDefaultPos = 3
            };

            enum ePoints
            {
                Point_ChieftainHatuunRubble = 1,
                Point_ChieftainHatuunReturn = 2
            };

            enum eKillcredits
            {
                Killcredit_RubbleBlocker = 126241
            };

            enum eGameobjects
            {
                Gob_Rubble = 273509
            };

            enum eSpells
            {
                Spell_CosmeticEarthChannel = 82526
            };

            enum eObjectives
            {
                Obj_RubbleBlocker = 290608
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;
            Position const m_ChieftainHatuunRubblePos = { 968.0723f, 1708.84f, 525.0872f };
            Position const m_ChieftainHatuunReturnPos = { 975.5486f, 1700.762f, 523.5906f };
            Position const m_RubbleSpawnPos = { 962.1927f, 1713.2f, 529.3148f, 2.58054f };

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
                m_Events.ScheduleEvent(eEvents::Event_MoveToRubble, 21000);
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_PointId)
                    {
                    case ePoints::Point_ChieftainHatuunReturn:
                    {
                        me->SetFacingTo(5.089485f);
                        me->DespawnOrUnsummon(120000);
                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !me->isSummon())
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_MoveToRubble:
                {
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_ChieftainHatuunRubble, m_ChieftainHatuunRubblePos, true);
                    m_Events.ScheduleEvent(eEvents::Event_RemoveRubble, 9000);
                    break;
                }
                case eEvents::Event_RemoveRubble:
                {
                    if (GameObject* l_Gob = l_Player->SummonGameObject(eGameobjects::Gob_Rubble, m_RubbleSpawnPos, 0, 0, l_Player->GetGUID()))
                    {
                        l_Gob->SendGameObjectActivateAnimKit(13792);
                        l_Gob->AddDelayedEvent([l_Gob]() -> void
                        {
                            l_Gob->Delete();
                        }, 1000);
                    }

                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_RubbleBlocker);
                    DoCast(eSpells::Spell_CosmeticEarthChannel, true);
                    m_Events.ScheduleEvent(eEvents::Event_ReturnToDefaultPos, 7000);
                    break;
                }
                case eEvents::Event_ReturnToDefaultPos:
                {
                    me->RemoveAllAuras();
                    me->GetMotionMaster()->MovePoint(ePoints::Point_ChieftainHatuunReturn, m_ChieftainHatuunReturnPos, true);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_chieftain_hatuun_119388AI(p_Creature);
        }
};

/// Darkfallen Slave - 121254
class npc_darkfallen_slave_121254 : public CreatureScript
{
    public:
        npc_darkfallen_slave_121254() : CreatureScript("npc_darkfallen_slave_121254") { }

        struct npc_darkfallen_slave_121254AI : public ScriptedAI
        {
            npc_darkfallen_slave_121254AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_Rescuing = 242632,
                Spell_SetHealth = 244972
            };

            enum eKillcredits
            {
                Killcredit_DarkfallenSlaveRescued = 120608
            };

            void InitializeAI() override
            {
                DoCast(eSpells::Spell_SetHealth, true);
            }

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = p_Caster->ToPlayer())
                {
                    if (p_Spell->Id == eSpells::Spell_Rescuing)
                    {
                        me->DestroyForPlayer(l_Player);

                        if (Creature* l_Creature = l_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                        {
                            l_Creature->SetAIAnimKitId(0);
                            l_Creature->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_SPELLCLICK);
                            l_Creature->SetUInt32Value(UNIT_FIELD_DISPLAY_ID, me->GetUInt32Value(UNIT_FIELD_DISPLAY_ID));
                            l_Creature->DespawnOrUnsummon(5000);
                        }

                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_DarkfallenSlaveRescued);
                    }
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->SetFacingToObject(p_Summoner);
                Talk(0, p_Summoner->GetGUID());
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_darkfallen_slave_121254AI(p_Creature);
        }
};

/// Darkfallen Slave - 120608
class npc_darkfallen_slave_120608 : public CreatureScript
{
    public:
        npc_darkfallen_slave_120608() : CreatureScript("npc_darkfallen_slave_120608") { }

        struct npc_darkfallen_slave_120608AI : public ScriptedAI
        {
            npc_darkfallen_slave_120608AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_FreePrisoner = 240591,
                Spell_SetHealth = 244972
            };

            enum eKillcredits
            {
                Killcredit_DarkfallenSlaveRescued = 120608
            };

            bool m_Hitted = false;

            void Reset() override
            {
                m_Hitted = false;
                DoCast(eSpells::Spell_SetHealth, true);
            }

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = p_Caster->ToPlayer())
                {
                    if (p_Spell->Id == eSpells::Spell_FreePrisoner && !m_Hitted)
                    {
                        me->RemoveAllAuras();
                        DoCast(eSpells::Spell_SetHealth, true);
                        Talk(0, l_Player->GetGUID());
                        me->DespawnOrUnsummon(5000);
                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_DarkfallenSlaveRescued);
                        m_Hitted = true;
                    }
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_darkfallen_slave_120608AI(p_Creature);
        }
};

/// High Exarch Turalyon - 120953
class npc_high_exarch_turalyon_120953 : public CreatureScript
{
    public:
        npc_high_exarch_turalyon_120953() : CreatureScript("npc_high_exarch_turalyon_120953") { }

        struct npc_high_exarch_turalyon_120953AI : public ScriptedAI
        {
            npc_high_exarch_turalyon_120953AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eEvents
            {
                Event_ResetLOS = 1,
            };

            enum eNpcs
            {
                Npc_Turalyon = 120738
            };

            enum eKillcredits
            {
                Killcredit_SpeakWithTuralyon = 120738
            };

            enum eActions
            {
                Action_StartFight = 4
            };

            EventMap m_Events;
            bool CanSayLine = true;

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(p_Who) < 15.0f && CanSayLine)
                {
                    Talk(0, l_Player->GetGUID());
                    CanSayLine = false;
                    m_Events.ScheduleEvent(eEvents::Event_ResetLOS, 30000);
                }
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();
                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_SpeakWithTuralyon);

                if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_Turalyon, me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_StartFight);
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_ResetLOS:
                {
                    CanSayLine = true;
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_high_exarch_turalyon_120953AI(p_Creature);
        }
};

/// High Exarch Turalyon - 120738
class npc_high_exarch_turalyon_120738 : public CreatureScript
{
    public:
        npc_high_exarch_turalyon_120738() : CreatureScript("npc_high_exarch_turalyon_120738") { }

        struct npc_high_exarch_turalyon_120738AI : public ScriptedAI
        {
            npc_high_exarch_turalyon_120738AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_TuralyonFirst[5] =
            {
                { 1324.018f, 1900.865f, 549.6937f },
                { 1325.018f, 1899.865f, 549.6937f },
                { 1325.768f, 1898.365f, 549.6937f },
                { 1326.518f, 1896.865f, 549.6937f },
                { 1327.349f, 1894.47f, 549.4103f }
            };

            G3D::Vector3 const Path_TuralyonSecond[5] =
            {
                { 1330.295f, 1887.742f, 549.0746f },
                { 1331.795f, 1883.742f, 549.0746f },
                { 1333.295f, 1880.242f, 549.0746f },
                { 1335.045f, 1875.992f, 548.8246f },
                { 1337.241f, 1871.514f, 548.2388f }
            };

            enum eSpells
            {
                Spell_CrashOfLight = 241000,
                Spell_Consecration = 251549,
                Spell_HandOfReckoning = 247956,
                Spell_AvengingWrath = 252856,
                Spell_CrusaderStrike = 241011,
                Spell_BladeOfTheHighExarch = 251150,
                Spell_GripOfThePitKing = 241185,
                Spell_SummonBeacon = 241647
            };

            enum ePoints
            {
                Point_FirstPathEnd = 1,
                Point_SecondPathEnd = 2,
                Point_MovePoint = 3,
                Point_MeetPoint = 4
            };

            enum eEvents
            {
                Event_SetBytes = 1,
                Event_StartFirstPath = 2,
                Event_Say = 3,
                Event_SetEmote = 4,
                Event_RemoveEmote = 5,
                Event_CastConsecration = 6,
                Event_CastHandOfReckoning = 7,
                Event_CastAvengingWrath = 8,
                Event_CastBladeOfTheHighExarch = 9,
                Event_CastCrusaderStrike = 10,
                Event_CombatStartConversation = 11,
                Event_DoNotGiveInConversation = 12,
                Event_SummonAlleria = 13,
                Event_PerfectTimingConversation = 14,
                Event_SetFacing = 15,
                Event_PlayVisualKit = 16,
                Event_SetDefaultFacing = 17,
                Event_StartAttack = 18
            };

            enum eNpcs
            {
                Npc_Aggonar = 119397,
                Npc_Alleria = 120913,
                Npc_DarkfallenSlave = 120915
            };

            enum eActions
            {
                Action_AggonarKillThisGuys = 1,
                Action_AggonarRemoveImmuns = 2,
                Action_StartEvents = 3,
                Action_StartFight = 4,
                Action_StartBeaconEvent = 5,
                Action_AlleriaStartMeetEvent = 6
            };

            enum eConversations
            {
                Conv_AggonarKillSomeGuys = 4911,
                Conv_CombatStartConversation = 4917,
                Conv_GripConversation = 4982,
                Conv_PerfectTimingConversation = 4918,
                Conv_AboutSonConversation = 5468,
                Conv_AfterFight = 4922
            };

            enum eQuests
            {
                Quest_AStrikeAtTheHeart = 46842,
                Quest_ReturnToTheVindicaar = 46843
            };

            enum eKillcredits
            {
                Killcredit_Met = 289806
            };

            enum eObjectives
            {
                Obj_AggonarSlain = 289803
            };

            std::array<Position const, 4> m_DarkfallenSlavesPosArray =
            { {
                { 1343.585f, 1848.262f, 548.4139f, 5.564633f },
                { 1340.632f, 1846.34f, 548.8312f, 5.675924f },
                { 1340.151f, 1850.663f, 548.5836f, 5.61862f },
                { 1342.561f, 1854.29f, 548.1891f, 5.509074f }
            } };

            ObjectGuid m_SummonerGuid;
            ObjectGuid m_AggonarGuid;
            ObjectGuid m_AlleriaGuid;
            Position const m_AggonarSpawnPos = { 1361.313f, 1834.2f, 546.1584f, 2.43415f };
            Position const m_AlleriaSpawnPos = { 1373.238f, 1860.618f, 551.8513f, 3.0834f };
            Position const m_JumpPos = { 1346.851f, 1853.672f, 547.7713f, 5.206423f };
            Position const m_MeetWithAlleriaPos = { 1346.1f, 1857.8f, 548.058f };
            EventMap m_Events;
            bool MeetWithAlleriaConversationDone = false;

            void sQuestAccept(Player* p_Player, Quest const* /*p_Quest*/) override
            {
                if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 120000, 0, p_Player->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_StartBeaconEvent);
                }
            }

            void DoAction(int32 const p_Action) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_Action)
                    {
                    case eActions::Action_StartFight:
                    {
                        if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Aggonar, m_AggonarSpawnPos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 60000, 0, l_Player->GetGUID()))
                        {
                            m_AggonarGuid = l_Creature->GetGUID();
                        }

                        for (auto l_Itr : m_DarkfallenSlavesPosArray)
                        {
                            l_Player->SummonCreature(eNpcs::Npc_DarkfallenSlave, l_Itr, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID());
                        }

                        me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                        m_SummonerGuid = l_Player->GetGUID();
                        m_Events.ScheduleEvent(eEvents::Event_SetBytes, 2000);
                        break;
                    }
                    case eActions::Action_StartBeaconEvent:
                    {
                        m_Events.ScheduleEvent(eEvents::Event_SetFacing, 2000);
                        m_Events.ScheduleEvent(eEvents::Event_PlayVisualKit, 3000);
                        m_Events.ScheduleEvent(eEvents::Event_SetDefaultFacing, 6000);
                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_PointId)
                    {
                    case ePoints::Point_FirstPathEnd:
                    {
                        m_Events.ScheduleEvent(eEvents::Event_Say, 1000);
                        break;
                    }
                    case ePoints::Point_SecondPathEnd:
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AggonarGuid))
                        {
                            l_Creature->AI()->DoAction(eActions::Action_AggonarRemoveImmuns);
                        }

                        me->CastSpell(m_JumpPos, eSpells::Spell_CrashOfLight, false);
                        m_Events.ScheduleEvent(eEvents::Event_StartAttack, 3500);
                        m_Events.ScheduleEvent(eEvents::Event_CastConsecration, 5000);
                        m_Events.ScheduleEvent(eEvents::Event_CombatStartConversation, 6000);
                        m_Events.ScheduleEvent(eEvents::Event_CastHandOfReckoning, 8000);
                        m_Events.ScheduleEvent(eEvents::Event_CastAvengingWrath, 9000);
                        m_Events.ScheduleEvent(eEvents::Event_CastCrusaderStrike, 10000);
                        m_Events.ScheduleEvent(eEvents::Event_CastBladeOfTheHighExarch, 11000);
                        break;
                    }
                    case ePoints::Point_MeetPoint:
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AlleriaGuid))
                        {
                            l_Creature->DespawnOrUnsummon();
                        }

                        me->SetFacingTo(1.623156f);
                        me->DespawnOrUnsummon();
                        l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_Met);

                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AfterFight, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }

                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void SpellHit(Unit* /*p_Caster*/, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    if (p_Spell->Id == eSpells::Spell_GripOfThePitKing)
                    {
                        m_Events.Reset();
                        m_Events.ScheduleEvent(eEvents::Event_DoNotGiveInConversation, 17000);
                        m_Events.ScheduleEvent(eEvents::Event_SummonAlleria, 19000);
                        m_Events.ScheduleEvent(eEvents::Event_PerfectTimingConversation, 23000);
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !me->isSummon())
                    return;

                if (l_Player->GetQuestObjectiveCounter(eObjectives::Obj_AggonarSlain) == 1 && !MeetWithAlleriaConversationDone)
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AlleriaGuid))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AlleriaStartMeetEvent);
                    }

                    m_Events.Reset();
                    me->RemoveAllAuras();
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_MeetPoint, m_MeetWithAlleriaPos, true);
                    MeetWithAlleriaConversationDone = true;
                }

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SetBytes:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AggonarKillSomeGuys, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->SetUInt32Value(UNIT_FIELD_BYTES_2, 1);
                    Talk(0, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_StartFirstPath, 3000);
                    break;
                }
                case eEvents::Event_StartFirstPath:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_FirstPathEnd, Path_TuralyonFirst, 5, false);
                    break;
                }
                case eEvents::Event_Say:
                {
                    Talk(1, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_SetEmote, 1000);
                    break;
                }
                case eEvents::Event_SetEmote:
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AggonarGuid))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AggonarKillThisGuys);
                    }

                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 375);
                    m_Events.ScheduleEvent(eEvents::Event_RemoveEmote, 4000);
                    break;
                }
                case eEvents::Event_RemoveEmote:
                {
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_SecondPathEnd, Path_TuralyonSecond, 5, false);
                    break;
                }
                case eEvents::Event_StartAttack:
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AggonarGuid))
                    {
                        l_Creature->Attack(me, true);
                        l_Creature->CombatStart(me, true);
                        me->Attack(l_Creature, true);
                        me->CombatStart(l_Creature, true);
                    }

                    break;
                }
                case eEvents::Event_CastConsecration:
                {
                    DoCastAOE(eSpells::Spell_Consecration);
                    m_Events.ScheduleEvent(eEvents::Event_CastConsecration, 32000);
                    break;
                }
                case eEvents::Event_CombatStartConversation:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_CombatStartConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eEvents::Event_CastHandOfReckoning:
                {
                    DoCastVictim(eSpells::Spell_HandOfReckoning);
                    m_Events.ScheduleEvent(eEvents::Event_CastHandOfReckoning, 6000);
                    break;
                }
                case eEvents::Event_CastAvengingWrath:
                {
                    DoCast(eSpells::Spell_AvengingWrath);
                    m_Events.ScheduleEvent(eEvents::Event_CastAvengingWrath, 21000);
                    break;
                }
                case eEvents::Event_CastBladeOfTheHighExarch:
                {
                    DoCast(eSpells::Spell_BladeOfTheHighExarch);
                    m_Events.ScheduleEvent(eEvents::Event_CastBladeOfTheHighExarch, 23000);
                    break;
                }
                case eEvents::Event_CastCrusaderStrike:
                {
                    DoCastVictim(eSpells::Spell_CrusaderStrike);
                    m_Events.ScheduleEvent(eEvents::Event_CastCrusaderStrike, 16000);
                    break;
                }
                case eEvents::Event_DoNotGiveInConversation:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_GripConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eEvents::Event_SummonAlleria:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Alleria, m_AlleriaSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        m_AlleriaGuid = l_Creature->GetGUID();
                    }

                    break;
                }
                case eEvents::Event_PerfectTimingConversation:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_PerfectTimingConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    if (Creature* l_Aggonar = ObjectAccessor::GetCreature(*me, m_AggonarGuid))
                    {
                        if (Creature* l_Alleria = ObjectAccessor::GetCreature(*me, m_AlleriaGuid))
                        {
                            l_Alleria->Attack(l_Aggonar, false);
                            l_Alleria->CombatStart(l_Aggonar, false);
                            l_Alleria->AI()->DoAction(eActions::Action_StartEvents);
                            me->Attack(l_Aggonar, false);
                            me->CombatStart(l_Aggonar, true);
                            me->GetMotionMaster()->MovePoint(ePoints::Point_MovePoint, m_JumpPos, true);
                            l_Aggonar->Attack(me, true);
                            l_Aggonar->CombatStart(me, true);
                            l_Aggonar->AI()->DoAction(eActions::Action_StartEvents);
                            m_Events.ScheduleEvent(eEvents::Event_CastConsecration, 5000);
                            m_Events.ScheduleEvent(eEvents::Event_CastHandOfReckoning, 8000);
                            m_Events.ScheduleEvent(eEvents::Event_CastAvengingWrath, 9000);
                            m_Events.ScheduleEvent(eEvents::Event_CastCrusaderStrike, 10000);
                            m_Events.ScheduleEvent(eEvents::Event_CastBladeOfTheHighExarch, 11000);
                        }
                    }

                    break;
                }
                case eEvents::Event_SetFacing:
                {
                    me->SetFacingTo(0.9075712f);
                    break;
                }
                case eEvents::Event_PlayVisualKit:
                {
                    me->SendPlaySpellVisualKit(94, 0, 0);
                    l_Player->CastSpell(l_Player, eSpells::Spell_SummonBeacon, true);
                    break;
                }
                case eEvents::Event_SetDefaultFacing:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AboutSonConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->SetFacingTo(1.620655f);
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_high_exarch_turalyon_120738AI(p_Creature);
        }
};

/// Aggonar - 119397
class npc_aggonar_119397 : public CreatureScript
{
    public:
        npc_aggonar_119397() : CreatureScript("npc_aggonar_119397") { }

        struct npc_aggonar_119397AI : public ScriptedAI
        {
            npc_aggonar_119397AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_GlaiveBlastVisual = 240958,
                Spell_GlaiveBlastDamage = 244623,
                Spell_FelEruption = 241555,
                Spell_FelfireWard = 254448,
                Spell_GripOfThePitKing = 241185,
                Spell_SummonFiends = 241364,
            };

            enum eActions
            {
                Action_AggonarKillThisGuys = 1,
                Action_AggonarRemoveImmuns = 2,
                Action_StartEvents = 3
            };

            enum eEvents
            {
                Event_CastGlaiveBlast = 1,
                Event_CastFelEruption = 2,
                Event_CastSummonFiends = 3,
                Event_SummonFiends = 4,
                Event_SetFlags = 5
            };

            enum eConversations
            {
                Conv_NinetyPct = 6132,
                Conv_EightyPct = 4914,
                Conv_SixtyPct = 4915,
                Conv_ThirtyPct = 4950,
                Conv_Weakens = 5395
            };

            enum eNpcs
            {
                Npc_BurningFiend = 120914
            };

            enum eKillcredits
            {
                Killcredit_AggonarSlain = 119397
            };

            std::array<Position const, 5> m_BurningFiendsSpawnPosArray =
            { {
                { 1378.915f, 1856.2f, 543.4001f, 3.025836f },
                { 1376.415f, 1842.818f, 544.3007f, 2.786119f },
                { 1378.984f, 1848.495f, 543.5621f, 2.610751f },
                { 1372.474f, 1858.585f, 544.1775f, 2.754523f },
                { 1371.87f, 1851.321f, 543.4176f, 2.919099f }
            } };

            std::array<Position const, 5> m_BurningFiendsJumpPosArray =
            { {
                { 1348.64f, 1859.72f, 548.201f },
                { 1347.91f, 1853.4f, 547.257f },
                { 1354.94f, 1862.61f, 548.099f },
                { 1351.61f, 1867.09f, 548.239f },
                { 1351.41f, 1855.95f, 547.966f }
            } };

            ObjectGuid m_SummonerGuid;
            Position const m_GlaiveBlastDestPos = { 1342.477f, 1852.403f, 548.2014f };
            EventMap m_Events;
            bool FirstConvComplete = false;
            bool SecondConvComplete = false;
            bool ThirdConvComplete = false;
            bool FourthConvComplete = false;
            bool FourthPctSayComplete = false;
            bool FifthConvComplete = false;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 333);
                m_SummonerGuid = p_Summoner->GetGUID();
                SetCombatMovement(false);
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_AggonarKillThisGuys:
                {
                    me->CastSpell(m_GlaiveBlastDestPos, eSpells::Spell_GlaiveBlastVisual, false);
                    break;
                }
                case eActions::Action_AggonarRemoveImmuns:
                {
                    me->RemoveFlag(UNIT_FIELD_FLAGS, 768);
                    break;
                }
                case eActions::Action_StartEvents:
                {
                    m_Events.ScheduleEvent(eEvents::Event_CastGlaiveBlast, 10000);
                    m_Events.ScheduleEvent(eEvents::Event_CastFelEruption, 14000);
                }
                default:
                    break;
                }
            }

            void EnterCombat(Unit* /*victim*/) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastGlaiveBlast, 10000);
                m_Events.ScheduleEvent(eEvents::Event_CastFelEruption, 14000);
                me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
            }

            void DamageTaken(Unit* /*attacker*/, uint32& /*damage*/, SpellInfo const* /*p_SpellInfo*/) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    if (me->GetHealthPct() <= 90 && !FirstConvComplete)
                    {
                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_NinetyPct, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }

                        FirstConvComplete = true;
                    }
                    if (me->GetHealthPct() <= 80 && !SecondConvComplete)
                    {
                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_EightyPct, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }

                        SecondConvComplete = true;
                    }
                    if (me->GetHealthPct() <= 60 && !ThirdConvComplete)
                    {
                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_SixtyPct, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }

                        ThirdConvComplete = true;
                    }
                    if (me->GetHealthPct() <= 40 && !FourthPctSayComplete)
                    {
                        Talk(0, l_Player->GetGUID());
                        FourthPctSayComplete = true;
                    }
                    if (me->GetHealthPct() <= 30 && !FourthConvComplete)
                    {
                        me->CastStop();
                        DoCast(eSpells::Spell_GripOfThePitKing, true);
                        DoCast(eSpells::Spell_FelfireWard, true);
                        m_Events.Reset();
                        m_Events.ScheduleEvent(eEvents::Event_CastSummonFiends, 8000);
                        FourthConvComplete = true;
                    }
                    if (me->GetHealthPct() <= 20 && !FifthConvComplete)
                    {
                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_Weakens, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }

                        FifthConvComplete = true;
                    }
                }
            }

            void JustDied(Unit* /*killer*/) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_AggonarSlain);
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastGlaiveBlast:
                {
                    DoCastVictim(eSpells::Spell_GlaiveBlastDamage);
                    m_Events.ScheduleEvent(eEvents::Event_CastGlaiveBlast, urand(15000, 20000));
                    break;
                }
                case eEvents::Event_CastFelEruption:
                {
                    DoCast(eSpells::Spell_FelEruption);
                    m_Events.ScheduleEvent(eEvents::Event_CastFelEruption, urand(25000, 35000));
                    break;
                }
                case eEvents::Event_CastSummonFiends:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ThirtyPct, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    DoCast(eSpells::Spell_SummonFiends);
                    m_Events.ScheduleEvent(eEvents::Event_SummonFiends, 5000);
                    break;
                }
                case eEvents::Event_SummonFiends:
                {
                    for (uint8 l_Itr = 0; l_Itr < 5; l_Itr++)
                    {
                        if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_BurningFiend, m_BurningFiendsSpawnPosArray[l_Itr], TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 5000, 0, l_Player->GetGUID()))
                        {
                            l_Creature->GetMotionMaster()->MoveJump(m_BurningFiendsJumpPosArray[l_Itr], 20.0f, 20.0f);
                        }
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SetFlags, 10000);
                    break;
                }
                case eEvents::Event_SetFlags:
                {
                    me->RemoveFlag(UNIT_FIELD_FLAGS, 768);
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_aggonar_119397AI(p_Creature);
        }
};

/// Burning Fiend - 120914
class npc_burning_fiend_120914 : public CreatureScript
{
    public:
        npc_burning_fiend_120914() : CreatureScript("npc_burning_fiend_120914") { }

        struct npc_burning_fiend_120914AI : public ScriptedAI
        {
            npc_burning_fiend_120914AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_FelDissolveIn = 211762,
                Spell_PitSpawn = 241081,
                Spell_BurningFlames = 244975
            };

            enum eEvents
            {
                Event_MovePoint = 1
            };

            enum ePoints
            {
                Pount_PlayerPoint = 1
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->SetWalk(true);
                m_SummonerGuid = p_Summoner->GetGUID();
                DoCast(eSpells::Spell_FelDissolveIn, true);
                DoCast(eSpells::Spell_PitSpawn, true);
                me->DelayedCastSpell(me, eSpells::Spell_BurningFlames, true, 1000);
                m_Events.ScheduleEvent(eEvents::Event_MovePoint, 2000);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_MovePoint:
                {
                    me->GetMotionMaster()->MovePoint(ePoints::Pount_PlayerPoint, l_Player->GetPosition(), true);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_burning_fiend_120914AI(p_Creature);
        }
};

/// Alleria Windrunner - 120913
class npc_alleria_windrunner_120913 : public CreatureScript
{
    public:
        npc_alleria_windrunner_120913() : CreatureScript("npc_alleria_windrunner_120913") { }

        struct npc_alleria_windrunner_120913AI : public ScriptedAI
        {
            npc_alleria_windrunner_120913AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_Spawn = 241342,
                Spell_FreePrisoner = 241438,
                Spell_Ping = 241448,
                Spell_ShadowFlurry = 241014,
                Spell_Shoot = 241006
            };

            enum eEvents
            {
                Event_SetFlags = 1,
                Event_CastShoot = 2
            };

            enum eActions
            {
                Action_AlleriaStartMeetEvent = 6
            };

            enum ePoints
            {
                Point_MeetPoint = 1
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;
            Position const m_AlleriaJumpPos = { 1349.12f, 1861.25f, 548.227f, 3.22907f };
            Position const m_AlleriaMeetPos = { 1345.81f, 1863.61f, 548.239f };

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
                DoCast(eSpells::Spell_Spawn, true);
                me->GetMotionMaster()->MoveJump(m_AlleriaJumpPos, 15.0f, 15.0f);
                m_Events.ScheduleEvent(eEvents::Event_SetFlags, 2000);
            }

            void DoAction(int32 const p_Action) override
            {
                if (p_Action == eActions::Action_AlleriaStartMeetEvent)
                {
                    m_Events.Reset();
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_MeetPoint, m_AlleriaMeetPos, true);
                }
                else
                {
                    m_Events.ScheduleEvent(eEvents::Event_CastShoot, 1000);
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_MeetPoint:
                {
                    me->SetFacingTo(4.762248f);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SetFlags:
                {
                    Talk(0, l_Player->GetGUID());
                    SetCombatMovement(false);
                    me->SetFlag(UNIT_FIELD_FLAGS, 32768);
                    me->SetUInt32Value(UNIT_FIELD_BYTES_2, 2);
                    me->SetFacingToObject(l_Player);
                    DoCast(eSpells::Spell_FreePrisoner, true);
                    DoCast(eSpells::Spell_ShadowFlurry, true);
                    break;
                }
                case eEvents::Event_CastShoot:
                {
                    DoCastVictim(eSpells::Spell_Shoot, true);
                    m_Events.ScheduleEvent(eEvents::Event_CastShoot, 1000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_alleria_windrunner_120913AI(p_Creature);
        }
};

/// High Exarch Turalyon - 122378
class npc_high_exarch_turalyon_122378 : public CreatureScript
{
    public:
        npc_high_exarch_turalyon_122378() : CreatureScript("npc_high_exarch_turalyon_122378") { }

        struct npc_high_exarch_turalyon_122378AI : public ScriptedAI
        {
            npc_high_exarch_turalyon_122378AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eQuests
            {
                Quest_ReturnToTheVindicaar = 46843,
                Quest_GatheringLight = 47431
            };

            enum eObjectives
            {
                Obj_HighExarchTuralyonSlain = 292449
            };

            enum eConversations
            {
                Conv_ConversationWithSon = 5137,
                Conv_QuestGatheringLightAcceptConversation = 5096
            };

            enum eNpcs
            {
                Npc_Alleria = 120844
            };

            enum eEvents
            {
                Event_MoveToConsole = 1,
                Event_PlayVisualKit = 2,
                Event_SetAnimKit = 3
            };

            enum ePoints
            {
                Point_MoveToConsole = 1
            };

            enum eSpells
            {
                Spell_TheChildOfLightAndShadowMovie = 250203
            };

            enum eActions
            {
                Action_TuralyonCalmDown = 1,
                Action_TuralyonMoveToConsole = 2
            };

            Position const m_AlleriaSpawnPos = { 496.7257f, 1472.004f, 766.0836f, 4.914289f };
            Position const m_MoveToConsolePos = { 503.7083f, 1473.224f, 765.918f };
            EventMap m_Events;

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(p_Who) < 40.0f && l_Player->GetQuestStatus(eQuests::Quest_ReturnToTheVindicaar) == QUEST_STATUS_COMPLETE &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_HighExarchTuralyonSlain) == 0)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ConversationWithSon, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    l_Player->SetQuestObjectiveCounter(eObjectives::Obj_HighExarchTuralyonSlain, 1);
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                if (p_Quest->GetQuestId() == eQuests::Quest_GatheringLight)
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TuralyonMoveToConsole);
                    }

                    p_Player->SummonCreature(eNpcs::Npc_Alleria, m_AlleriaSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID());

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestGatheringLightAcceptConversation, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();
                p_Player->CastSpell(p_Player, eSpells::Spell_TheChildOfLightAndShadowMovie, true);
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_TuralyonCalmDown:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    me->SetAIAnimKitId(1977);
                    m_Events.ScheduleEvent(eEvents::Event_SetAnimKit, 10000);
                    break;
                }
                case eActions::Action_TuralyonMoveToConsole:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_MoveToConsole, 26000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_MoveToConsole:
                {
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_MoveToConsole, m_MoveToConsolePos, false);
                    m_Events.ScheduleEvent(eEvents::Event_PlayVisualKit, 3000);
                    break;
                }
                case eEvents::Event_PlayVisualKit:
                {
                    me->SendPlaySpellVisualKit(85596, 0, 0);
                    me->SendPlaySpellVisualKit(85644, 0, 0);
                    me->DespawnOrUnsummon(1000);
                    break;
                }
                case eEvents::Event_SetAnimKit:
                {
                    me->SetAIAnimKitId(0);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_high_exarch_turalyon_122378AI(p_Creature);
        }
};

/// Alleria Windrunner - 120844
class npc_alleria_windrunner_120844 : public CreatureScript
{
    public:
        npc_alleria_windrunner_120844() : CreatureScript("npc_alleria_windrunner_120844") { }

        struct npc_alleria_windrunner_120844AI : public ScriptedAI
        {
            npc_alleria_windrunner_120844AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eEvents
            {
                Event_MoveToConsole = 1,
                Event_PlayVisualKit = 2
            };

            enum ePoints
            {
                Point_MoveToConsole = 1
            };

            Position const m_MoveToConsolePos = { 504.8194f, 1471.377f, 765.918f };
            EventMap m_Events;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                m_Events.ScheduleEvent(eEvents::Event_MoveToConsole, 26000);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_MoveToConsole:
                {
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_MoveToConsole, m_MoveToConsolePos, false);
                    m_Events.ScheduleEvent(eEvents::Event_PlayVisualKit, 7000);
                    break;
                }
                case eEvents::Event_PlayVisualKit:
                {
                    me->SendPlaySpellVisualKit(85596, 0, 0);
                    me->SendPlaySpellVisualKit(85644, 0, 0);
                    me->DespawnOrUnsummon(1000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_alleria_windrunner_120844AI(p_Creature);
        }
};

/// High Exarch Turalyon - 122621
class npc_high_exarch_turalyon_122621 : public CreatureScript
{
    public:
        npc_high_exarch_turalyon_122621() : CreatureScript("npc_high_exarch_turalyon_122621") { }

        struct npc_high_exarch_turalyon_122621AI : public ScriptedAI
        {
            npc_high_exarch_turalyon_122621AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_TuralyonToFareeyaCamp[38] =
            {
                { 1039.81f, 2133.025f, 432.959f },
                { 1040.81f, 2133.525f, 432.709f },
                { 1044.06f, 2139.775f, 432.959f },
                { 1044.81f, 2141.275f, 432.709f },
                { 1055.458f, 2154.923f, 430.9992f },
                { 1057.208f, 2157.423f, 430.4992f },
                { 1058.443f, 2159.008f, 430.0314f },
                { 1060.943f, 2161.758f, 429.5314f },
                { 1065.193f, 2166.008f, 429.0314f },
                { 1071.665f, 2171.953f, 427.9124f },
                { 1075.415f, 2174.953f, 427.1624f },
                { 1076.995f, 2176.47f, 426.8075f },
                { 1079.495f, 2179.22f, 426.3075f },
                { 1082.745f, 2182.97f, 425.8075f },
                { 1086.485f, 2191.296f, 424.3975f },
                { 1087.485f, 2195.046f, 424.1475f },
                { 1088.196f, 2197.895f, 423.3077f },
                { 1088.946f, 2199.645f, 422.8077f },
                { 1089.696f, 2201.395f, 421.8077f },
                { 1089.946f, 2202.145f, 421.0577f },
                { 1090.196f, 2203.145f, 420.3077f },
                { 1090.946f, 2204.895f, 420.0577f },
                { 1091.696f, 2206.895f, 419.3077f },
                { 1092.446f, 2208.645f, 418.8077f },
                { 1093.196f, 2210.645f, 417.5577f },
                { 1093.638f, 2211.629f, 415.8034f },
                { 1093.888f, 2212.379f, 416.3034f },
                { 1093.888f, 2213.379f, 415.5534f },
                { 1093.638f, 2214.379f, 413.8034f },
                { 1093.388f, 2216.379f, 413.0534f },
                { 1093.138f, 2218.379f, 412.3034f },
                { 1092.638f, 2221.379f, 411.3034f },
                { 1092.388f, 2224.129f, 410.0534f },
                { 1092.138f, 2226.129f, 409.5534f },
                { 1091.638f, 2229.129f, 408.8034f },
                { 1090.705f, 2237.96f, 408.7865f },
                { 1084.357f, 2254.982f, 408.7512f },
                { 1084.939f, 2273.773f, 408.4401f }
            };

            G3D::Vector3 const Path_TuralyonToXenedar[28] =
            {
                { 1222.568f, 2382.663f, 368.5095f },
                { 1222.43f, 2385.66f, 367.723f },
                { 1222.292f, 2388.657f, 366.9365f },
                { 1222.161f, 2391.531f, 366.745f },
                { 1221.875f, 2393.75f, 366.0615f },
                { 1221.354f, 2395.833f, 365.9365f },
                { 1220.035f, 2397.262f, 365.0432f },
                { 1219.146f, 2399.053f, 364.3115f },
                { 1217.813f, 2401.739f, 363.6773f },
                { 1218.261f, 2404.713f, 363.4849f },
                { 1218.261f, 2406.713f, 362.7349f },
                { 1218.434f, 2409.18f, 362.0491f },
                { 1218.434f, 2410.93f, 361.7991f },
                { 1218.434f, 2412.43f, 361.2991f },
                { 1219.934f, 2414.93f, 360.7991f },
                { 1222.351f, 2418.82f, 360.3751f },
                { 1222.101f, 2420.82f, 360.1251f },
                { 1225.351f, 2422.82f, 360.1251f },
                { 1226.601f, 2421.82f, 360.1251f },
                { 1229.101f, 2421.32f, 360.6251f },
                { 1230.351f, 2421.07f, 361.3751f },
                { 1231.601f, 2421.57f, 361.6251f },
                { 1232.851f, 2421.32f, 361.6251f },
                { 1235.351f, 2422.07f, 361.8751f },
                { 1236.731f, 2422.482f, 362.55f },
                { 1238.481f, 2422.482f, 362.8f },
                { 1241.481f, 2422.982f, 363.55f },
                { 1244.132f, 2423.205f, 364.6532f }
            };

            G3D::Vector3 const Path_TuralyonToInsideXenedar[94] =
            {
                { 1247.286f, 2420.349f, 367.7335f },
                { 1248.786f, 2419.099f, 368.7335f },
                { 1249.286f, 2418.599f, 369.4835f },
                { 1250.036f, 2417.849f, 369.4835f },
                { 1251.036f, 2416.849f, 370.4835f },
                { 1251.536f, 2415.099f, 370.9835f },
                { 1254.785f, 2414.996f, 373.6385f },
                { 1255.535f, 2414.496f, 374.8885f },
                { 1257.785f, 2413.496f, 377.1385f },
                { 1259.035f, 2412.746f, 378.3885f },
                { 1260.535f, 2411.996f, 379.8885f },
                { 1260.81f, 2411.944f, 380.0264f },
                { 1261.31f, 2411.694f, 380.2764f },
                { 1263.81f, 2412.194f, 382.2764f },
                { 1265.06f, 2413.694f, 383.7764f },
                { 1266.56f, 2415.444f, 384.5264f },
                { 1267.81f, 2416.444f, 384.5264f },
                { 1269.56f, 2417.944f, 384.7764f },
                { 1273.982f, 2422.635f, 385.963f },
                { 1275.482f, 2424.135f, 386.463f },
                { 1280.482f, 2429.385f, 387.963f },
                { 1282.428f, 2430.994f, 388.884f },
                { 1285.678f, 2432.744f, 390.134f },
                { 1286.678f, 2433.244f, 390.634f },
                { 1288.178f, 2433.994f, 391.134f },
                { 1289.678f, 2434.744f, 392.134f },
                { 1290.678f, 2435.244f, 392.384f },
                { 1291.678f, 2435.994f, 393.134f },
                { 1293.678f, 2436.744f, 394.134f },
                { 1294.928f, 2437.494f, 394.884f },
                { 1295.678f, 2437.994f, 395.384f },
                { 1299.987f, 2439.047f, 397.642f },
                { 1301.237f, 2439.297f, 398.142f },
                { 1303.737f, 2440.047f, 399.892f },
                { 1305.487f, 2440.547f, 400.642f },
                { 1306.459f, 2440.63f, 401.2668f },
                { 1310.209f, 2440.13f, 403.0168f },
                { 1312.209f, 2439.63f, 404.2668f },
                { 1313.703f, 2440.055f, 405.2668f },
                { 1315.953f, 2440.555f, 406.7668f },
                { 1318.703f, 2439.805f, 408.0168f },
                { 1321.703f, 2439.055f, 409.7668f },
                { 1323.453f, 2438.555f, 410.5168f },
                { 1327.453f, 2437.555f, 413.2668f },
                { 1329.453f, 2437.055f, 414.5168f },
                { 1330.787f, 2436.569f, 415.5237f },
                { 1332.537f, 2435.819f, 416.5237f },
                { 1333.537f, 2435.569f, 417.0237f },
                { 1335.787f, 2434.819f, 418.5237f },
                { 1337.287f, 2434.069f, 420.0237f },
                { 1339.287f, 2433.319f, 421.0237f },
                { 1341.287f, 2432.569f, 422.0237f },
                { 1344.866f, 2430.216f, 424.1096f },
                { 1345.866f, 2429.216f, 425.1096f },
                { 1346.616f, 2428.216f, 425.3596f },
                { 1348.116f, 2427.216f, 426.3596f },
                { 1349.616f, 2425.466f, 427.6096f },
                { 1351.605f, 2423.329f, 429.3371f },
                { 1352.605f, 2422.329f, 429.8371f },
                { 1353.855f, 2420.829f, 430.8371f },
                { 1354.355f, 2419.829f, 431.0871f },
                { 1354.605f, 2419.079f, 431.5871f },
                { 1355.855f, 2417.579f, 432.5871f },
                { 1358.105f, 2414.329f, 434.0871f },
                { 1358.855f, 2413.329f, 434.8371f },
                { 1359.946f, 2411.625f, 435.8563f },
                { 1361.446f, 2409.125f, 436.3563f },
                { 1362.196f, 2408.125f, 437.1063f },
                { 1362.946f, 2407.125f, 437.1063f },
                { 1362.946f, 2403.125f, 438.1063f },
                { 1363.196f, 2400.125f, 438.6063f },
                { 1363.446f, 2396.625f, 439.3563f },
                { 1363.446f, 2395.375f, 439.3563f },
                { 1363.446f, 2393.875f, 439.3563f },
                { 1363.696f, 2390.875f, 439.3563f },
                { 1363.696f, 2388.625f, 439.3563f },
                { 1363.946f, 2385.875f, 439.6063f },
                { 1363.946f, 2384.625f, 439.6063f },
                { 1363.946f, 2383.375f, 439.6063f },
                { 1364.196f, 2381.625f, 439.6063f },
                { 1364.141f, 2380.133f, 439.3829f },
                { 1359.391f, 2381.133f, 439.6329f },
                { 1357.641f, 2381.383f, 439.6329f },
                { 1354.022f, 2381.633f, 439.7051f },
                { 1350.022f, 2382.383f, 439.4551f },
                { 1346.772f, 2382.883f, 439.2051f },
                { 1346.403f, 2382.814f, 439.1232f },
                { 1343.403f, 2383.314f, 439.3732f },
                { 1340.403f, 2383.064f, 439.3732f },
                { 1338.903f, 2383.314f, 437.8732f },
                { 1338.566f, 2383.657f, 437.7684f },
                { 1336.066f, 2384.157f, 436.7684f },
                { 1333.566f, 2384.407f, 435.2684f },
                { 1327.55f, 2384.816f, 434.4829f }
            };

            G3D::Vector3 const Path_Battlemage[41] =
            {
                { 1271.332f, 2418.883f, 384.8603f },
                { 1269.0f, 2416.08f, 384.4996f },
                { 1266.668f, 2413.277f, 384.139f },
                { 1264.274f, 2412.278f, 382.3302f },
                { 1262.7f, 2411.622f, 381.4958f },
                { 1260.879f, 2412.209f, 379.8122f },
                { 1258.286f, 2412.97f, 377.7244f },
                { 1256.286f, 2413.22f, 375.7244f },
                { 1254.786f, 2413.72f, 374.2244f },
                { 1253.786f, 2414.22f, 373.2244f },
                { 1251.045f, 2415.815f, 370.4581f },
                { 1250.045f, 2415.815f, 369.9581f },
                { 1249.295f, 2416.565f, 369.9581f },
                { 1248.295f, 2417.315f, 368.9581f },
                { 1247.295f, 2417.815f, 368.4581f },
                { 1246.295f, 2418.065f, 367.7081f },
                { 1245.545f, 2418.315f, 366.9581f },
                { 1245.187f, 2418.696f, 366.8292f },
                { 1244.187f, 2418.946f, 365.8292f },
                { 1243.437f, 2419.446f, 365.0792f },
                { 1242.437f, 2419.696f, 364.5792f },
                { 1241.687f, 2419.946f, 364.3292f },
                { 1240.937f, 2420.196f, 364.0792f },
                { 1239.187f, 2420.696f, 363.3292f },
                { 1237.187f, 2421.196f, 362.5792f },
                { 1234.437f, 2422.196f, 361.8292f },
                { 1231.687f, 2423.196f, 361.3292f },
                { 1230.104f, 2423.486f, 360.9671f },
                { 1227.354f, 2423.986f, 360.4671f },
                { 1221.854f, 2424.986f, 359.9671f },
                { 1214.104f, 2418.736f, 360.7171f },
                { 1210.297f, 2414.138f, 361.8878f },
                { 1209.297f, 2412.388f, 362.3878f },
                { 1207.797f, 2410.138f, 362.8878f },
                { 1207.297f, 2409.388f, 363.1378f },
                { 1206.047f, 2406.638f, 363.8878f },
                { 1204.797f, 2404.138f, 364.3878f },
                { 1204.34f, 2403.748f, 364.3592f },
                { 1203.84f, 2402.498f, 364.8592f },
                { 1202.34f, 2400.248f, 365.3592f },
                { 1200.09f, 2396.998f, 366.1092f }
            };

            G3D::Vector3 const Path_Warpriest[24] =
            {
                { 1273.923f, 2419.143f, 385.2276f },
                { 1271.953f, 2417.097f, 384.8132f },
                { 1269.983f, 2415.052f, 384.3988f },
                { 1267.671f, 2412.651f, 384.1726f },
                { 1267.057f, 2412.014f, 384.0408f },
                { 1266.555f, 2411.894f, 383.9964f },
                { 1266.067f, 2411.667f, 383.6828f },
                { 1264.901f, 2411.421f, 382.6488f },
                { 1263.475f, 2411.12f, 382.2152f },
                { 1262.134f, 2410.837f, 380.9844f },
                { 1260.241f, 2411.204f, 379.5348f },
                { 1259.641f, 2411.467f, 379.411f },
                { 1258.391f, 2411.967f, 378.411f },
                { 1256.391f, 2412.717f, 375.911f },
                { 1255.641f, 2412.717f, 375.411f },
                { 1254.641f, 2412.717f, 374.411f },
                { 1254.641f, 2414.967f, 373.661f },
                { 1249.641f, 2413.967f, 369.911f },
                { 1246.098f, 2416.611f, 367.84f },
                { 1245.348f, 2416.861f, 367.09f },
                { 1244.598f, 2417.111f, 366.34f },
                { 1243.598f, 2417.611f, 365.59f },
                { 1242.598f, 2418.111f, 364.84f },
                { 1241.848f, 2418.361f, 364.09f }
            };

            G3D::Vector3 const Path_Dragoon[39] =
            {
                { 1274.472f, 2423.677f, 385.846f },
                { 1271.852f, 2420.547f, 385.1722f },
                { 1269.233f, 2417.417f, 384.4984f },
                { 1268.103f, 2416.066f, 384.2781f },
                { 1267.133f, 2414.906f, 384.1908f },
                { 1266.111f, 2413.686f, 384.1941f },
                { 1264.474f, 2412.901f, 382.7716f },
                { 1263.321f, 2412.349f, 381.9745f },
                { 1261.397f, 2412.685f, 380.2832f },
                { 1259.944f, 2412.939f, 379.0226f },
                { 1256.54f, 2413.792f, 375.6834f },
                { 1254.79f, 2414.292f, 373.9334f },
                { 1254.496f, 2414.615f, 373.9291f },
                { 1254.246f, 2414.615f, 373.4291f },
                { 1251.246f, 2415.615f, 370.6791f },
                { 1250.246f, 2415.615f, 369.9291f },
                { 1249.246f, 2416.615f, 370.1791f },
                { 1248.746f, 2417.615f, 369.1791f },
                { 1248.089f, 2417.982f, 368.7077f },
                { 1246.339f, 2418.982f, 367.4577f },
                { 1244.589f, 2419.732f, 365.9577f },
                { 1242.339f, 2420.482f, 364.4577f },
                { 1238.839f, 2421.732f, 363.2077f },
                { 1237.089f, 2422.482f, 362.4577f },
                { 1234.089f, 2423.232f, 361.7077f },
                { 1231.339f, 2424.232f, 360.9577f },
                { 1230.453f, 2424.353f, 360.8326f },
                { 1227.703f, 2425.103f, 360.3326f },
                { 1221.049f, 2426.271f, 360.0994f },
                { 1209.186f, 2414.706f, 361.7514f },
                { 1207.436f, 2412.206f, 362.5014f },
                { 1206.112f, 2410.295f, 363.2718f },
                { 1205.862f, 2410.045f, 363.2718f },
                { 1204.862f, 2408.545f, 363.7718f },
                { 1202.862f, 2406.295f, 364.5218f },
                { 1200.862f, 2404.045f, 365.0218f },
                { 1200.609f, 2403.66f, 365.1497f },
                { 1199.859f, 2402.66f, 365.1497f },
                { 1197.859f, 2399.41f, 365.8997f }
            };

            enum eEvents
            {
                Event_StartPath = 1,
                Event_Despawn = 2,
                Event_MoveToInsideXenedar = 3,
                Event_StartGuideXera = 4,
                Event_Teleport = 5
            };

            enum eConversations
            {
                Conv_TaraafashThreatens = 5162,
                Conv_MoveIntoXenedar = 5257,
                Conv_TeleportToVindicaar = 5895
            };

            enum ePoints
            {
                Point_TuralyonPathToFareeyaCamp = 1,
                Point_TuralyonToXenedar = 2,
                Point_TuralyonToInsideXenedar = 3,
                Point_IsolatedNpcsMove = 4
            };

            enum eKillcredits
            {
                Killcredit_ReachTheShatteredFields = 121549,
                Killcredit_ReachTheXenedar = 123024,
                Killcredit_TuralyonAndAlleriaArriving = 291228,
                Killcredit_InteriorNPCVisibility = 126657,
                Killcredit_SpeakWithTuralyon = 123261
            };

            enum eObjectives
            {
                Obj_ReachTheShatteredFields = 291301,
                Obj_XeraRescued = 292651
            };

            enum eQuests
            {
                Quest_GatheringLight = 47431,
                Quest_TheLightMother = 47652
            };

            enum eNpcs
            {
                Npc_CaptainFareeya = 121519,
                Npc_Taraafash = 123040,
                Npc_Alleria = 123595,
                Npc_LightforgedBattlemage = 121516,
                Npc_LightforgedWarpriest = 121397,
                Npc_LightforgedDragoon = 121395
            };

            enum eSpells
            {
                Spell_Suicide = 45254,
                Spell_ArmyOfLightArrival = 240434,
                Spell_PlayerTeleport = 248046,
                Spell_HolyChanneling = 148466
            };

            enum eActions
            {
                Action_TuralyonMoveToXenedar = 1,
                Action_TuralyonStartTaraafashEvent = 2,
                Action_TuralyonMoveToInsideXenedar = 3,
                Action_AlleriaMoveToInsideXenedar = 4,
                Action_TuralyonTeleport = 5,
                Action_AlleriaTeleport = 6
            };

            ObjectGuid m_SummonerGuid;
            ObjectGuid m_TaraafashGuid;
            ObjectGuid m_AlleriaGuid;
            Position const m_CaptainFareeyaSpawnPos = { 992.7708f, 2149.457f, 445.8955f, 0.4591769f };
            Position const m_TaraafashSpawnPos = { 1045.891f, 2143.092f, 432.6618f, 3.86076f };
            Position const m_AlleriaSpawnPos = { 1242.583f, 2418.2f, 364.6414f, 2.16363f };
            Position const m_AlleriaOnXenedarSpawnPos = { 1326.061f, 2379.674f, 434.608f, 2.77436f };
            Position const m_BattlemageSpawnPos = { 1268.508f, 2415.488f, 384.4235f, 4.018491f };
            Position const m_WarpriestSpawnPos = { 1271.431f, 2416.555f, 384.7035f, 3.945743f };
            Position const m_DragoonSpawnPos = { 1271.37f, 2419.971f, 385.0482f, 4.015598f };

            EventMap m_Events;

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player || me->isSummon())
                    return;

                if (me->GetExactDist2d(l_Player) < 30.0f && l_Player->GetQuestStatus(eQuests::Quest_GatheringLight) == QUEST_STATUS_INCOMPLETE &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_ReachTheShatteredFields) == 0)
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_ReachTheShatteredFields);

                    if (Creature* l_Creature = l_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 375);
                        l_Creature->AI()->DoAction(eActions::Action_TuralyonStartTaraafashEvent);
                    }

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TaraafashThreatens, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }
            }

            void DoAction(int32 const p_Action) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_Action)
                    {
                    case eActions::Action_TuralyonStartTaraafashEvent:
                    {
                        if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Taraafash, m_TaraafashSpawnPos, TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 120000, 0, l_Player->GetGUID()))
                        {
                            m_TaraafashGuid = l_Creature->GetGUID();
                        }

                        l_Player->SummonCreature(eNpcs::Npc_CaptainFareeya, m_CaptainFareeyaSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID());

                        me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                        me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 375);
                        m_Events.ScheduleEvent(eEvents::Event_StartPath, 8000);
                        break;
                    }
                    case eActions::Action_TuralyonMoveToXenedar:
                    {
                        if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_LightforgedBattlemage, m_BattlemageSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                        {
                            l_Creature->SetReactState(ReactStates::REACT_PASSIVE);
                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_IsolatedNpcsMove, Path_Battlemage, 41, false);
                        }

                        if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_LightforgedWarpriest, m_WarpriestSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                        {
                            l_Creature->SetReactState(ReactStates::REACT_PASSIVE);
                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_IsolatedNpcsMove, Path_Warpriest, 24, false);
                        }

                        if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_LightforgedDragoon, m_DragoonSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                        {
                            l_Creature->SetReactState(ReactStates::REACT_PASSIVE);
                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_IsolatedNpcsMove, Path_Dragoon, 39, false);
                        }

                        Talk(0, l_Player->GetGUID(), 2);
                        me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_TuralyonToXenedar, Path_TuralyonToXenedar, 28, false);
                        break;
                    }
                    case eActions::Action_TuralyonMoveToInsideXenedar:
                    {
                        if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Alleria, m_AlleriaSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                        {
                            m_AlleriaGuid = l_Creature->GetGUID();
                            l_Creature->AI()->DoAction(eActions::Action_AlleriaMoveToInsideXenedar);
                        }

                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_MoveIntoXenedar, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }

                        me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                        m_Events.ScheduleEvent(eEvents::Event_MoveToInsideXenedar, 4000);
                        break;
                    }
                    case eActions::Action_TuralyonTeleport:
                    {
                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TeleportToVindicaar, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }

                        m_Events.ScheduleEvent(eEvents::Event_Teleport, 16000);
                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_TheLightMother:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TuralyonMoveToInsideXenedar);
                    }

                    break;
                }
                }
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_SpeakWithTuralyon);
                p_Player->PlayerTalkClass->SendCloseGossip();

                if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_Alleria, m_AlleriaOnXenedarSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_AlleriaTeleport);
                }

                if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_TuralyonTeleport);
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_PointId)
                    {
                    case ePoints::Point_TuralyonPathToFareeyaCamp:
                    {
                        me->SetFacingTo(4.625123f);
                        me->DespawnOrUnsummon();
                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_ReachTheXenedar);
                        break;
                    }
                    case ePoints::Point_TuralyonToXenedar:
                    {
                        me->SetFacingTo(2.617994f);
                        m_Events.ScheduleEvent(eEvents::Event_Despawn, 2000);
                        break;
                    }
                    case ePoints::Point_TuralyonToInsideXenedar:
                    {
                        me->PlayOneShotAnimKitId(3011);
                        Talk(1, l_Player->GetGUID());
                        m_Events.ScheduleEvent(eEvents::Event_StartGuideXera, 5000);
                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !me->isSummon())
                    return;

                m_Events.Update(p_Diff);

                if (l_Player->GetQuestObjectiveCounter(eObjectives::Obj_XeraRescued) == 1)
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AlleriaGuid))
                    {
                        l_Creature->DespawnOrUnsummon();
                    }

                    me->RemoveAllAuras();
                    me->SetFacingTo(5.103205f);
                    me->DespawnOrUnsummon();
                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_InteriorNPCVisibility);
                }

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartPath:
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_TaraafashGuid))
                    {
                        l_Creature->CastSpell(l_Creature, eSpells::Spell_Suicide, true);
                    }

                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_TuralyonPathToFareeyaCamp, Path_TuralyonToFareeyaCamp, 38, false);
                    break;
                }
                case eEvents::Event_Despawn:
                {
                    me->DespawnOrUnsummon();
                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_TuralyonAndAlleriaArriving);
                    break;
                }
                case eEvents::Event_MoveToInsideXenedar:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_TuralyonToInsideXenedar, Path_TuralyonToInsideXenedar, 94, false);
                    break;
                }
                case eEvents::Event_StartGuideXera:
                {
                    Talk(2, l_Player->GetGUID());
                    DoCast(eSpells::Spell_HolyChanneling, true);
                    break;
                }
                case eEvents::Event_Teleport:
                {
                    l_Player->CastSpell(l_Player, eSpells::Spell_PlayerTeleport, true);
                    DoCast(eSpells::Spell_ArmyOfLightArrival, true);
                    me->SetFlag(UNIT_FIELD_FLAGS, 295680);
                    me->DespawnOrUnsummon(5000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_high_exarch_turalyon_122621AI(p_Creature);
        }
};

/// Alleria Windrunner - 123595
class npc_alleria_windrunner_123595 : public CreatureScript
{
    public:
        npc_alleria_windrunner_123595() : CreatureScript("npc_alleria_windrunner_123595") { }

        struct npc_alleria_windrunner_123595AI : public ScriptedAI
        {
            npc_alleria_windrunner_123595AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_AlleriaToXenedar[29] =
            {
                { 1222.626f, 2376.161f, 371.2715f },
                { 1221.2f, 2378.8f, 369.979f },
                { 1219.773f, 2381.439f, 368.6865f },
                { 1218.75f, 2383.333f, 368.1865f },
                { 1218.75f, 2385.333f, 367.5615f },
                { 1218.75f, 2387.5f, 367.0615f },
                { 1218.047f, 2389.373f, 366.4365f },
                { 1217.188f, 2391.667f, 365.9365f },
                { 1217.319f, 2393.967f, 366.3189f },
                { 1217.21f, 2394.011f, 366.5461f },
                { 1215.46f, 2395.261f, 365.5461f },
                { 1215.028f, 2401.792f, 364.0223f },
                { 1216.028f, 2404.292f, 363.5223f },
                { 1217.028f, 2407.042f, 362.7723f },
                { 1218.099f, 2409.775f, 362.0931f },
                { 1219.849f, 2411.775f, 361.5931f },
                { 1222.599f, 2414.775f, 360.8431f },
                { 1224.616f, 2416.733f, 360.7575f },
                { 1226.366f, 2417.233f, 360.5075f },
                { 1227.116f, 2417.233f, 360.7575f },
                { 1229.116f, 2418.233f, 361.0075f },
                { 1230.116f, 2418.233f, 361.2575f },
                { 1231.366f, 2418.233f, 361.2575f },
                { 1232.366f, 2418.233f, 361.2575f },
                { 1233.575f, 2418.273f, 361.7075f },
                { 1236.325f, 2418.273f, 362.2075f },
                { 1239.325f, 2418.273f, 362.9575f },
                { 1241.325f, 2418.273f, 363.9575f },
                { 1242.583f, 2418.2f, 364.6414f }
            };

            G3D::Vector3 const Path_AlleriaToInsideXenedar[104] =
            {
                { 1244.96f, 2416.283f, 366.4715f },
                { 1245.71f, 2415.783f, 367.2215f },
                { 1246.96f, 2415.533f, 367.9715f },
                { 1248.21f, 2415.533f, 368.7215f },
                { 1249.71f, 2414.783f, 369.9715f },
                { 1250.71f, 2414.283f, 370.4715f },
                { 1251.21f, 2414.283f, 370.9715f },
                { 1251.96f, 2413.783f, 371.7215f },
                { 1252.96f, 2413.533f, 372.7215f },
                { 1254.46f, 2412.783f, 374.2215f },
                { 1254.729f, 2412.606f, 374.4083f },
                { 1255.479f, 2412.106f, 375.6583f },
                { 1256.229f, 2411.856f, 376.4083f },
                { 1257.229f, 2411.856f, 377.9083f },
                { 1257.979f, 2411.356f, 378.4083f },
                { 1258.979f, 2410.606f, 379.1583f },
                { 1260.787f, 2409.126f, 380.9069f },
                { 1262.787f, 2409.376f, 381.9069f },
                { 1263.287f, 2409.376f, 382.4069f },
                { 1264.287f, 2410.126f, 382.9069f },
                { 1265.287f, 2410.876f, 382.9069f },
                { 1265.787f, 2411.376f, 383.4069f },
                { 1266.537f, 2412.376f, 384.1569f },
                { 1267.537f, 2412.876f, 384.4069f },
                { 1270.037f, 2415.126f, 384.6569f },
                { 1277.293f, 2421.422f, 386.4983f },
                { 1278.793f, 2422.922f, 386.7483f },
                { 1281.543f, 2425.922f, 387.4983f },
                { 1284.969f, 2428.136f, 388.9935f },
                { 1286.969f, 2429.386f, 389.9935f },
                { 1288.469f, 2430.136f, 390.7435f },
                { 1290.219f, 2431.136f, 391.4935f },
                { 1291.219f, 2431.636f, 392.2435f },
                { 1293.719f, 2433.136f, 393.7435f },
                { 1294.719f, 2433.636f, 393.9935f },
                { 1295.969f, 2434.386f, 394.9935f },
                { 1296.833f, 2434.783f, 395.3002f },
                { 1300.083f, 2435.783f, 397.0502f },
                { 1301.583f, 2436.033f, 397.8002f },
                { 1304.583f, 2437.033f, 400.0502f },
                { 1305.333f, 2437.283f, 400.3002f },
                { 1305.791f, 2437.346f, 400.3756f },
                { 1306.791f, 2437.596f, 401.1256f },
                { 1308.291f, 2437.596f, 401.8756f },
                { 1310.791f, 2437.346f, 403.1256f },
                { 1312.041f, 2437.346f, 404.1256f },
                { 1313.291f, 2437.096f, 405.1256f },
                { 1314.791f, 2437.096f, 405.6256f },
                { 1316.424f, 2437.115f, 406.8871f },
                { 1318.674f, 2436.615f, 408.1371f },
                { 1319.924f, 2436.115f, 408.6371f },
                { 1321.924f, 2435.615f, 410.1371f },
                { 1326.174f, 2434.865f, 412.8871f },
                { 1327.424f, 2434.615f, 413.8871f },
                { 1330.561f, 2433.792f, 416.0632f },
                { 1332.061f, 2432.792f, 417.3132f },
                { 1333.061f, 2432.292f, 417.8132f },
                { 1334.561f, 2431.542f, 418.8132f },
                { 1336.061f, 2431.042f, 419.8132f },
                { 1337.061f, 2430.542f, 420.5632f },
                { 1338.458f, 2429.681f, 421.6292f },
                { 1340.208f, 2428.681f, 422.6292f },
                { 1341.458f, 2427.931f, 423.3792f },
                { 1342.458f, 2427.431f, 423.8792f },
                { 1342.958f, 2426.681f, 424.3792f },
                { 1346.458f, 2422.681f, 427.3792f },
                { 1347.208f, 2421.931f, 428.3792f },
                { 1348.208f, 2420.931f, 428.8792f },
                { 1349.816f, 2419.059f, 430.2965f },
                { 1351.316f, 2417.559f, 431.2965f },
                { 1352.816f, 2416.059f, 432.2965f },
                { 1353.816f, 2415.059f, 433.2965f },
                { 1355.566f, 2413.559f, 434.0465f },
                { 1356.566f, 2412.559f, 434.5465f },
                { 1357.566f, 2411.559f, 435.2965f },
                { 1359.066f, 2410.059f, 436.0465f },
                { 1359.203f, 2409.797f, 435.8698f },
                { 1360.203f, 2408.797f, 436.3698f },
                { 1360.703f, 2407.047f, 436.8698f },
                { 1361.203f, 2406.047f, 437.3698f },
                { 1361.453f, 2404.547f, 437.6198f },
                { 1361.953f, 2403.047f, 438.1198f },
                { 1362.953f, 2400.297f, 438.6198f },
                { 1364.203f, 2395.797f, 439.3698f },
                { 1364.376f, 2394.994f, 439.534f },
                { 1364.126f, 2393.494f, 439.534f },
                { 1363.876f, 2390.994f, 439.534f },
                { 1363.376f, 2388.494f, 439.534f },
                { 1363.126f, 2385.744f, 439.534f },
                { 1362.876f, 2383.244f, 439.534f },
                { 1362.626f, 2381.994f, 439.534f },
                { 1362.473f, 2381.419f, 439.6829f },
                { 1359.473f, 2381.169f, 439.6829f },
                { 1357.223f, 2380.919f, 439.6829f },
                { 1353.473f, 2380.669f, 439.6829f },
                { 1346.723f, 2380.169f, 439.1829f },
                { 1344.973f, 2379.919f, 439.1829f },
                { 1343.262f, 2379.808f, 439.3231f },
                { 1340.262f, 2379.808f, 439.3231f },
                { 1334.762f, 2379.558f, 436.0731f },
                { 1333.512f, 2379.558f, 435.8231f },
                { 1332.262f, 2379.558f, 435.0731f },
                { 1331.249f, 2379.54f, 435.1983f },
                { 1325.981f, 2379.592f, 434.55f }
            };

            enum eEvents
            {
                Event_MoveToInsideXenedar = 1,
                Event_Teleport = 2
            };

            enum ePoints
            {
                Point_AlleriaMoveToXenedar = 1,
                Point_AlleriaMoveToInsideXenedar = 2
            };

            enum eActions
            {
                Action_AlleriaMoveToXenedar = 2,
                Action_AlleriaMoveToInsideXenedar = 4,
                Action_AlleriaTeleport = 6
            };

            enum eSpells
            {
                Spell_ArmyOfLightArrival = 240434
            };

            EventMap m_Events;

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_AlleriaMoveToXenedar:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_AlleriaMoveToXenedar, Path_AlleriaToXenedar, 29, false);
                    break;
                }
                case eActions::Action_AlleriaMoveToInsideXenedar:
                {
                    m_Events.ScheduleEvent(eEvents::Event_MoveToInsideXenedar, 4300);
                    break;
                }
                case eActions::Action_AlleriaTeleport:
                {
                    m_Events.ScheduleEvent(eEvents::Event_Teleport, 16000);
                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_AlleriaMoveToXenedar:
                {
                    me->SetFacingTo(2.338741f);
                    me->DespawnOrUnsummon(2000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_MoveToInsideXenedar:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_AlleriaMoveToInsideXenedar, Path_AlleriaToInsideXenedar, 104, false);
                    break;
                }
                case eEvents::Event_Teleport:
                {
                    DoCast(eSpells::Spell_ArmyOfLightArrival, true);
                    me->SetFlag(UNIT_FIELD_FLAGS, 295680);
                    me->DespawnOrUnsummon(5000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_alleria_windrunner_123595AI(p_Creature);
        }
};

/// Captain Fareeya - 121519
class npc_captain_fareeya_121519 : public CreatureScript
{
    public:
        npc_captain_fareeya_121519() : CreatureScript("npc_captain_fareeya_121519") { }

        struct npc_captain_fareeya_121519AI : public ScriptedAI
        {
            npc_captain_fareeya_121519AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_Fareeya[27] =
            {
                { 1050.996f, 2155.798f, 431.3171f },
                { 1052.746f, 2158.048f, 431.0671f },
                { 1054.746f, 2160.298f, 430.3171f },
                { 1061.065f, 2167.528f, 428.9303f },
                { 1064.065f, 2171.028f, 428.4303f },
                { 1071.817f, 2182.773f, 427.2634f },
                { 1074.107f, 2186.837f, 427.3597f },
                { 1080.06f, 2200.538f, 424.8374f },
                { 1080.56f, 2201.538f, 424.0874f },
                { 1081.113f, 2202.636f, 422.5719f },
                { 1083.113f, 2206.386f, 421.3219f },
                { 1084.113f, 2210.886f, 420.5719f },
                { 1084.613f, 2212.886f, 419.3219f },
                { 1084.863f, 2213.886f, 418.5719f },
                { 1085.113f, 2214.886f, 417.3219f },
                { 1085.363f, 2215.886f, 415.5719f },
                { 1085.613f, 2216.636f, 413.8219f },
                { 1085.805f, 2217.024f, 413.6653f },
                { 1086.805f, 2222.524f, 413.1653f },
                { 1086.805f, 2224.524f, 412.4153f },
                { 1086.805f, 2225.524f, 411.9153f },
                { 1086.805f, 2226.524f, 410.9153f },
                { 1086.805f, 2227.524f, 410.1653f },
                { 1086.805f, 2228.524f, 409.1653f },
                { 1086.601f, 2242.991f, 408.7043f },
                { 1081.371f, 2256.636f, 408.7512f },
                { 1078.127f, 2268.123f, 408.4401f }
            };

            enum eEvents
            {
                Event_StartPath = 1,
                Event_SetVisible = 2,
                Event_RemoveUnleashTheLight = 3
            };

            enum ePoints
            {
                Point_FareeyaPathEnd = 1
            };

            enum eSpells
            {
                Spell_UnleashTheLight = 251192,
                Spell_SunfireDive = 245199,
                Spell_SunfireDiveDamage = 251219
            };

            EventMap m_Events;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_QUESTGIVER);
                me->SetVisible(false);
                DoCast(eSpells::Spell_UnleashTheLight, true);
                me->DelayedCastSpell(me, eSpells::Spell_SunfireDiveDamage, true, 8500);
                m_Events.ScheduleEvent(eEvents::Event_SetVisible, 7000);
                m_Events.ScheduleEvent(eEvents::Event_RemoveUnleashTheLight, 8000);
                m_Events.ScheduleEvent(eEvents::Event_StartPath, 11000);
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_FareeyaPathEnd:
                {
                    me->SetFacingTo(4.904375f);
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SetVisible:
                {
                    me->SetVisible(true);
                    DoCast(eSpells::Spell_SunfireDive, true);
                    break;
                }
                case eEvents::Event_RemoveUnleashTheLight:
                {
                    me->RemoveAllAuras();
                    break;
                }
                case eEvents::Event_StartPath:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_FareeyaPathEnd, Path_Fareeya, 27, false);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_captain_fareeya_121519AI(p_Creature);
        }
};

/// Secure Light\'s Judgment Event - 290515
class npc_secure_lights_judgment_event : public CreatureScript
{
    public:
        npc_secure_lights_judgment_event() : CreatureScript("npc_secure_lights_judgment_event") { }

        struct npc_secure_lights_judgment_eventAI : public ScriptedAI
        {
            npc_secure_lights_judgment_eventAI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            std::array<Position const, 3> m_FirstWavePos =
            { {
                { 1221.953f, 2598.059f, 423.7803f },
                { 1220.28f, 2591.611f, 424.1687f },
                { 1225.068f, 2604.679f, 424.0594f }
            } };

            std::array<Position const, 3> m_MainWaveWavePos =
            { {
                { 1192.091f, 2633.062f, 423.6585f },
                { 1194.117f, 2627.703f, 423.2766f },
                { 1196.621f, 2629.355f, 423.475f }
            } };

            enum eEvents
            {
                Event_StartEvent = 1
            };

            enum ePoints
            {
                Point_MinionMove = 1
            };

            enum eNpcs
            {
                Npc_FelforgeSalvagerFirstWave = 127942,
                Npc_FelforgeSalvagerMainWave = 123241,
                Npc_QuartermasterAikras = 123247
            };

            Position const m_QuartermasterAikrasMovePos = { 1208.89f, 2608.0f, 423.4824f };
            EventMap m_Events;
            uint8 MinionDies = 0;
            bool FirstWaveComplete = false;
            bool MainWaveComplete = false;

            void InitializeAI() override
            {
                for (uint8 l_Itr = 0; l_Itr < 3; l_Itr++)
                {
                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_FelforgeSalvagerFirstWave, me->GetPosition(), TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000))
                    {
                        l_Creature->SetInPhase(8832, true, true);
                        l_Creature->SetWalk(false);
                        l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_MinionMove, m_FirstWavePos[l_Itr], true);
                        l_Creature->SetHomePosition(m_FirstWavePos[l_Itr]);
                    }
                }
            }

            void SummonedCreatureDies(Creature* /*p_Summon*/, Unit* /*p_Killer*/) override
            {
                MinionDies++;

                if (!FirstWaveComplete && MinionDies == 3)
                {
                    for (uint8 l_Itr = 0; l_Itr < 3; l_Itr++)
                    {
                        if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_FelforgeSalvagerFirstWave, me->GetPosition(), TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000))
                        {
                            l_Creature->SetInPhase(8832, true, true);
                            l_Creature->SetWalk(false);
                            l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_MinionMove, m_MainWaveWavePos[l_Itr], true);
                            l_Creature->SetHomePosition(m_MainWaveWavePos[l_Itr]);
                        }
                    }

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_QuartermasterAikras, me->GetPosition(), TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000))
                    {
                        l_Creature->SetInPhase(8832, true, true);
                        l_Creature->SetWalk(false);
                        l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_MinionMove, m_QuartermasterAikrasMovePos, true);
                        l_Creature->SetHomePosition(m_QuartermasterAikrasMovePos);
                    }

                    FirstWaveComplete = true;
                    MinionDies = 0;
                }

                else if (!MainWaveComplete && MinionDies == 4)
                {
                    MainWaveComplete = true;
                    MinionDies = 0;
                    m_Events.ScheduleEvent(eEvents::Event_StartEvent, 30000);
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartEvent:
                {
                    for (uint8 l_Itr = 0; l_Itr < 3; l_Itr++)
                    {
                        if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_FelforgeSalvagerFirstWave, me->GetPosition(), TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000))
                        {
                            l_Creature->SetInPhase(8832, true, true);
                            l_Creature->SetWalk(false);
                            l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_MinionMove, m_FirstWavePos[l_Itr], true);
                            l_Creature->SetHomePosition(m_FirstWavePos[l_Itr]);
                        }
                    }

                    FirstWaveComplete = false;
                    MainWaveComplete = false;
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_secure_lights_judgment_eventAI(p_Creature);
        }
};

/// Lightforged Battery - 122789
class npc_lightforged_battery_122789 : public CreatureScript
{
    public:
        npc_lightforged_battery_122789() : CreatureScript("npc_lightforged_battery_122789") { }

        struct npc_lightforged_battery_122789AI : public VehicleAI
        {
            npc_lightforged_battery_122789AI(Creature* p_Creature) : VehicleAI(p_Creature) { }

            enum eQuests
            {
                Quest_FireAtWill = 47508
            };

            enum eSpells
            {
                Spell_FelBondsScene = 246160
            };

            enum eNpcs
            {
                Npc_LightforgedBattery = 122794
            };

            ObjectGuid m_SummonerGuid;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                if (Creature* l_Creature = p_Summoner->FindNearestCreature(eNpcs::Npc_LightforgedBattery, 10.0f))
                {
                    if (p_Summoner->ToPlayer())
                    {
                        l_Creature->DestroyForPlayer(p_Summoner->ToPlayer());
                    }
                }

                m_SummonerGuid = p_Summoner->GetGUID();
                me->AddPlayerInPersonnalVisibilityList(p_Summoner->GetGUID());
                p_Summoner->CastSpell(me, VehicleSpells::VEHICLE_SPELL_RIDE_HARDCODED, true);
            }

            void PassengerBoarded(Unit* who, int8 /*seatId*/, bool apply) override
            {
                if (apply)
                {
                    who->RemoveAura(eSpells::Spell_FelBondsScene);
                    who->SetInPhase(9634, true, true);
                    me->SetPhaseMask(0, true);
                    me->SetInPhase(9634, true, true);
                }
                else
                {
                    me->DespawnOrUnsummon(1000);
                }
            }

            void UpdateAI(uint32 const /*p_Diff*/) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                if (l_Player->GetQuestStatus(eQuests::Quest_FireAtWill) == QUEST_STATUS_COMPLETE)
                {
                    l_Player->ExitVehicle();
                    l_Player->SetInPhase(9634, true, false);
                }
            }

        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_lightforged_battery_122789AI(p_Creature);
        }
};

/// Prophet Velen - 126950
class npc_prophet_velen_126950 : public CreatureScript
{
    public:
        npc_prophet_velen_126950() : CreatureScript("npc_prophet_velen_126950") { }

        struct npc_prophet_velen_126950AI : public ScriptedAI
        {
            npc_prophet_velen_126950AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eQuests
            {
                Quest_TheBurningHeart = 48199
            };

            enum eObjectives
            {
                Obj_UseTheNavigationConsole = 292675
            };

            enum eKillcredits
            {
                Killcredit_UseTheNavigationConsole = 126949
            };

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) < 10.0f && l_Player->GetQuestStatus(eQuests::Quest_TheBurningHeart) == QUEST_STATUS_INCOMPLETE)
                {
                    Talk(0, l_Player->GetGUID());
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_UseTheNavigationConsole);
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_prophet_velen_126950AI(p_Creature);
        }
};

/// High Exarch Turalyon - 126954
class npc_high_exarch_turalyon_126954 : public CreatureScript
{
    public:
        npc_high_exarch_turalyon_126954() : CreatureScript("npc_high_exarch_turalyon_126954") { }

        struct npc_high_exarch_turalyon_126954AI : public ScriptedAI
        {
            npc_high_exarch_turalyon_126954AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eQuests
            {
                Quest_TheBurningThrone = 49014,
                Quest_ReinforceLightsPurchase = 48201,
                Quest_SizingUpTheOppositionAlleria = 47473,
                Quest_SizingUpTheOppositionIllidan = 48929,
                Quest_TheSpeakerCalls = 47889,
                Quest_ReinforceTheVeiledDen = 48202
            };

            enum eConversations
            {
                Conv_QuestTheBurningThroneReward = 6087,
                Conv_QuestTheSpeakerCallsAccept = 5386,
                Conv_KhadgarConversation = 5503
            };

            enum eActions
            {
                Action_TuralyonTeleported = 1
            };

            enum ePoints
            {
                Point_TuralyonMove = 1,
                Point_KhadgarToConsole = 2,
                Point_KhadgarFromConsole = 3
            };

            enum eEvents
            {
                Event_Move = 1
            };

            enum eKillcredits
            {
                Killcredit_TuralyonTeleported = 292683
            };

            enum eSpells
            {
                Spell_ArmyOfLightArrival = 240434,
                Spell_CompleteGossipQuest = 254549
            };

            enum eNpcs
            {
                Npc_Khadgar = 128245
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;
            Position const m_TuralyonMovePos = { -2928.563f, 8800.604f, -232.0189f };
            Position const m_KhadgarSpawnPos = { -2605.573f, 8673.125f, -79.97096f, 2.64309f };

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_TuralyonTeleported:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    DoCast(eSpells::Spell_ArmyOfLightArrival, true);
                    m_Events.ScheduleEvent(eEvents::Event_Move, 4000);
                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_PointId)
                    {
                    case ePoints::Point_TuralyonMove:
                    {
                        me->SetFacingTo(6.126106f);
                        me->DespawnOrUnsummon();
                        l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_TuralyonTeleported);
                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_ReinforceLightsPurchase:
                {
                    Talk(0, p_Player->GetGUID());
                    break;
                }
                case eQuests::Quest_TheSpeakerCalls:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestTheSpeakerCallsAccept, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eQuests::Quest_ReinforceTheVeiledDen:
                {
                    Talk(2, p_Player->GetGUID());
                    break;
                }
                default:
                    break;
                }
            }

            void sQuestReward(Player* p_Player, Quest const* p_Quest, uint32 /*p_Option*/) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_TheBurningThrone:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestTheBurningThroneReward, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eQuests::Quest_SizingUpTheOppositionAlleria:
                case eQuests::Quest_SizingUpTheOppositionIllidan:
                {
                    Talk(1, p_Player->GetGUID());
                    break;
                }
                default:
                    break;
                }
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();
                p_Player->CastSpell(p_Player, eSpells::Spell_CompleteGossipQuest, true);

                if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_Khadgar, m_KhadgarSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                {
                    l_Creature->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);

                    l_Creature->AddDelayedEvent([l_Creature]() -> void
                    {
                        G3D::Vector3 const Path_KhadgarToConsole[13] =
                        {
                            { -2603.666f, 8672.087f, -81.07687f },
                            { -2605.49f, 8673.08f, -80.0188f },
                            { -2607.314f, 8674.073f, -78.96073f },
                            { -2610.738f, 8675.206f, -79.29803f },
                            { -2613.706f, 8675.805f, -79.24473f },
                            { -2616.541f, 8676.55f, -79.04544f },
                            { -2619.761f, 8677.379f, -78.82922f },
                            { -2623.75f, 8678.297f, -78.88235f },
                            { -2629.984f, 8682.893f, -78.24072f },
                            { -2632.681f, 8690.806f, -72.68117f },
                            { -2634.312f, 8692.484f, -71.57269f },
                            { -2636.312f, 8693.234f, -70.32269f },
                            { -2638.646f, 8694.909f, -70.57446f }
                        };

                        l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_KhadgarToConsole, Path_KhadgarToConsole, 13, true);
                    }, 2000);

                    l_Creature->AddDelayedEvent([l_Creature]() -> void
                    {
                        l_Creature->SetFacingTo(1.448623f);
                    }, 20000);

                    l_Creature->AddDelayedEvent([l_Creature]() -> void
                    {
                        G3D::Vector3 const Path_KhadgarFromConsole[10] =
                        {
                            { -2637.325f, 8693.344f, -70.27296f },
                            { -2633.189f, 8687.854f, -74.7868f },
                            { -2630.581f, 8683.296f, -78.28436f },
                            { -2629.889f, 8682.311f, -78.27332f },
                            { -2627.303f, 8679.471f, -78.57571f },
                            { -2620.037f, 8677.195f, -78.91668f },
                            { -2616.886f, 8676.616f, -79.10054f },
                            { -2610.653f, 8675.566f, -79.19274f },
                            { -2609.905f, 8675.221f, -79.07059f },
                            { -2607.804f, 8674.496f, -78.774f }
                        };

                        l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_KhadgarFromConsole, Path_KhadgarFromConsole, 10, true);
                        l_Creature->DespawnOrUnsummon(15000);
                    }, 60000);
                }

                p_Player->AddDelayedEvent([p_Player]() -> void
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_KhadgarConversation, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }, 3000);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_Move:
                {
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_TuralyonMove, m_TuralyonMovePos, true);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_high_exarch_turalyon_126954AI(p_Creature);
        }
};

/// Magni Bronzebeard - 124595
class npc_magni_bronzebeard_124595 : public CreatureScript
{
    public:
        npc_magni_bronzebeard_124595() : CreatureScript("npc_magni_bronzebeard_124595") { }

        struct npc_magni_bronzebeard_124595AI : public ScriptedAI
        {
            npc_magni_bronzebeard_124595AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_Magni[12] =
            {
                { 993.2578f, 1663.049f, 525.585f },
                { 997.2578f, 1662.549f, 525.585f },
                { 1000.758f, 1661.799f, 525.585f },
                { 1004.508f, 1661.049f, 525.335f },
                { 1008.008f, 1660.299f, 525.335f },
                { 1010.758f, 1659.549f, 525.335f },
                { 1013.508f, 1658.799f, 525.335f },
                { 1016.508f, 1658.299f, 525.335f },
                { 1019.508f, 1658.049f, 525.335f },
                { 1022.258f, 1657.549f, 525.335f },
                { 1025.258f, 1657.049f, 525.585f },
                { 1027.649f, 1656.486f, 525.283f }
            };

            enum eQuests
            {
                Quest_TheSpeakerCalls = 47889,
                Quest_VisionsOfTorment = 47890,
                Quest_TheSpeakerListens = 48273,
                Quest_TheSpeakerSeeks = 48277,
                Quest_VisionsOfFear = 48272,
                Quest_VisionsOfAnother = 48280
            };

            enum eConversations
            {
                Conv_MagniLosConversation = 5387,
                Conv_MagniSummoned = 5388,
                Conv_PlaceHand = 5644,
                Conv_MagniLosListensConversation = 5610,
                Conv_MagniLosSeekConversation = 5627
            };

            enum eActions
            {
                Action_MagniStartPath = 1
            };

            enum ePoints
            {
                Point_magniPathEnd = 1
            };

            enum eEvents
            {
                Event_StartPath = 1
            };

            enum eKillcredits
            {
                Killcredit_JoinMagniByTheSacredStone = 124600,
                Killcredit_MeetMagniInKrokulHovel = 124597
            };

            enum eObjectives
            {
                Obj_LosConversationheard = 291092,
                Obj_MeetMagniInKrokulHovel = 291813,
                Obj_MeetMagniInKrokulHovelSeekQuest = 291814
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) < 20.0f && l_Player->HasQuest(eQuests::Quest_TheSpeakerCalls) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_LosConversationheard) == 0)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_MagniLosConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    l_Player->SetQuestObjectiveCounter(eObjectives::Obj_LosConversationheard, 1);
                }

                if (me->GetExactDist2d(l_Player) < 20.0f && l_Player->HasQuest(eQuests::Quest_TheSpeakerListens) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_MeetMagniInKrokulHovel) == 0)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_MagniLosListensConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_MeetMagniInKrokulHovel);
                }

                if (me->GetExactDist2d(l_Player) < 20.0f && l_Player->HasQuest(eQuests::Quest_TheSpeakerSeeks) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_MeetMagniInKrokulHovelSeekQuest) == 0)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_MagniLosSeekConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_MeetMagniInKrokulHovel);
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_MagniStartPath:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_StartPath, 2000);
                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_PointId)
                    {
                    case ePoints::Point_magniPathEnd:
                    {
                        me->SetFacingTo(3.01942f);
                        me->DespawnOrUnsummon();
                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_JoinMagniByTheSacredStone);

                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_PlaceHand, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }

                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_VisionsOfTorment:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_MagniStartPath);
                    }

                    break;
                }
                case eQuests::Quest_VisionsOfFear:
                case eQuests::Quest_VisionsOfAnother:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_PlaceHand, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartPath:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_MagniSummoned, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_magniPathEnd, Path_Magni, 12, true);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_magni_bronzebeard_124595AI(p_Creature);
        }
};

/// High Exarch Turalyon - 120763
class npc_high_exarch_turalyon_120763 : public CreatureScript
{
    public:
        npc_high_exarch_turalyon_120763() : CreatureScript("npc_high_exarch_turalyon_120763") { }

        struct npc_high_exarch_turalyon_120763AI : public ScriptedAI
        {
            npc_high_exarch_turalyon_120763AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_Turalyon[29] =
            {
                { 1447.894f, 1448.316f, 491.5054f },
                { 1451.144f, 1449.316f, 491.2554f },
                { 1453.894f, 1450.316f, 490.5054f },
                { 1456.644f, 1451.566f, 489.5054f },
                { 1459.894f, 1452.816f, 488.5054f },
                { 1462.394f, 1453.816f, 487.5054f },
                { 1465.144f, 1454.816f, 486.7554f },
                { 1467.144f, 1456.066f, 486.2554f },
                { 1469.144f, 1457.566f, 486.0054f },
                { 1470.644f, 1459.566f, 485.7554f },
                { 1471.644f, 1461.816f, 485.7554f },
                { 1472.644f, 1464.816f, 485.7554f },
                { 1473.394f, 1467.816f, 486.0054f },
                { 1474.144f, 1470.566f, 486.0054f },
                { 1474.894f, 1473.816f, 486.0054f },
                { 1475.644f, 1476.816f, 486.0054f },
                { 1476.394f, 1480.066f, 485.7554f },
                { 1477.144f, 1483.316f, 486.0054f },
                { 1477.894f, 1486.566f, 486.0054f },
                { 1478.394f, 1489.316f, 486.2554f },
                { 1478.894f, 1491.816f, 486.2554f },
                { 1479.394f, 1495.316f, 487.0054f },
                { 1479.894f, 1498.066f, 487.2554f },
                { 1480.394f, 1501.066f, 487.5054f },
                { 1481.144f, 1503.816f, 487.7554f },
                { 1481.644f, 1506.066f, 487.7554f },
                { 1482.394f, 1508.566f, 487.7554f },
                { 1483.144f, 1511.066f, 487.7554f },
                { 1483.717f, 1513.273f, 487.2658f }
            };

            enum eEvents
            {
                Event_StartPath = 1
            };

            enum eConversations
            {
                Conv_StormingTheCitadelQuestReward = 5505,
                Conv_QuestDawnOfJustice = 5631
            };

            enum ePoints
            {
                Point_TuralyonPathEnd = 1,
            };

            enum eObjectives
            {
                Obj_LordNathraxasSlain = 291338
            };

            enum eKillcredits
            {
                Killcredit_JoinTuralyonAtDestinyPoint = 124966,
                Killcredit_RejoinYourForces = 125182
            };

            enum eActions
            {
                Actiom_TuralyonSummonedDestinyPoint = 5
            };

            enum eSpells
            {
                Spell_LightforgedBeaconArrival = 245570,
                Spell_TheArrivalScene = 248544
            };

            enum eQuests
            {
                Quest_StormingTheCitadel = 47892,
                Quest_DawnOfJustice = 47992,
                Quest_LordOfTheSpire = 47993
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) < 45.0f && l_Player->HasQuest(eQuests::Quest_LordOfTheSpire) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_LordNathraxasSlain) == 1)
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_RejoinYourForces);
                    l_Player->CastSpell(l_Player, eSpells::Spell_TheArrivalScene, true);
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_PointId)
                    {
                    case ePoints::Point_TuralyonPathEnd:
                    {
                        l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_JoinTuralyonAtDestinyPoint);
                        me->SetFacingTo(1.740311f);
                        me->DespawnOrUnsummon();
                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void DoAction(int32 const p_Action) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_Action)
                    {
                    case eActions::Actiom_TuralyonSummonedDestinyPoint:
                    {
                        me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);
                        m_Events.ScheduleEvent(eEvents::Event_StartPath, 4000);
                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_DawnOfJustice:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestDawnOfJustice, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void sQuestReward(Player* p_Player, Quest const* p_Quest, uint32 /*p_Option*/) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_StormingTheCitadel:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_StormingTheCitadelQuestReward, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !me->isSummon())
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartPath:
                {
                    Talk(0, l_Player->GetGUID());
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_TuralyonPathEnd, Path_Turalyon, 29, false);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_high_exarch_turalyon_120763AI(p_Creature);
        }
};

/// Illidan Stormrage - 124972
class npc_illidan_stormrage_124972 : public CreatureScript
{
    public:
        npc_illidan_stormrage_124972() : CreatureScript("npc_illidan_stormrage_124972") { }

        struct npc_illidan_stormrage_124972AI : public ScriptedAI
        {
            npc_illidan_stormrage_124972AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eQuests
            {
                Quest_PreventiveMeasures = 47987,
                Quest_ChaosTheory = 47988,
                Quest_DarkMachination = 47991
            };

            enum eConversations
            {
                Conv_IllidanLos = 5506,
                Conv_QuestChaosTheoryAccept = 5507,
                Conv_ReturnConversation = 5508,
                Conv_QuestDarkMachinationsAccept = 5517
            };

            enum eObjectives
            {
                Obj_LosConversationHeard = 291339,
                Obj_ReturnConversationHeard = 291393
            };

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) < 10.0f && l_Player->HasQuest(eQuests::Quest_PreventiveMeasures) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_LosConversationHeard) == 0)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_IllidanLos, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    l_Player->SetQuestObjectiveCounter(eObjectives::Obj_LosConversationHeard, 1);
                }

                if (me->GetExactDist2d(l_Player) < 25.0f && l_Player->GetQuestStatus(eQuests::Quest_ChaosTheory) == QUEST_STATUS_COMPLETE &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_ReturnConversationHeard) == 0)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ReturnConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    l_Player->SetQuestObjectiveCounter(eObjectives::Obj_ReturnConversationHeard, 1);
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_ChaosTheory:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestChaosTheoryAccept, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eQuests::Quest_DarkMachination:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestDarkMachinationsAccept, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_illidan_stormrage_124972AI(p_Creature);
        }
};

/// Fallen Warriors - 125051, 125048, 125049, 125052, 125026
class npc_fallen_warriors : public CreatureScript
{
    public:
        npc_fallen_warriors() : CreatureScript("npc_fallen_warriors") { }

        struct npc_fallen_warriorsAI : public ScriptedAI
        {
            npc_fallen_warriorsAI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_TalismanOfTheProphet = 248345
            };

            enum eKillcredits
            {
                Killcredit_WarriorsSanctified = 125029
            };

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = p_Caster->ToPlayer())
                {
                    if (p_Spell->Id == eSpells::Spell_TalismanOfTheProphet)
                    {
                        me->AddToHideList(l_Player->GetGUID(), 360000);
                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_WarriorsSanctified);
                    }
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_fallen_warriorsAI(p_Creature);
        }
};

/// Lightforged Warframe - 124987
class npc_lightforged_warframe_124987 : public CreatureScript
{
    public:
        npc_lightforged_warframe_124987() : CreatureScript("npc_lightforged_warframe_124987") { }

        struct npc_lightforged_warframe_124987AI : public ScriptedAI
        {
            npc_lightforged_warframe_124987AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eEvents
            {
                Event_PlayEmote = 1
            };

            enum eQuests
            {
                Quest_DawnOfJustice = 47992
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
                m_Events.ScheduleEvent(eEvents::Event_PlayEmote, 2000);
            }

            void OnSpellClick(Unit* p_Clicker) override
            {
                me->DestroyForPlayer(p_Clicker->ToPlayer());
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                if (l_Player->GetQuestStatus(eQuests::Quest_DawnOfJustice) != QUEST_STATUS_NONE)
                {
                    me->DespawnOrUnsummon();
                }

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_PlayEmote:
                {
                    me->HandleEmoteCommand(377);
                    me->DespawnOrUnsummon(360000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_lightforged_warframe_124987AI(p_Creature);
        }
};

/// Lightforged Warframe - 124988
class npc_lightforged_warframe_124988 : public CreatureScript
{
    public:
        npc_lightforged_warframe_124988() : CreatureScript("npc_lightforged_warframe_124988") { }

        struct npc_lightforged_warframe_124988AI : public VehicleAI
        {
            npc_lightforged_warframe_124988AI(Creature* p_Creature) : VehicleAI(p_Creature) { }

            G3D::Vector3 const Path_Warframe[25] =
            {
                { 1479.828f, 1515.7f, 490.406f },
                { 1495.813f, 1511.207f, 495.6605f },
                { 1516.568f, 1512.387f, 495.6605f },
                { 1539.012f, 1516.521f, 490.8107f },
                { 1564.632f, 1522.146f, 486.0249f },
                { 1595.09f, 1532.632f, 478.9503f },
                { 1620.481f, 1540.842f, 470.9196f },
                { 1644.826f, 1547.969f, 460.7752f },
                { 1673.316f, 1555.028f, 447.8467f },
                { 1711.382f, 1562.675f, 433.373f },
                { 1745.08f, 1566.976f, 427.3842f },
                { 1777.297f, 1571.58f, 420.7684f },
                { 1803.267f, 1576.592f, 415.994f },
                { 1825.623f, 1581.754f, 411.5081f },
                { 1848.67f, 1589.389f, 404.9189f },
                { 1873.755f, 1600.8f, 397.0578f },
                { 1902.788f, 1617.097f, 388.7144f },
                { 1934.557f, 1641.694f, 378.925f },
                { 1958.356f, 1661.953f, 370.9315f },
                { 1986.233f, 1686.622f, 360.3627f },
                { 2008.83f, 1706.691f, 352.8728f },
                { 2033.872f, 1728.828f, 345.2685f },
                { 2058.882f, 1751.259f, 341.372f },
                { 2074.783f, 1765.373f, 334.8648f },
                { 2095.595f, 1785.67f, 334.3588f }
            };

            enum eEvents
            {
                Event_SummonerEnterVehicle = 1,
                Event_Destroy = 2
            };

            enum ePoints
            {
                Point_PathEnd = 1
            };

            enum eSpells
            {
                Spell_FelSludgeImmunity = 250924,
                Spell_Defile = 249971,
                Spell_FelLord = 209600,
                Spell_Eject = 251541
            };

            enum eConversations
            {
                Conv_WarframeSummoned = 5633,
                Conv_PathEnd = 5635,
                Conv_EnterIntoSpire = 5638
            };

            enum eKillcredits
            {
                TakeControlOfTheLightforgedWarframe = 124987
            };

            enum eQuests
            {
                Quest_DawnOfJustice = 47992,
                Quest_LordOfTheSpire = 47993,
                Quest_HoldingTheSpire = 48592
            };

            Position const m_NathraxasSpireConvPos = { 2239.346191f, 1916.643433f, 338.451416f };
            ObjectGuid m_SummonerGuid;
            EventMap m_Events;
            bool m_PathComplete = false;
            bool m_BoardedByDefile = false;
            bool m_ConversationComplete = false;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                if (Player* l_Player = p_Summoner->ToPlayer())
                {
                    if (l_Player->HasQuest(eQuests::Quest_DawnOfJustice))
                    {
                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_WarframeSummoned, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }
                    }

                    l_Player->KilledMonsterCredit(eKillcredits::TakeControlOfTheLightforgedWarframe);
                    m_SummonerGuid = l_Player->GetGUID();
                    l_Player->EnterVehicle(me, 3, false);
                    m_Events.ScheduleEvent(eEvents::Event_SummonerEnterVehicle, 2000);
                }
            }

            void JustDied(Unit* /*killer*/) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    l_Player->CastSpell(l_Player, eSpells::Spell_Eject, true);
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_PointId)
                    {
                    case ePoints::Point_PathEnd:
                    {
                        if (l_Player->HasQuest(eQuests::Quest_DawnOfJustice))
                        {
                            if (Conversation* l_Conversation = new Conversation)
                            {
                                if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_PathEnd, l_Player, nullptr, l_Player->GetPosition()))
                                    delete l_Conversation;
                            }
                        }

                        me->SetPhaseMask(0, true);
                        l_Player->ChangeSeat(0, false);
                        me->SetUInt32Value(UNIT_FIELD_BYTES_1, 0);
                        me->SetFlag(UNIT_FIELD_FLAGS, 17317896);
                        me->RemoveFlag(UNIT_FIELD_FLAGS, 512);
                        DoCast(eSpells::Spell_FelSludgeImmunity, true);
                        m_PathComplete = true;
                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    if (p_Spell->Id == eSpells::Spell_Defile)
                    {
                        m_BoardedByDefile = true;
                        me->SetRooted(true);
                        me->SetAIAnimKitId(7696);
                        me->SetFlag(UNIT_FIELD_FLAGS, 17582088);
                        m_Events.ScheduleEvent(eEvents::Event_Destroy, 2000);
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !l_Player->IsInWorld())
                {
                    me->DespawnOrUnsummon();
                    return;
                }

                if (!l_Player->HasQuest(eQuests::Quest_DawnOfJustice) && !l_Player->HasQuest(eQuests::Quest_LordOfTheSpire) &&
                    !l_Player->HasQuest(eQuests::Quest_HoldingTheSpire))
                {
                    me->DespawnOrUnsummon();
                    l_Player->CastSpell(l_Player, eSpells::Spell_Eject, true);
                }

                if (Vehicle* l_Vehicle = me->GetVehicleKit())
                {
                    if (!l_Vehicle->GetPassenger(0) && m_PathComplete && !m_BoardedByDefile)
                    {
                        me->DespawnOrUnsummon();
                    }
                }

                for (auto l_Itr : l_Player->GetPhaseMgr().GetActivesPhases())
                {
                    me->SetInPhase(l_Itr, true, true);
                }

                if (me->GetAreaId() == 9050 && !m_ConversationComplete && me->GetExactDist2d(&m_NathraxasSpireConvPos) <= 5.0f &&
                    l_Player->HasQuest(eQuests::Quest_LordOfTheSpire))
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_EnterIntoSpire, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_ConversationComplete = true;
                }

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SummonerEnterVehicle:
                {
                    me->SetUInt32Value(UNIT_FIELD_BYTES_1, 50331648);
                    me->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_PathEnd, Path_Warframe, 25);
                    break;
                }
                case eEvents::Event_Destroy:
                {
                    l_Player->ExitVehicle();
                    me->CastSpell(me, eSpells::Spell_FelLord, true);
                    me->DespawnOrUnsummon(1000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_lightforged_warframe_124988AI(p_Creature);
        }
};

/// Nathraxxan Rift - 126743
class npc_nathraxxan_rift_126743 : public CreatureScript
{
    public:
        npc_nathraxxan_rift_126743() : CreatureScript("npc_nathraxxan_rift_126743") { }

        struct npc_nathraxxan_rift_126743AI : public ScriptedAI
        {
            npc_nathraxxan_rift_126743AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eEvents
            {
                Event_ResummonDemons = 1
            };

            enum eSpells
            {
                Spell_Closing = 251575,
                Spell_Destruction = 251609
            };

            enum eKillcredits
            {
                Killcredit_NathraxxanRiftClosed = 126741,
                Killcredit_NathraxxanRift_A_Destroyed = 292580,
                Killcredit_NathraxxanRift_B_Destroyed = 292581,
                Killcredit_NathraxxanRift_C_Destroyed = 292582,
                Killcredit_NathraxxanRift_D_Destroyed = 292583,
                Killcredit_NathraxxanRift_E_Destroyed = 292584
            };

            std::list<TempSummon*> summonList;
            EventMap m_Events;

            void SummonDemons()
            {
                if (int32(me->GetPosition().GetPositionX()) == 2015)
                {
                    me->SummonCreatureGroup(urand(0, 1), &summonList);
                }
                else if (int32(me->GetPosition().GetPositionX()) == 2012)
                {
                    me->SummonCreatureGroup(urand(2, 3), &summonList);
                }
                else if (int32(me->GetPosition().GetPositionX()) == 2139)
                {
                    me->SummonCreatureGroup(urand(4, 5), &summonList);
                }
                else if (int32(me->GetPosition().GetPositionX()) == 2165)
                {
                    me->SummonCreatureGroup(urand(6, 7), &summonList);
                }
                else if (int32(me->GetPosition().GetPositionX()) == 2143)
                {
                    me->SummonCreatureGroup(8, &summonList);
                }
            }

            void InitializeAI() override
            {
                SummonDemons();
            }

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = p_Caster->ToPlayer())
                {
                    if (p_Spell->Id == eSpells::Spell_Closing)
                    {
                        if (int32(me->GetPosition().GetPositionX()) == 2015)
                        {
                            l_Player->KilledMonsterCredit(eKillcredits::Killcredit_NathraxxanRift_B_Destroyed);
                        }
                        else if (int32(me->GetPosition().GetPositionX()) == 2012)
                        {
                            l_Player->KilledMonsterCredit(eKillcredits::Killcredit_NathraxxanRift_C_Destroyed);
                        }
                        else if (int32(me->GetPosition().GetPositionX()) == 2139)
                        {
                            l_Player->KilledMonsterCredit(eKillcredits::Killcredit_NathraxxanRift_D_Destroyed);
                        }
                        else if (int32(me->GetPosition().GetPositionX()) == 2165)
                        {
                            l_Player->KilledMonsterCredit(eKillcredits::Killcredit_NathraxxanRift_A_Destroyed);
                        }
                        else if (int32(me->GetPosition().GetPositionX()) == 2143)
                        {
                            l_Player->KilledMonsterCredit(eKillcredits::Killcredit_NathraxxanRift_E_Destroyed);
                        }

                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_NathraxxanRiftClosed);
                        l_Player->CastSpell(l_Player, eSpells::Spell_Destruction, true);
                    }
                }
            }

            void JustSummoned(Creature* p_Summon) override
            {
                p_Summon->SetPhaseMask(me->GetPhaseMask(), true);
                p_Summon->SetInPhase(10034, true, true);
            }

            void SummonedCreatureDies(Creature* p_Summon, Unit* /*p_Killer*/) override
            {
                summonList.remove(p_Summon->ToTempSummon());

                if (summonList.empty())
                {
                    me->SetFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_SPELLCLICK);
                    m_Events.ScheduleEvent(eEvents::Event_ResummonDemons, urand(5000, 10000));
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_ResummonDemons:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_SPELLCLICK);
                    SummonDemons();
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_nathraxxan_rift_126743AI(p_Creature);
        }
};

/// Lord Nathraxas - 125034
class npc_lord_nathraxas_125034 : public CreatureScript
{
    public:
        npc_lord_nathraxas_125034() : CreatureScript("npc_lord_nathraxas_125034") { }

        struct npc_lord_nathraxas_125034AI : public ScriptedAI
        {
            npc_lord_nathraxas_125034AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_DemonChanneling = 249060,
                Spell_DreadScythe = 251759,
                Spell_MassFelEruption = 251745,
                Spell_DefileFirst = 249971,
                Spell_DefileSecond = 254720,
                Spell_Killcredit = 249975,
                Spell_PurifyingFlame = 251510,
                Spell_CrusaderLeap = 251484,
                Spell_JudgmentBlast = 248291
            };

            enum eEvents
            {
                Event_CastDreadScythe = 1,
                Event_CastMassFelEruption = 2,
                Event_DestroyWarframe = 3,
                Event_StartAttack = 4
            };

            EventMap m_Events;
            bool m_EightyPctLine = false;
            bool m_FiftyFivePctLine = false;
            bool m_FourthPctLine = false;

            void JustReachedHome() override
            {
                DoCast(eSpells::Spell_DemonChanneling, true);
            }

            void Reset() override
            {
                m_EightyPctLine = false;
                m_FiftyFivePctLine = false;
                m_FourthPctLine = false;
            }

            void InitializeAI() override
            {
                DoCast(eSpells::Spell_DemonChanneling, true);
            }

            void EnterCombat(Unit* /*victim*/) override
            {
                Talk(0);
                m_Events.ScheduleEvent(eEvents::Event_CastDreadScythe, 5000);
                m_Events.ScheduleEvent(eEvents::Event_CastMassFelEruption, 7000);
            }

            void DamageTaken(Unit* attacker, uint32& damage, SpellInfo const* p_SpellInfo) override
            {
                if (p_SpellInfo)
                {
                    if (p_SpellInfo->Id == eSpells::Spell_JudgmentBlast)
                    {
                        damage = urand(1200000, 1400000);
                    }
                    else if (p_SpellInfo->Id == eSpells::Spell_PurifyingFlame)
                    {
                        damage = urand(400000, 800000);
                    }
                    else if (p_SpellInfo->Id == eSpells::Spell_CrusaderLeap)
                    {
                        damage = 1000000;
                    }
                }

                if (me->GetHealthPct() <= 90 && !m_EightyPctLine)
                {
                    Talk(1);
                    m_EightyPctLine = true;
                }
                if (me->GetHealthPct() <= 55 && !m_FiftyFivePctLine)
                {
                    Talk(2);
                    m_FiftyFivePctLine = true;
                }
                if (me->GetHealthPct() <= 40 && !m_FourthPctLine)
                {
                    m_Events.Reset();
                    Talk(3);
                    me->CastStop();
                    me->StopAttack();
                    me->SetFacingToObject(attacker);
                    m_Events.ScheduleEvent(eEvents::Event_DestroyWarframe, 3000);
                    m_FourthPctLine = true;
                }
            }

            void JustDied(Unit* /*killer*/) override
            {
                Talk(4);
                DoCastAOE(eSpells::Spell_Killcredit, true);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                if (!UpdateVictim())
                    return;

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastDreadScythe:
                {
                    DoCastVictim(eSpells::Spell_DreadScythe);
                    m_Events.ScheduleEvent(eEvents::Event_CastDreadScythe, 15000);
                    break;
                }
                case eEvents::Event_CastMassFelEruption:
                {
                    DoCast(eSpells::Spell_MassFelEruption);
                    m_Events.ScheduleEvent(eEvents::Event_CastMassFelEruption, 25000);
                    break;
                }
                case eEvents::Event_DestroyWarframe:
                {
                    DoCast(eSpells::Spell_DefileFirst);
                    m_Events.ScheduleEvent(eEvents::Event_StartAttack, 3500);
                    break;
                }
                case eEvents::Event_StartAttack:
                {
                    if (Unit* l_Target = SelectTarget(SELECT_TARGET_RANDOM, 0, 50.0f, true))
                        AttackStart(l_Target, true);

                    m_Events.ScheduleEvent(eEvents::Event_CastDreadScythe, 5000);
                    m_Events.ScheduleEvent(eEvents::Event_CastMassFelEruption, 7000);
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_lord_nathraxas_125034AI(p_Creature);
        }
};

/// Prophet Velen - 128725
class npc_prophet_velen_128725 : public CreatureScript
{
    public:
        npc_prophet_velen_128725() : CreatureScript("npc_prophet_velen_128725") { }

        struct npc_prophet_velen_128725AI : public ScriptedAI
        {
            npc_prophet_velen_128725AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_VelenToConsole[3] =
            {
                { 4730.513f, 9868.877f, 64.37397f },
                { 4729.263f, 9866.377f, 64.37397f },
                { 4730.674f, 9863.443f, 64.29066f }
            };

            enum eQuests
            {
                Quest_AFloatingRuin = 48081,
                Quest_MacAreeJewelOfArgus = 46815
            };

            enum eKillcredits
            {
                Killcredit_UseTheNavigationConsole = 125814
            };

            enum eSpells
            {
                Spell_ConversationLastTimeOnMacAree = 254668
            };

            enum eActions
            {
                Action_VelenAcceptQuestMacAreeJewelOfArgus = 1
            };

            enum ePoints
            {
                Point_PathToConsoleEnd = 1
            };

            enum eEvents
            {
                Event_MoveToConsole = 1,
                Event_VisualTeleport = 2
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) < 10.0f && l_Player->GetQuestStatus(eQuests::Quest_AFloatingRuin) == QUEST_STATUS_INCOMPLETE)
                {
                    Talk(0, l_Player->GetGUID());
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_UseTheNavigationConsole);
                }
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();
                p_Player->CastSpell(p_Player, eSpells::Spell_ConversationLastTimeOnMacAree, true);
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_MacAreeJewelOfArgus:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenAcceptQuestMacAreeJewelOfArgus);
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_VelenAcceptQuestMacAreeJewelOfArgus:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_MoveToConsole, 2000);
                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_PointId)
                    {
                    case ePoints::Point_PathToConsoleEnd:
                    {
                        m_Events.ScheduleEvent(eEvents::Event_VisualTeleport, 1000);
                        me->SetFacingTo(0.2094395f);
                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_MoveToConsole:
                {
                    Talk(1, l_Player->GetGUID());
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathToConsoleEnd, Path_VelenToConsole, 3, true);
                    break;
                }
                case eEvents::Event_VisualTeleport:
                {
                    me->SendPlaySpellVisualKit(85644, 0, 0);
                    me->SendPlaySpellVisualKit(85596, 0, 0);
                    me->DespawnOrUnsummon(1000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_prophet_velen_128725AI(p_Creature);
        }
};

/// Prophet Velen - 125968
class npc_prophet_velen_125968 : public CreatureScript
{
    public:
        npc_prophet_velen_125968() : CreatureScript("npc_prophet_velen_125968") { }

        struct npc_prophet_velen_125968AI : public ScriptedAI
        {
            npc_prophet_velen_125968AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_Velen[11] =
            {
                { 4850.187f, 9747.251f, -65.33276f },
                { 4861.687f, 9749.751f, -65.58276f },
                { 4870.687f, 9749.001f, -65.83276f },
                { 4880.937f, 9748.501f, -65.83276f },
                { 4891.687f, 9750.751f, -65.58276f },
                { 4907.687f, 9751.751f, -65.58276f },
                { 4911.687f, 9754.001f, -65.58276f },
                { 4916.687f, 9759.751f, -67.33276f },
                { 4921.687f, 9763.251f, -66.08276f },
                { 4928.306f, 9768.255f, -66.15413f },
                { 4929.938f, 9769.903f, -66.15628f }
            };

            enum eKillcredits
            {
                Killcredit_TalkToVelen = 125968,
                Killcredit_FollowVelen = 120894
            };

            enum eSpells
            {
                Spell_CosmeticVelenPhaseTransition = 240938
            };

            enum ePoints
            {
                Point_FirstPointEnd = 1,
                Point_VelenPathEnd = 2,
                Point_EchoCitizenPathEnd = 3
            };

            enum eEvents
            {
                Event_SayFirstLine = 1,
                Event_SaySecondLine = 2,
                Event_MoveFirstPoint = 3,
                Event_SummonWarrSecond = 4,
                Event_SummonThirdWaveNpcs = 5,
                Event_SummonFourthWaveNpcs = 6,
                Event_SummonLastCitizen = 7,
                Event_SummonLastTabluk = 8,
                Event_FollowKillcredit = 9
            };

            enum eConversations
            {
                Conv_VelenPathStartConversation = 5682
            };

            enum eNpcs
            {
                Npc_EchoOfArgusWarriorFirst = 120883,
                Npc_EchoOfArgusWarriorSecond = 120884,
                Npc_EchoOfArgusCitizenFirst = 120877,
                Npc_EchoOfArgusCitizenSecond = 120875,
                Npc_EchoOfArgusCitizenThird = 119755,
                Npc_EchoOfArgusTabluk = 125983
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;
            Position const m_VelenFirstMovePoint = { 4847.568f, 9746.247f, -65.5114f };

            Position const m_EchoCitizenFirstSpawnPos = { 4857.165f, 9752.479f, -65.23782f, 3.439216f };
            Position const m_EchoCitizenSecondSpawnPos = { 4871.781f, 9746.02f, -65.88516f, 3.138743f };
            Position const m_EchoCitizenThirdSpawnPos = { 4876.296f, 9751.716f, -65.86731f, 3.260093f };
            Position const m_EchoCitizenFourthSpawnPos = { 4883.267f, 9746.255f, -65.41856f, 3.239578f };
            Position const m_EchoCitizenFifthSpawnPos = { 4892.814f, 9754.044f, -65.65838f, 3.242578f };

            Position const m_EchoWarrFirstSpawnPos = { 4845.736f, 9741.642f, -65.26759f, 0.3563171f };
            Position const m_EchoWarrSecondSpawnPos = { 4842.461f, 9750.668f, -65.05089f };
            Position const m_EchoWarrThirdSpawnPos = { 4873.851f, 9743.856f, -65.68317f, 0.213748f };
            Position const m_EchoWarrFourthSpawnPos = { 4872.845f, 9752.881f, -65.81445f, 0.04106168f };

            Position const m_EchoTablukFirstSpawnPos = { 4871.606f, 9750.646f, -65.956f, 3.100567f };
            Position const m_EchoTablukSecondSpawnPos = { 4902.135f, 9749.728f, -65.63019f, 3.266367f };


            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                m_SummonerGuid = p_Summoner->GetGUID();
                m_Events.ScheduleEvent(eEvents::Event_SayFirstLine, 2000);
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();
                p_Player->PlayScene(1883, p_Player);
                me->DestroyForPlayer(p_Player);
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                {
                    switch (p_PointId)
                    {
                    case ePoints::Point_FirstPointEnd:
                    {
                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_VelenPathStartConversation, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }

                        me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_VelenPathEnd, Path_Velen, 11, true);
                        break;
                    }
                    case ePoints::Point_VelenPathEnd:
                    {
                        me->SetFacingTo(0.6806784f);
                        DoCast(eSpells::Spell_CosmeticVelenPhaseTransition, true);
                        Talk(2, l_Player->GetGUID());
                        m_Events.ScheduleEvent(eEvents::Event_FollowKillcredit, 2000);
                        break;
                    }
                    default:
                        break;
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SayFirstLine:
                {
                    Talk(0, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_SaySecondLine, 5000);
                    break;
                }
                case eEvents::Event_SaySecondLine:
                {
                    if (Creature* l_EchoWarr = l_Player->SummonCreature(eNpcs::Npc_EchoOfArgusWarriorFirst, m_EchoWarrFirstSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_EchoWarr->SetAIAnimKitId(1977);
                        l_EchoWarr->DespawnOrUnsummon(11000);
                        l_EchoWarr->AddDelayedEvent([l_EchoWarr]() -> void
                        {
                            l_EchoWarr->SendPlaySpellVisualKit(86627, 0, 0);
                        }, 500);
                        l_EchoWarr->AddDelayedEvent([l_EchoWarr]() -> void
                        {
                            l_EchoWarr->SendPlaySpellVisualKit(86628, 0, 0);
                        }, 10000);
                    }

                    if (Creature* l_EchoCitizen = l_Player->SummonCreature(eNpcs::Npc_EchoOfArgusCitizenFirst, m_EchoCitizenFirstSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        std::vector<G3D::Vector3> const Path_Citizen =
                        {
                            { 4843.748f, 9749.125f, -64.97805f },
                            { 4832.756f, 9749.83f, -64.40964f },
                            { 4829.006f, 9749.83f, -64.40964f },
                            { 4822.006f, 9750.33f, -63.65964f },
                            { 4821.952f, 9750.388f, -63.7543f },
                            { 4820.452f, 9750.388f, -63.5043f },
                            { 4812.373f, 9748.301f, -63.67619f },
                            { 4807.392f, 9749.246f, -64.4169f },
                            { 4805.392f, 9749.746f, -64.4169f },
                            { 4801.798f, 9755.021f, -65.20271f }
                        };

                        l_EchoCitizen->SetAIAnimKitId(5142);
                        l_EchoCitizen->DespawnOrUnsummon(11000);
                        l_EchoCitizen->AddDelayedEvent([l_EchoCitizen]() -> void
                        {
                            l_EchoCitizen->SendPlaySpellVisualKit(86627, 0, 0);
                        }, 500);
                        l_EchoCitizen->AddDelayedEvent([l_EchoCitizen, Path_Citizen]() -> void
                        {
                            l_EchoCitizen->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoCitizenPathEnd, Path_Citizen.data(), Path_Citizen.size(), false);
                        }, 3000);
                    }

                    Talk(1, l_Player->GetGUID());
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_TalkToVelen);
                    m_Events.ScheduleEvent(eEvents::Event_SummonWarrSecond, 1000);
                    m_Events.ScheduleEvent(eEvents::Event_MoveFirstPoint, 2000);
                    break;
                }
                case eEvents::Event_MoveFirstPoint:
                {
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_FirstPointEnd, m_VelenFirstMovePoint, true);
                    break;
                }
                case eEvents::Event_SummonWarrSecond:
                {
                    if (Creature* l_EchoWarr = l_Player->SummonCreature(eNpcs::Npc_EchoOfArgusWarriorSecond, m_EchoWarrSecondSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_EchoWarr->SetAIAnimKitId(1977);
                        l_EchoWarr->DespawnOrUnsummon(11000);
                        l_EchoWarr->AddDelayedEvent([l_EchoWarr]() -> void
                        {
                            l_EchoWarr->SendPlaySpellVisualKit(86627, 0, 0);
                        }, 500);
                        l_EchoWarr->AddDelayedEvent([l_EchoWarr]() -> void
                        {
                            l_EchoWarr->SendPlaySpellVisualKit(86628, 0, 0);
                        }, 10000);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SummonThirdWaveNpcs, 200);
                    break;
                }
                case eEvents::Event_SummonThirdWaveNpcs:
                {
                    if (Creature* l_EchoCitizen = l_Player->SummonCreature(eNpcs::Npc_EchoOfArgusCitizenFirst, m_EchoCitizenSecondSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        std::vector<G3D::Vector3> const Path_Citizen =
                        {
                            { 4860.178f, 9747.45f, -65.36086f },
                            { 4853.928f, 9744.45f, -65.36086f },
                            { 4844.073f, 9738.158f, -64.77115f },
                            { 4837.26f, 9732.438f, -64.4137f },
                            { 4836.26f, 9731.438f, -64.4137f },
                            { 4833.01f, 9725.188f, -64.1637f },
                            { 4834.446f, 9721.238f, -64.7117f },
                            { 4835.446f, 9719.238f, -64.7117f },
                            { 4840.104f, 9714.063f, -65.06094f }
                        };

                        l_EchoCitizen->SetAIAnimKitId(5142);
                        l_EchoCitizen->DespawnOrUnsummon(13000);
                        l_EchoCitizen->AddDelayedEvent([l_EchoCitizen]() -> void
                        {
                            l_EchoCitizen->SendPlaySpellVisualKit(86627, 0, 0);
                        }, 500);
                        l_EchoCitizen->AddDelayedEvent([l_EchoCitizen, Path_Citizen]() -> void
                        {
                            l_EchoCitizen->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoCitizenPathEnd, Path_Citizen.data(), Path_Citizen.size(), false);
                        }, 4000);
                    }

                    if (Creature* l_EchoWarr = l_Player->SummonCreature(eNpcs::Npc_EchoOfArgusWarriorSecond, m_EchoWarrThirdSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_EchoWarr->SetAIAnimKitId(1977);
                        l_EchoWarr->DespawnOrUnsummon(22000);
                        l_EchoWarr->AddDelayedEvent([l_EchoWarr]() -> void
                        {
                            l_EchoWarr->SendPlaySpellVisualKit(86627, 0, 0);
                        }, 500);
                        l_EchoWarr->AddDelayedEvent([l_EchoWarr]() -> void
                        {
                            l_EchoWarr->SendPlaySpellVisualKit(86628, 0, 0);
                        }, 21000);
                    }

                    if (Creature* l_EchoWarr = l_Player->SummonCreature(eNpcs::Npc_EchoOfArgusWarriorSecond, m_EchoWarrFourthSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_EchoWarr->SetAIAnimKitId(1977);
                        l_EchoWarr->DespawnOrUnsummon(22000);
                        l_EchoWarr->AddDelayedEvent([l_EchoWarr]() -> void
                        {
                            l_EchoWarr->SendPlaySpellVisualKit(86627, 0, 0);
                        }, 500);
                        l_EchoWarr->AddDelayedEvent([l_EchoWarr]() -> void
                        {
                            l_EchoWarr->SendPlaySpellVisualKit(86628, 0, 0);
                        }, 21000);
                    }

                    if (Creature* l_EchoTabluk = l_Player->SummonCreature(eNpcs::Npc_EchoOfArgusTabluk, m_EchoTablukFirstSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        std::vector<G3D::Vector3> const Path_Tabluk =
                        {
                            { 4859.507f, 9751.414f, -65.35842f },
                            { 4859.007f, 9751.414f, -65.10842f },
                            { 4850.601f, 9750.271f, -65.16861f },
                            { 4838.851f, 9747.771f, -64.91861f },
                            { 4828.764f, 9749.117f, -64.29414f },
                            { 4825.764f, 9749.617f, -64.29414f },
                            { 4822.591f, 9749.59f, -63.82469f },
                            { 4818.591f, 9749.84f, -63.57469f },
                            { 4812.387f, 9748.191f, -63.74621f },
                            { 4806.637f, 9747.941f, -64.24621f },
                            { 4804.387f, 9751.191f, -64.49621f },
                            { 4801.691f, 9754.318f, -65.21553f }
                        };

                        l_EchoTabluk->DespawnOrUnsummon(12000);
                        l_EchoTabluk->AddDelayedEvent([l_EchoTabluk]() -> void
                        {
                            l_EchoTabluk->SendPlaySpellVisualKit(86627, 0, 0);
                        }, 500);
                        l_EchoTabluk->AddDelayedEvent([l_EchoTabluk, Path_Tabluk]() -> void
                        {
                            l_EchoTabluk->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoCitizenPathEnd, Path_Tabluk.data(), Path_Tabluk.size(), false);
                        }, 4000);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SummonFourthWaveNpcs, 1400);
                    break;
                }
                case eEvents::Event_SummonFourthWaveNpcs:
                {
                    if (Creature* l_EchoCitizen = l_Player->SummonCreature(eNpcs::Npc_EchoOfArgusCitizenSecond, m_EchoCitizenThirdSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        std::vector<G3D::Vector3> const Path_Citizen =
                        {
                            { 4868.629f, 9751.249f, -65.69332f },
                            { 4864.608f, 9751.043f, -65.5787f },
                            { 4859.858f, 9750.793f, -65.3287f },
                            { 4856.027f, 9750.603f, -65.31319f },
                            { 4843.405f, 9749.118f, -65.10712f },
                            { 4839.655f, 9748.368f, -64.85712f },
                            { 4831.931f, 9747.914f, -64.49152f },
                            { 4826.607f, 9748.629f, -64.21407f },
                            { 4822.607f, 9748.129f, -63.71407f },
                            { 4820.107f, 9747.879f, -63.71407f },
                            { 4812.85f, 9747.352f, -63.47518f },
                            { 4808.1f, 9748.102f, -64.22518f },
                            { 4806.1f, 9748.602f, -64.22518f },
                            { 4803.35f, 9752.602f, -64.72518f },
                            { 4802.837f, 9752.941f, -65.07808f }
                        };

                        l_EchoCitizen->SetAIAnimKitId(9959);
                        l_EchoCitizen->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 605);
                        l_EchoCitizen->DespawnOrUnsummon(12000);
                        l_EchoCitizen->AddDelayedEvent([l_EchoCitizen]() -> void
                        {
                            l_EchoCitizen->SendPlaySpellVisualKit(86627, 0, 0);
                        }, 500);
                        l_EchoCitizen->AddDelayedEvent([l_EchoCitizen, Path_Citizen]() -> void
                        {
                            l_EchoCitizen->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
                            l_EchoCitizen->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoCitizenPathEnd, Path_Citizen.data(), Path_Citizen.size(), false);
                        }, 3000);
                    }

                    if (Creature* l_EchoCitizen = l_Player->SummonCreature(eNpcs::Npc_EchoOfArgusCitizenThird, m_EchoCitizenFourthSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        std::vector<G3D::Vector3> const Path_Citizen =
                        {
                            { 4873.582f, 9745.949f, -65.64048f },
                            { 4868.465f, 9746.201f, -65.75449f },
                            { 4864.215f, 9747.201f, -65.50449f },
                            { 4859.68f, 9747.844f, -65.39462f },
                            { 4854.93f, 9746.594f, -65.39462f },
                            { 4848.555f, 9744.424f, -65.15339f },
                            { 4843.141f, 9740.701f, -64.88565f },
                            { 4837.204f, 9736.087f, -64.64543f },
                            { 4833.204f, 9730.587f, -64.14543f },
                            { 4831.27f, 9725.861f, -64.41512f },
                            { 4832.27f, 9720.861f, -64.91512f },
                            { 4833.52f, 9720.611f, -64.91512f },
                            { 4835.02f, 9719.111f, -64.91512f },
                            { 4836.02f, 9717.861f, -64.91512f },
                            { 4835.938f, 9716.666f, -65.436f }
                        };

                        l_EchoCitizen->SetAIAnimKitId(5142);
                        l_EchoCitizen->DespawnOrUnsummon(12000);
                        l_EchoCitizen->AddDelayedEvent([l_EchoCitizen]() -> void
                        {
                            l_EchoCitizen->SendPlaySpellVisualKit(86627, 0, 0);
                        }, 500);
                        l_EchoCitizen->AddDelayedEvent([l_EchoCitizen, Path_Citizen]() -> void
                        {
                            l_EchoCitizen->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoCitizenPathEnd, Path_Citizen.data(), Path_Citizen.size(), false);
                        }, 3000);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SummonLastCitizen, 700);
                    break;
                }
                case eEvents::Event_SummonLastCitizen:
                {
                    if (Creature* l_EchoCitizen = l_Player->SummonCreature(eNpcs::Npc_EchoOfArgusCitizenThird, m_EchoCitizenFifthSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        std::vector<G3D::Vector3> const Path_Citizen =
                        {
                            { 4880.34f, 9752.468f, -65.62526f },
                            { 4879.865f, 9752.246f, -65.72446f },
                            { 4873.115f, 9751.746f, -65.72446f },
                            { 4872.983f, 9751.511f, -65.69283f },
                            { 4863.383f, 9751.368f, -65.63277f },
                            { 4858.383f, 9751.118f, -65.13277f },
                            { 4853.133f, 9750.368f, -65.38277f },
                            { 4852.736f, 9750.227f, -65.22579f },
                            { 4846.736f, 9749.477f, -65.22579f },
                            { 4836.768f, 9747.581f, -64.76797f },
                            { 4825.116f, 9747.9f, -64.48814f },
                            { 4824.801f, 9748.354f, -64.40315f },
                            { 4821.801f, 9748.604f, -63.90315f },
                            { 4818.551f, 9748.854f, -63.65315f },
                            { 4810.258f, 9749.681f, -63.96842f },
                            { 4806.008f, 9751.181f, -64.46842f },
                            { 4805.679f, 9751.489f, -64.72594f },
                            { 4802.179f, 9752.739f, -64.97594f },
                            { 4797.929f, 9756.489f, -65.22594f },
                            { 4794.845f, 9758.77f, -65.94712f }
                        };

                        l_EchoCitizen->SetAIAnimKitId(5142);
                        l_EchoCitizen->DespawnOrUnsummon(16000);
                        l_EchoCitizen->AddDelayedEvent([l_EchoCitizen]() -> void
                        {
                            l_EchoCitizen->SendPlaySpellVisualKit(86627, 0, 0);
                        }, 500);
                        l_EchoCitizen->AddDelayedEvent([l_EchoCitizen, Path_Citizen]() -> void
                        {
                            l_EchoCitizen->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoCitizenPathEnd, Path_Citizen.data(), Path_Citizen.size(), false);
                        }, 3000);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SummonLastTabluk, 300);
                    break;
                }
                case eEvents::Event_SummonLastTabluk:
                {
                    if (Creature* l_EchoTabluk = l_Player->SummonCreature(eNpcs::Npc_EchoOfArgusTabluk, m_EchoTablukSecondSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        std::vector<G3D::Vector3> const Path_Tabluk =
                        {
                            { 4882.441f, 9746.873f, -65.41646f },
                            { 4877.441f, 9746.373f, -65.66646f },
                            { 4869.191f, 9746.123f, -65.66646f },
                            { 4868.949f, 9746.282f, -65.65854f },
                            { 4863.267f, 9746.252f, -65.64947f },
                            { 4858.767f, 9746.502f, -65.14947f },
                            { 4853.017f, 9745.752f, -65.39947f },
                            { 4852.704f, 9745.857f, -65.0349f },
                            { 4848.454f, 9744.357f, -65.0349f },
                            { 4841.837f, 9740.859f, -64.78101f },
                            { 4836.087f, 9735.359f, -64.53101f },
                            { 4835.872f, 9735.156f, -64.5043f },
                            { 4832.872f, 9730.156f, -64.0043f },
                            { 4831.651f, 9724.234f, -64.65694f },
                            { 4833.401f, 9720.984f, -64.90694f },
                            { 4834.151f, 9719.734f, -64.90694f },
                            { 4840.278f, 9714.202f, -65.02347f }
                        };

                        l_EchoTabluk->DespawnOrUnsummon(14000);
                        l_EchoTabluk->AddDelayedEvent([l_EchoTabluk]() -> void
                        {
                            l_EchoTabluk->SendPlaySpellVisualKit(86627, 0, 0);
                        }, 500);
                        l_EchoTabluk->AddDelayedEvent([l_EchoTabluk, Path_Tabluk]() -> void
                        {
                            l_EchoTabluk->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoCitizenPathEnd, Path_Tabluk.data(), Path_Tabluk.size(), false);
                        }, 3000);
                    }

                    break;
                }
                case eEvents::Event_FollowKillcredit:
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_FollowVelen);
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_prophet_velen_125968AI(p_Creature);
        }
};

/// Argus Echoes Summoner Left - 1208750
class npc_argus_echoes_summoner_left : public CreatureScript
{
    public:
        npc_argus_echoes_summoner_left() : CreatureScript("npc_argus_echoes_summoner_left") { }

        struct npc_argus_echoes_summoner_leftAI : public ScriptedAI
        {
            npc_argus_echoes_summoner_leftAI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_LeftEchoesFirst[28] =
            {
                { 5056.894f, 9901.252f, -76.40764f },
                { 5047.389f, 9891.52f, -76.40764f },
                { 5037.884f, 9881.787f, -76.40764f },
                { 5029.951f, 9877.96f, -76.42628f },
                { 5026.799f, 9876.527f, -76.30128f },
                { 5019.917f, 9866.791f, -77.33067f },
                { 5013.471f, 9861.479f, -77.69596f },
                { 5008.592f, 9858.225f, -78.17744f },
                { 5004.842f, 9855.475f, -77.67744f },
                { 4996.409f, 9849.821f, -77.7495f },
                { 4993.873f, 9847.349f, -78.65877f },
                { 4989.873f, 9844.599f, -78.65877f },
                { 4966.462f, 9824.976f, -79.19628f },
                { 4961.286f, 9816.645f, -79.19628f },
                { 4957.134f, 9809.782f, -77.4474f },
                { 4954.547f, 9804.933f, -77.76587f },
                { 4949.642f, 9798.814f, -77.09324f },
                { 4944.142f, 9791.814f, -77.34324f },
                { 4939.721f, 9782.469f, -71.52992f },
                { 4935.618f, 9779.469f, -68.47382f },
                { 4933.618f, 9777.219f, -66.72382f },
                { 4928.812f, 9772.142f, -65.97618f },
                { 4921.723f, 9765.285f, -65.828f },
                { 4911.654f, 9755.438f, -65.75659f },
                { 4908.974f, 9755.963f, -65.10323f },
                { 4904.974f, 9755.963f, -65.35323f },
                { 4890.403f, 9756.582f, -65.59214f },
                { 4887.121f, 9760.494f, -65.02328f }
            };

            G3D::Vector3 const Path_LeftEchoesSecond[18] =
            {
                { 5059.691f, 9906.138f, -76.57941f },
                { 5055.629f, 9901.359f, -76.51655f },
                { 5051.568f, 9896.581f, -76.45368f },
                { 5043.076f, 9886.713f, -76.43844f },
                { 5033.32f, 9877.034f, -76.43844f },
                { 5033.292f, 9870.923f, -76.43844f },
                { 5031.354f, 9865.539f, -76.11278f },
                { 5015.341f, 9861.696f, -77.64121f },
                { 5001.591f, 9852.946f, -77.89121f },
                { 4987.565f, 9844.068f, -78.43216f },
                { 4974.237f, 9836.555f, -78.82947f },
                { 4958.836f, 9811.9f, -78.48468f },
                { 4946.131f, 9789.965f, -77.43297f },
                { 4937.558f, 9778.574f, -69.21906f },
                { 4927.125f, 9773.238f, -66.07193f },
                { 4922.355f, 9765.502f, -65.98167f },
                { 4909.262f, 9753.944f, -65.55393f },
                { 4886.731f, 9757.133f, -65.18204f }
            };

            G3D::Vector3 const Path_LeftEchoesThird[21] =
            {
                { 5059.833f, 9905.773f, -76.46815f },
                { 5051.552f, 9896.151f, -76.45329f },
                { 5043.271f, 9886.529f, -76.43844f },
                { 5033.585f, 9877.037f, -76.43844f },
                { 5027.99f, 9876.975f, -76.3914f },
                { 5024.068f, 9875.286f, -75.9826f },
                { 5015.697f, 9861.424f, -77.72644f },
                { 5006.697f, 9865.924f, -77.72644f },
                { 4993.59f, 9869.523f, -77.13596f },
                { 4987.34f, 9862.773f, -76.13596f },
                { 4966.774f, 9851.9f, -77.26286f },
                { 4958.524f, 9853.15f, -77.01286f },
                { 4952.774f, 9857.15f, -75.76286f },
                { 4947.024f, 9857.9f, -74.76286f },
                { 4942.945f, 9862.461f, -73.6964f },
                { 4935.484f, 9872.836f, -66.32685f },
                { 4925.494f, 9883.729f, -65.46841f },
                { 4912.411f, 9889.52f, -64.67195f },
                { 4901.461f, 9892.935f, -62.84103f },
                { 4891.161f, 9895.282f, -62.54207f },
                { 4880.309f, 9900.691f, -63.93359f }
            };

            std::array<uint32, 7> m_CitizenEchoesArray =
            { {
                    120876,
                    120877,
                    120875,
                    119868,
                    119758,
                    119870,
                    120703
            } };

            std::array<uint32, 7> m_DemonsEchoesArray =
            { {
                    119866,
                    120603,
                    120836,
                    119864
            } };

            enum eEvents
            {
                Event_SummonCitizenEchoes = 1,
                Event_SummonDemonsEchoes = 2
            };

            enum ePoints
            {
                Point_EchoePathEnd = 1
            };

            EventMap m_Events;
            Position const m_DemonEchoeMovePos = { 5016.055664f, 9859.557617f, -78.095512f };

            void InitializeAI() override
            {
                m_Events.ScheduleEvent(eEvents::Event_SummonCitizenEchoes, urand(0, 10000));
                m_Events.ScheduleEvent(eEvents::Event_SummonDemonsEchoes, urand(0, 10000));
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                // Hack
                if (!me->SelectNearestPlayerNotGM(250.0f))
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SummonCitizenEchoes:
                {
                    uint8 l_EchoesCount = urand(1, 3);

                    for (uint8 l_Itr = 0; l_Itr < l_EchoesCount; l_Itr++)
                    {
                        Position m_SpawnPos;
                        me->GetRandomNearPosition(m_SpawnPos, 10.0f);
                        uint8 l_RandomPath = urand(1, 3);

                        if (Creature* l_Creature = me->SummonCreature(m_CitizenEchoesArray[urand(0, 6)], m_SpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0))
                        {
                            l_Creature->SetPhaseMask(0, true);
                            l_Creature->SetInPhase(8964, true, true);

                            l_Creature->AddDelayedEvent([l_Creature]() -> void
                            {
                                l_Creature->SendPlaySpellVisualKit(86627, 0, 0);
                            }, 500);

                            if (l_RandomPath == 1)
                            {
                                l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoePathEnd, Path_LeftEchoesFirst, 28, false);
                            }
                            else if (l_RandomPath == 2)
                            {
                                l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoePathEnd, Path_LeftEchoesSecond, 18, false);
                            }
                            else
                            {
                                l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoePathEnd, Path_LeftEchoesThird, 21, false);
                            }
                        }
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SummonCitizenEchoes, urand(5000, 10000));
                    break;
                }
                case eEvents::Event_SummonDemonsEchoes:
                {
                    Position m_SpawnPos;
                    me->GetRandomNearPosition(m_SpawnPos, 5.0f);
                    uint8 l_RandomPath = urand(1, 3);

                    if (Creature* l_Creature = me->SummonCreature(m_DemonsEchoesArray[urand(0, 3)], m_SpawnPos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 5000))
                    {
                        l_Creature->SetReactState(ReactStates::REACT_PASSIVE);
                        l_Creature->SetWalk(false);
                        l_Creature->SetPhaseMask(0, true);
                        l_Creature->SetInPhase(8656, true, true);
                        l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_EchoePathEnd, m_DemonEchoeMovePos, true);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SummonDemonsEchoes, 20000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_argus_echoes_summoner_leftAI(p_Creature);
        }
};

/// Argus Echoes Summoner Middle - 1208751
class npc_argus_echoes_summoner_middle : public CreatureScript
{
    public:
        npc_argus_echoes_summoner_middle() : CreatureScript("npc_argus_echoes_summoner_middle") { }

        struct npc_argus_echoes_summoner_middleAI : public ScriptedAI
        {
            npc_argus_echoes_summoner_middleAI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_MiddleEchoesFirst[28] =
            {
                { 5101.22f, 9825.304f, -77.59631f },
                { 5089.591f, 9825.512f, -77.59631f },
                { 5077.961f, 9825.72f, -77.59631f },
                { 5069.546f, 9825.288f, -76.74359f },
                { 5065.796f, 9825.288f, -77.24359f },
                { 5061.672f, 9826.269f, -77.29626f },
                { 5059.422f, 9826.769f, -77.29626f },
                { 5054.66f, 9828.736f, -77.50156f },
                { 5043.192f, 9828.634f, -77.83765f },
                { 5026.583f, 9824.783f, -78.16699f },
                { 5022.212f, 9824.576f, -77.82214f },
                { 5010.99f, 9822.731f, -78.33061f },
                { 5007.26f, 9821.435f, -79.09584f },
                { 4987.115f, 9814.107f, -79.19628f },
                { 4978.368f, 9810.288f, -79.19628f },
                { 4969.606f, 9806.457f, -79.19628f },
                { 4962.298f, 9801.482f, -77.3416f },
                { 4958.947f, 9799.477f, -77.10596f },
                { 4953.947f, 9796.477f, -77.10596f },
                { 4944.947f, 9790.977f, -77.60596f },
                { 4943.419f, 9789.945f, -75.99807f },
                { 4940.624f, 9784.549f, -72.71323f },
                { 4939.374f, 9783.299f, -71.71323f },
                { 4931.519f, 9777.083f, -65.80333f },
                { 4923.5f, 9768.051f, -65.72391f },
                { 4920.231f, 9765.438f, -66.0806f },
                { 4914.75f, 9760.298f, -67.5387f },
                { 4887.786133f, 9739.502930f, -64.200920f }
            };

            G3D::Vector3 const Path_MiddleEchoesSecond[17] =
            {
                { 5103.213f, 9823.561f, -77.80912f },
                { 5085.617f, 9823.934f, -77.32197f },
                { 5068.02f, 9824.307f, -76.83482f },
                { 5058.386f, 9823.455f, -77.97135f },
                { 5052.432f, 9828.128f, -77.07008f },
                { 5046.952f, 9829.401f, -77.92802f },
                { 5031.772f, 9822.784f, -77.91428f },
                { 5016.522f, 9824.284f, -77.66428f },
                { 4995.188f, 9816.606f, -78.88123f },
                { 4980.552f, 9810.351f, -78.79287f },
                { 4965.808f, 9804.088f, -78.68363f },
                { 4956.892f, 9796.073f, -78.04208f },
                { 4946.271f, 9790.26f, -77.46625f },
                { 4939.521f, 9784.51f, -72.71625f },
                { 4931.928711f, 9776.923828f, -66.472198f },
                { 4901.779297f, 9743.444336f, -64.909851f },
                { 4901.689941f, 9735.400391f, - 63.045101f }
            };

            G3D::Vector3 const Path_MiddleEchoesThird[22] =
            {
                { 5112.131f, 9824.228f, -77.20539f },
                { 5104.902f, 9824.13f, -77.43056f },
                { 5097.674f, 9824.032f, -77.65572f },
                { 5068.021f, 9824.661f, -76.83482f },
                { 5058.27f, 9823.487f, -77.97135f },
                { 5055.412f, 9818.297f, -76.06197f },
                { 5048.31f, 9818.166f, -75.63249f },
                { 5031.65f, 9822.604f, -77.80378f },
                { 5016.4f, 9824.354f, -77.55378f },
                { 4995.187f, 9816.693f, -78.87928f },
                { 4980.446f, 9810.612f, -78.73022f },
                { 4965.717f, 9804.059f, -78.64256f },
                { 4956.841f, 9795.962f, -78.05719f },
                { 4945.901f, 9790.475f, -77.46476f },
                { 4939.323f, 9784.743f, -72.4769f },
                { 4937.073f, 9778.743f, -69.2269f },
                { 4934.029f, 9775.203f, -66.17639f },
                { 4927.211f, 9773.23f, -66.05481f },
                { 4922.226f, 9765.512f, -65.96317f },
                { 4908.887f, 9754.375f, -65.5461f },
                { 4897.377f, 9747.736f, -65.10343f },
                { 4897.127f, 9742.486f, -64.60343f }
            };

            std::array<uint32, 7> m_CitizenEchoesArray =
            { {
                    120876,
                    120877,
                    120875,
                    119868,
                    119758,
                    119870,
                    120703
            } };

            std::array<uint32, 7> m_DemonsEchoesArray =
            { {
                    119866,
                    120603,
                    120836,
                    119864
            } };

            enum eEvents
            {
                Event_SummonCitizenEchoes = 1,
                Event_SummonDemonsEchoes = 2
            };

            enum ePoints
            {
                Point_EchoePathEnd = 1
            };

            EventMap m_Events;
            Position const m_DemonEchoeMovePos = { 5017.523438f, 9823.215820f, -78.102798f };

            void InitializeAI() override
            {
                m_Events.ScheduleEvent(eEvents::Event_SummonCitizenEchoes, urand(0, 10000));
                m_Events.ScheduleEvent(eEvents::Event_SummonDemonsEchoes, urand(0, 10000));
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                // Hack
                if (!me->SelectNearestPlayerNotGM(250.0f))
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SummonCitizenEchoes:
                {
                    uint8 l_EchoesCount = urand(1, 3);

                    for (uint8 l_Itr = 0; l_Itr < l_EchoesCount; l_Itr++)
                    {
                        Position m_SpawnPos;
                        me->GetRandomNearPosition(m_SpawnPos, 10.0f);
                        uint8 l_RandomPath = urand(1, 3);

                        if (Creature* l_Creature = me->SummonCreature(m_CitizenEchoesArray[urand(0, 6)], m_SpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0))
                        {
                            l_Creature->SetPhaseMask(0, true);
                            l_Creature->SetInPhase(8964, true, true);

                            l_Creature->AddDelayedEvent([l_Creature]() -> void
                            {
                                l_Creature->SendPlaySpellVisualKit(86627, 0, 0);
                            }, 500);

                            if (l_RandomPath == 1)
                            {
                                l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoePathEnd, Path_MiddleEchoesFirst, 28, false);
                            }
                            else if (l_RandomPath == 2)
                            {
                                l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoePathEnd, Path_MiddleEchoesSecond, 17, false);
                            }
                            else
                            {
                                l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoePathEnd, Path_MiddleEchoesThird, 22, false);
                            }
                        }
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SummonCitizenEchoes, urand(5000, 10000));
                    break;
                }
                case eEvents::Event_SummonDemonsEchoes:
                {
                    Position m_SpawnPos;
                    me->GetRandomNearPosition(m_SpawnPos, 5.0f);
                    uint8 l_RandomPath = urand(1, 3);

                    if (Creature* l_Creature = me->SummonCreature(m_DemonsEchoesArray[urand(0, 3)], m_SpawnPos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 5000))
                    {
                        l_Creature->SetReactState(ReactStates::REACT_PASSIVE);
                        l_Creature->SetWalk(false);
                        l_Creature->SetPhaseMask(0, true);
                        l_Creature->SetInPhase(8656, true, true);
                        l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_EchoePathEnd, m_DemonEchoeMovePos, true);
                    }

                m_Events.ScheduleEvent(eEvents::Event_SummonDemonsEchoes, 20000);
                break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_argus_echoes_summoner_middleAI(p_Creature);
        }
};

/// Argus Echoes Summoner Right - 1208752
class npc_argus_echoes_summoner_right : public CreatureScript
{
    public:
        npc_argus_echoes_summoner_right() : CreatureScript("npc_argus_echoes_summoner_right") { }

        struct npc_argus_echoes_summoner_rightAI : public ScriptedAI
        {
            npc_argus_echoes_summoner_rightAI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_RightEchoesFirst[23] =
            {
                { 5068.791f, 9739.107f, -76.57773f },
                { 5052.31f, 9754.974f, -76.658f },
                { 5046.894f, 9759.64f, -76.72983f },
                { 5043.288f, 9763.278f, -76.93701f },
                { 5038.516f, 9765.833f, -76.83465f },
                { 5035.688f, 9773.21f, -76.66507f },
                { 5033.126f, 9778.327f, -77.43332f },
                { 5020.431f, 9785.861f, -77.56729f },
                { 5016.931f, 9789.611f, -77.81729f },
                { 5012.431f, 9793.361f, -77.81729f },
                { 5007.431f, 9798.611f, -77.81729f },
                { 4989.278f, 9791.135f, -77.41418f },
                { 4970.659f, 9785.598f, -75.9846f },
                { 4962.464f, 9785.278f, -75.73026f },
                { 4955.951f, 9786.588f, -76.25092f },
                { 4945.792f, 9792.554f, -77.9421f },
                { 4937.21f, 9785.747f, -72.81987f },
                { 4935.007f, 9779.756f, -69.41653f },
                { 4933.037f, 9776.282f, -66.24496f },
                { 4927.12f, 9773.125f, -66.02309f },
                { 4920.783f, 9766.572f, -66.09929f },
                { 4908.705f, 9755.83f, -65.59342f },
                { 4887.791f, 9758.486f, -65.19855f }
            };

            G3D::Vector3 const Path_RightEchoesSecond[21] =
            {
                { 5066.492f, 9737.13f, -76.57158f },
                { 5051.25f, 9754.175f, -76.658f },
                { 5046.699f, 9759.482f, -76.72983f },
                { 5043.137f, 9763.077f, -76.93701f },
                { 5038.33f, 9765.665f, -76.83465f },
                { 5035.416f, 9772.953f, -76.68121f },
                { 5032.916f, 9778.203f, -77.43121f },
                { 5019.948f, 9784.986f, -77.56729f },
                { 5016.198f, 9788.736f, -77.81729f },
                { 5011.698f, 9792.236f, -77.81729f },
                { 5006.948f, 9796.736f, -77.81729f },
                { 4989.216f, 9790.93f, -77.42387f },
                { 4977.117f, 9790.639f, -76.86401f },
                { 4970.736f, 9785.473f, -76.0206f },
                { 4939.006f, 9784.6f, -72.35802f },
                { 4936.756f, 9779.1f, -69.35802f },
                { 4933.827f, 9775.418f, -66.17085f },
                { 4927.292f, 9773.172f, -66.17805f },
                { 4921.938f, 9765.759f, -65.97073f },
                { 4909.176f, 9754.701f, -65.64294f },
                { 4891.550781f, 9738.550781f, -64.043678f }
            };

            G3D::Vector3 const Path_RightEchoesThird[21] =
            {
                { 5066.297f, 9736.962f, -76.57158f },
                { 5051.103f, 9754.063f, -76.658f },
                { 5046.672f, 9759.46f, -76.72983f },
                { 5043.117f, 9763.049f, -76.93701f },
                { 5038.304f, 9765.642f, -76.83465f },
                { 5035.396f, 9773.07f, -76.68086f },
                { 5032.646f, 9778.07f, -77.43086f },
                { 5019.95f, 9784.719f, -77.56729f },
                { 5015.95f, 9788.469f, -77.81729f },
                { 5011.45f, 9792.219f, -77.81729f },
                { 5006.95f, 9796.469f, -77.81729f },
                { 4989.174f, 9790.862f, -77.42493f },
                { 4977.048f, 9790.564f, -76.86385f },
                { 4970.594f, 9785.402f, -76.02208f },
                { 4939.299f, 9784.518f, -72.35802f },
                { 4937.087f, 9778.906f, -69.17032f },
                { 4934.087f, 9775.156f, -66.17032f },
                { 4927.094f, 9773.049f, -66.18371f },
                { 4922.144f, 9765.711f, -65.87952f },
                { 4909.23f, 9754.508f, -65.64261f },
                { 4881.909180f, 9742.823242f, -65.217941f }
            };

            std::array<uint32, 7> m_CitizenEchoesArray =
            { {
                    120876,
                    120877,
                    120875,
                    119868,
                    119758,
                    119870,
                    120703
            } };

            std::array<uint32, 7> m_DemonsEchoesArray =
            { {
                    119866,
                    120603,
                    120836,
                    119864
            } };

            enum eEvents
            {
                Event_SummonCitizenEchoes = 1,
                Event_SummonDemonsEchoes = 2
            };

            enum ePoints
            {
                Point_EchoePathEnd = 1
            };

            EventMap m_Events;
            Position const m_DemonEchoeMovePos = { 5015.687988f, 9786.952148f, -78.095467f };

            void InitializeAI() override
            {
                m_Events.ScheduleEvent(eEvents::Event_SummonCitizenEchoes, urand(0, 10000));
                m_Events.ScheduleEvent(eEvents::Event_SummonDemonsEchoes, urand(0, 10000));
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                // Hack
                if (!me->SelectNearestPlayerNotGM(250.0f))
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SummonCitizenEchoes:
                {
                    uint8 l_EchoesCount = urand(1, 3);

                    for (uint8 l_Itr = 0; l_Itr < l_EchoesCount; l_Itr++)
                    {
                        Position m_SpawnPos;
                        me->GetRandomNearPosition(m_SpawnPos, 10.0f);
                        uint8 l_RandomPath = urand(1, 3);

                        if (Creature* l_Creature = me->SummonCreature(m_CitizenEchoesArray[urand(0, 6)], m_SpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0))
                        {
                            l_Creature->SetPhaseMask(0, true);
                            l_Creature->SetInPhase(8964, true, true);

                            l_Creature->AddDelayedEvent([l_Creature]() -> void
                            {
                                l_Creature->SendPlaySpellVisualKit(86627, 0, 0);
                            }, 500);

                            if (l_RandomPath == 1)
                            {
                                l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoePathEnd, Path_RightEchoesFirst, 23, false);
                            }
                            else if (l_RandomPath == 2)
                            {
                                l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoePathEnd, Path_RightEchoesSecond, 21, false);
                            }
                            else
                            {
                                l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoePathEnd, Path_RightEchoesThird, 21, false);
                            }
                        }
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SummonCitizenEchoes, urand(5000, 10000));
                    break;
                }
                case eEvents::Event_SummonDemonsEchoes:
                {
                    Position m_SpawnPos;
                    me->GetRandomNearPosition(m_SpawnPos, 5.0f);
                    uint8 l_RandomPath = urand(1, 3);

                    if (Creature* l_Creature = me->SummonCreature(m_DemonsEchoesArray[urand(0, 3)], m_SpawnPos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 5000))
                    {
                        l_Creature->SetReactState(ReactStates::REACT_PASSIVE);
                        l_Creature->SetWalk(false);
                        l_Creature->SetPhaseMask(0, true);
                        l_Creature->SetInPhase(8656, true, true);
                        l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_EchoePathEnd, m_DemonEchoeMovePos, true);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SummonDemonsEchoes, 20000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_argus_echoes_summoner_rightAI(p_Creature);
        }
};

/// Citizen Echoes - 120876, 120877, 120875, 119868, 119758, 119870, 120703
class npc_citizen_echoes : public CreatureScript
{
    public:
        npc_citizen_echoes() : CreatureScript("npc_citizen_echoes") { }

        struct npc_citizen_echoesAI : public ScriptedAI
        {
            npc_citizen_echoesAI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                me->DespawnOrUnsummon();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_citizen_echoesAI(p_Creature);
        }
};

/// Prophet Velen - 120533
class npc_prophet_velen_120533 : public CreatureScript
{
    public:
        npc_prophet_velen_120533() : CreatureScript("npc_prophet_velen_120533") { }

        struct npc_prophet_velen_120533AI : public ScriptedAI
        {
            npc_prophet_velen_120533AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_VelenToSigil[2] =
            {
                { 4669.925f, 9848.438f, 56.9445f },
                { 4663.076f, 9846.587f, 60.15622f }
            };

            G3D::Vector3 const Path_VelenToConsole[9] =
            {
                { 4662.213f, 9846.494f, 60.72344f },
                { 4670.213f, 9848.494f, 56.97344f },
                { 4682.713f, 9851.994f, 56.47344f },
                { 4695.963f, 9854.744f, 56.47344f },
                { 4711.463f, 9858.244f, 56.72344f },
                { 4722.213f, 9863.744f, 64.72344f },
                { 4728.463f, 9867.244f, 64.47344f },
                { 4731.351f, 9869.401f, 64.29066f },
                { 4732.351f, 9870.309f, 64.46181f }
            };

            G3D::Vector3 const Path_VelenFromBed[3] =
            {
                { 6189.842f, 9622.957f, -81.16367f },
                { 6188.592f, 9622.207f, -80.91367f },
                { 6187.046f, 9620.751f, -81.14557f }
            };

            G3D::Vector3 const Path_VelenWithTuralyon[9] =
            {
                { 6185.155f, 9620.496f, -80.80173f },
                { 6183.405f, 9620.496f, -80.80173f },
                { 6173.655f, 9618.496f, -80.80173f },
                { 6160.655f, 9616.996f, -80.55173f },
                { 6152.405f, 9615.996f, -83.55173f },
                { 6146.155f, 9614.996f, -83.55173f },
                { 6138.905f, 9613.746f, -83.30173f },
                { 6132.405f, 9613.246f, -80.55173f },
                { 6118.764f, 9611.241f, -80.49093f }
            };

            G3D::Vector3 const Path_VelenBeforeFight[4] =
            {
                { 6195.86f, 9953.965f, -22.69202f },
                { 6198.86f, 9950.965f, -22.94202f },
                { 6201.36f, 9947.965f, -24.19202f },
                { 6212.247f, 9934.892f, -25.57191f }
            };

            G3D::Vector3 const Path_VelenAfterFight[18] =
            {
                { 6243.099f, 9922.65f, -25.05605f },
                { 6246.099f, 9928.65f, -25.05605f },
                { 6262.452f, 9968.718f, -26.08189f },
                { 6261.452f, 9977.968f, -24.58189f },
                { 6253.202f, 9994.968f, -15.83189f },
                { 6248.202f, 10005.47f, -15.83189f },
                { 6245.452f, 10013.97f, -15.83189f },
                { 6241.452f, 10026.72f, -15.08189f },
                { 6237.952f, 10059.97f, -15.08189f },
                { 6243.952f, 10067.47f, -15.08189f },
                { 6246.702f, 10070.22f, -13.08189f },
                { 6250.702f, 10072.47f, -12.83189f },
                { 6262.702f, 10081.97f, -14.83189f },
                { 6276.452f, 10090.22f, -16.33189f },
                { 6283.702f, 10093.72f, -16.08189f },
                { 6294.202f, 10098.72f, -16.33189f },
                { 6300.952f, 10103.97f, -16.33189f },
                { 6306.428f, 10112.38f, -16.51042f }
            };

            enum eConversations
            {
                Conv_QuestKhazaduumFirstOfHisNameAccept = 5687,
                Conv_QuestKhazaduumFirstOfHisNameReward = 5706,
                Conv_VelenLosAfterMatrixActivated = 5709,
                Conv_DistributeOrders = 5250,
                Conv_VelenMoveToSigil = 5724,
                Conv_KiljaedenEvent = 5444,
                Conv_TalgathArriving = 5445,
                Conv_PreFightConversation = 5447,
                Conv_QuestShadowOfTheTriumvirateAccepted = 5465,
                Conv_PathAfterFightStarted = 5466
            };

            enum eQuests
            {
                Quest_KhazaduumFirstOfHisName = 46834,
                Quest_DefenselessAndAfraid = 46818,
                Quest_ConsecratingGround = 47066,
                Quest_ThePathForward = 46941,
                Quest_NotSoHumbleBeginnings = 47686,
                Quest_TheSigilOfAwakening = 48107,
                Quest_CustomQuestVelenMovedToConsole = 481070,
                Quest_FlankingManeuvers = 47853,
                Quest_TalgathsForces = 48345,
                Quest_CustomQuestKiljaedenEvent = 478530,
                Quest_WhatMightHaveBeen = 47855,
                Quest_AcrossTheUniverse = 47856,
                Quest_ShadowOfTheTriumvirate = 47416
            };

            enum eObjectives
            {
                Obj_VelenLosConversationHeard = 289947,
                Obj_CallDownALightforgedBeacon = 289885
            };

            enum eKillcredits
            {
                Killcredit_VelenLosConversationHeard = 289947,
                Killcredit_VelenPlacedBeacon = 122534,
                Killcredit_BeaconLand = 122538,
                Killcredit_TalkToVelenForScene = 120533,
                Killcredit_PreFightEvent = 2914480
            };

            enum eActions
            {
                Action_VelenMoveToBeacon = 1,
                Action_VelenDistributeOrders = 2,
                Action_VelenRewardSigilQuest = 3,
                Action_VelenFound = 4,
                Action_VelenStartPathWithTuralyon = 5,
                Action_TuralyonMoveWithVelenByVelen = 9,
                Action_TuralyonMoveBeforeFight = 10,
                Action_BaraatMoveBeforeFight = 11,
                Action_SorvosMoveBeforeFight = 12,
                Action_TelaamonMoveBeforeFight = 13,
                Action_TalgathMoveBeforeFight = 14,
                Action_VelenMoveBeforeFight = 15,
                Action_VelenStartFight = 16,
                Action_VelenMoveAfterFight = 17,
                Action_TuralyonMoveAfterFight = 18,
                Action_BaraatMoveAfterFight = 19,
                Action_SorvosMoveAfterFight = 20,
                Action_TelaamonMoveAfterFight = 21
            };

            enum eEvents
            {
                Event_MoveToBeacon = 1,
                Event_RemoveAnimKit = 2,
                Event_MoveToDefaultPos = 3,
                Event_SummonBeacon = 4,
                Event_SummonArmy = 5,
                Event_ThxForHelp = 6,
                Event_BeaconFinalKillcredit = 7,
                Event_DistributeOrders = 8,
                Event_MoveToSigil = 9,
                Event_MoveToConsole = 10,
                Event_SetBytes = 11,
                Event_StartPathFromBed = 12,
                Event_StartPathWithTuraalyon = 13,
                Event_StartBeforeFightPath = 14,
                Event_StartPreFightConversation = 15,
                Event_DespawnPreFightParty = 16,
                Event_StartTriumvirateConversation = 17,
                Event_StartPathAfterFight = 18,
                Event_StartPathConversation = 19
            };

            enum ePoints
            {
                Point_MoveTobeaconEnd = 1,
                Point_HomePointReached = 2,
                Point_ArmyOfTheLightAfterTeleport = 3,
                Point_ArmyOfTheLightAfterOrders = 4,
                Point_VelenToSigil = 5,
                Point_VelenToConsole = 6,
                Point_PathFromBedEnd = 7,
                Point_PathWithTuralyonEnd = 8,
                Point_EchoOfKiljaedenPathEnd = 9,
                Point_EchoOfTalgathPathEnd = 10,
                Point_PathBeforeFightEnd = 11,
                Point_PathAfterFightEnd = 12
            };

            enum eNpcs
            {
                Npc_Beacon = 122509,
                Npc_ArchmageYmera = 123413,
                Npc_GrandLectorEnaara = 123667,
                Npc_CaptainFareeya = 123668,
                Npc_BaraatTheLongshot = 123670,
                Npc_GrandVindicatorSorvos = 123669,
                Npc_BlademasterTelaamon = 123671,
                Npc_Turalyon = 124312,
                Npc_EchoOfKiljaeden = 126247,
                Npc_EchoOfTalgath = 126251,
                Npc_Talgath = 125233,
                Npc_ProphetVelen = 125239,
                Npc_TuralyonAfterTalgathDead = 125238
            };

            enum eSpells
            {
                Spell_BeamDown = 246866,
                Spell_VelenFlashbackSargerasAppearsToTheTriumvirate = 248615,
                Spell_TalkToVelenKillcredit = 248620,
                Spell_TaxiNodeProphetsReflection = 252195
            };

            std::vector<ObjectGuid> m_ArmyOfTheLightGuids;
            ObjectGuid m_SummonerGuid;
            EventMap m_Events;
            Position const m_MoveToBeaconPos = { 4981.43f, 9823.48f, -79.19628f };
            Position const m_MoveToHomePos = { 4974.518f, 9823.38f, -79.19628f };
            Position const m_BeaconSpawnPos = { 4983.302f, 9823.473f, -79.1373f };
            Position const m_ArchmageYmeraArrivalPos = { 4978.4f, 9831.21f, -79.2188f, 3.954695f};
            Position const m_GrandLectorEnaaraArrivalPos = { 4983.26f, 9813.78f, -79.2188f, 1.791377f };
            Position const m_CaptainFareeyaArrivalPos = { 4979.03f, 9815.74f, -79.2187f, 2.996474f };
            Position const m_BaraatTheLongshotArrivalPos = { 4988.12f, 9830.98f, -79.2187f, 3.651006f };
            Position const m_GrandVindicatorSorvosArrivalPos = { 4988.07f, 9815.7f, -79.2187f, 2.291201f };
            Position const m_BlademasterTelaamonArrivalPos = { 4983.2f, 9833.14f, -79.2189f, 4.018917f };
            Position const m_ArchmageYmeraSpawnPos = { 4979.297f, 9828.694f, -79.05515f, 3.954695f };
            Position const m_GrandLectorEnaaraSpawnPos = { 4980.363f, 9815.732f, -79.05541f, 1.791377f };
            Position const m_CaptainFareeyaSpawnPos = { 4977.753f, 9823.132f, -79.1383f, 2.996474f };
            Position const m_BaraatTheLongshotSpawnPos = { 4983.3f, 9828.533f, -79.13821f, 3.651006f };
            Position const m_GrandVindicatorSorvosSpawnPos = { 4981.537f, 9818.815f, -79.13817f, 2.291201f };
            Position const m_BlademasterTelaamonSpawnPos = { 4981.641f, 9832.217f, -79.05555f, 4.018917f };
            Position const m_TuralyonSpawnPos = { 6183.708f, 9618.71f, -81.04494f, 0.4830516f };
            Position const m_EchoOfKiljaedenSpawnPos = { 6181.718f, 9959.517f, -22.91702f, 0.781258f };
            Position const m_EchoOfTalgathSpawnPos = { 6186.809f, 9962.728f, -22.91701f, 3.668507f };
            Position const m_TuralyonBeforeFightSpawnPos = { 6191.674f, 9952.717f, -23.00039f, 5.521208f };
            Position const m_BaraatBeforeFightSpawnPos = { 6201.874f, 9945.217f, -25.2305f, 5.42375f };
            Position const m_SorvosBeforeFightSpawnPos = { 6227.557f, 9945.399f, -25.29737f, 5.040601f };
            Position const m_TelaamonBeforeFightSpawnPos = { 6201.041f, 9921.729f, -25.53908f, 5.849791f };
            Position const m_TalgathBeforeFightSpawnPos = { 6260.13f, 9884.79f, -25.2749f, 2.344034f };
            Position const m_VelenFightSpawnPos = { 6212.247f, 9934.892f, -25.49825f, 5.473873f };
            Position const m_TuralyonAfterFightSpawnPos = { 6232.19f, 9910.66f, -24.95653f, 5.794493f };
            Position const m_BaraatAfterFightSpawnPos = { 6232.31f, 9920.11f, -24.94373f, 5.026548f };
            Position const m_SorvosAfterFightSpawnPos = { 6226.06f, 9914.77f, -24.93293f, 5.8294f };
            Position const m_TelaamonAfterFightSpawnPos = { 6234.42f, 9921.2f, -24.94843f, 4.782202f };


            bool ArmyOfTheLightEventOccurred = false;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 p_Action) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();

                switch (p_Action)
                {
                case 1:
                {
                    p_Player->CastSpell(p_Player, eSpells::Spell_VelenFlashbackSargerasAppearsToTheTriumvirate, true);
                    p_Player->KilledMonsterCredit(eKillcredits::Killcredit_TalkToVelenForScene);
                    break;
                }
                case 2:
                {
                    p_Player->CastSpell(p_Player, eSpells::Spell_TalkToVelenKillcredit, true);

                    if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_ProphetVelen, m_VelenFightSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenStartFight);
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player || me->isSummon())
                    return;

                if (me->GetExactDist2d(l_Player) < 60.0f && l_Player->GetQuestStatus(eQuests::Quest_ConsecratingGround) == QUEST_STATUS_COMPLETE &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_VelenLosConversationHeard) == 0)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_VelenLosAfterMatrixActivated, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_VelenLosConversationHeard);
                }

                if (me->GetExactDist2d(l_Player) < 15.0f && !l_Player->IsQuestRewarded(eQuests::Quest_CustomQuestKiljaedenEvent) &&
                    me->ComputeLinkedId() == "F8F36A8A8102F3AA6DFE5BB3C880349C72A422F2")
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_EchoOfKiljaeden, m_EchoOfKiljaedenSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->DespawnOrUnsummon(19000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            G3D::Vector3 const Path_Kiljaeden[4] =
                            {
                                { 6179.879f, 9953.157f, -23.06384f },
                                { 6178.974f, 9948.208f, -23.06384f },
                                { 6178.774f, 9941.5f, -23.06384f },
                                { 6180.597f, 9934.147f, -23.06384f }
                            };

                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoOfKiljaedenPathEnd, Path_Kiljaeden, 4, true);
                        }, 9000);
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_EchoOfTalgath, m_EchoOfTalgathSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->SetAIAnimKitId(9729);
                        l_Creature->DespawnOrUnsummon(19000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SetAIAnimKitId(0);
                        }, 4000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->HandleEmoteCommand(EMOTE_ONESHOT_BOW);
                        }, 7000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            G3D::Vector3 const Path_Talgath[3] =
                            {
                                { 6179.729f, 9952.88f, -23.06384f },
                                { 6178.917f, 9946.133f, -23.06384f },
                                { 6179.118f, 9940.955f, -23.06384f }
                            };

                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_EchoOfTalgathPathEnd, Path_Talgath, 3, true);
                        }, 10000);

                    }

                    l_Player->AddDelayedEvent([l_Player]() -> void
                    {
                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_KiljaedenEvent, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }
                    }, 2000);

                    if (Quest const* l_Quest = sObjectMgr->GetQuestTemplate(eQuests::Quest_CustomQuestKiljaedenEvent))
                        l_Player->RewardQuest(l_Quest, 0, nullptr, false);
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_KhazaduumFirstOfHisName:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestKhazaduumFirstOfHisNameAccept, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eQuests::Quest_ThePathForward:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenMoveToBeacon);
                    }

                    break;
                }
                case eQuests::Quest_NotSoHumbleBeginnings:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 360000, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenDistributeOrders);
                    }

                    break;
                }
                case eQuests::Quest_TalgathsForces:
                {
                    if (p_Player->HasQuest(eQuests::Quest_FlankingManeuvers))
                    {
                        if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_Turalyon, m_TuralyonSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                        {
                            l_Creature->AI()->DoAction(eActions::Action_TuralyonMoveWithVelenByVelen);
                        }
                    }

                    break;
                }
                case eQuests::Quest_AcrossTheUniverse:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenMoveBeforeFight);
                    }

                    break;
                }
                case eQuests::Quest_ShadowOfTheTriumvirate:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_TuralyonAfterTalgathDead, m_TuralyonAfterFightSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TuralyonMoveAfterFight);
                    };

                    if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_BaraatTheLongshot, m_BaraatAfterFightSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_BaraatMoveAfterFight);
                    };

                    if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_GrandVindicatorSorvos, m_SorvosAfterFightSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_SorvosMoveAfterFight);
                    };

                    if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_BlademasterTelaamon, m_TelaamonAfterFightSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TelaamonMoveAfterFight);
                    };

                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenMoveAfterFight);
                    };

                    p_Player->CastSpell(p_Player, eSpells::Spell_TaxiNodeProphetsReflection, true);
                    break;
                }
                default:
                    break;
                }
            }

            void sQuestReward(Player* p_Player, Quest const* p_Quest, uint32 /*p_Option*/) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_KhazaduumFirstOfHisName:
                case eQuests::Quest_DefenselessAndAfraid:
                {
                    if (Quest const* l_Quest = sObjectMgr->GetQuestTemplate(eQuests::Quest_ConsecratingGround))
                    {
                        if (p_Player->CanTakeQuest(l_Quest, false))
                        {
                            if (Conversation* l_Conversation = new Conversation)
                            {
                                if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestKhazaduumFirstOfHisNameReward, p_Player, nullptr, p_Player->GetPosition()))
                                    delete l_Conversation;
                            }
                        }
                    }

                    break;
                }
                case eQuests::Quest_TheSigilOfAwakening:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenRewardSigilQuest);
                    }

                    break;
                }
                case eQuests::Quest_WhatMightHaveBeen:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TalgathArriving, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    p_Player->AddDelayedEvent([p_Player]() -> void
                    {
                        if (Creature* l_Creature = p_Player->FindNearestCreature(eNpcs::Npc_Turalyon, 50.0f, true))
                        {
                            l_Creature->AI()->Talk(1, p_Player->GetGUID());
                        }
                    }, 7000);

                    break;
                }
                default:
                    break;
                }
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_VelenMoveToBeacon:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_MoveToBeacon, 1000);
                    break;
                }
                case eActions::Action_VelenDistributeOrders:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_ArchmageYmera, m_ArchmageYmeraSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SendPlaySpellVisualKit(61570, 0, 0);
                            l_Creature->DespawnOrUnsummon();
                        }, 19000);
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_GrandLectorEnaara, m_GrandLectorEnaaraSpawnPos, TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 360000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->HandleEmoteCommand(EMOTE_ONESHOT_BOW);
                        }, 20000);
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_CaptainFareeya, m_CaptainFareeyaSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SetFacingTo(1.291544f);
                        }, 13000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SetFacingTo(5.148721f);
                        }, 17000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SetFacingTo(2.996474f);
                        }, 23000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            G3D::Vector3 const Path_Fareeya[12] =
                            {
                                { 4977.451f, 9817.606f, -79.19628f },
                                { 4980.126f, 9812.746f, -78.94628f },
                                { 4986.484f, 9809.469f, -78.94628f },
                                { 4992.245f, 9806.949f, -78.92786f },
                                { 4998.438f, 9803.646f, -79.15942f },
                                { 5001.542f, 9801.777f, -77.93752f },
                                { 5007.278f, 9796.516f, -77.70876f },
                                { 5009.528f, 9794.516f, -77.70876f },
                                { 5012.028f, 9792.266f, -78.45876f },
                                { 5014.778f, 9789.516f, -78.45876f },
                                { 5016.278f, 9788.516f, -77.70876f },
                                { 5019.786f, 9784.874f, -77.89923f }
                            };

                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_ArmyOfTheLightAfterOrders, Path_Fareeya, 12, true);
                        }, 26000);
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_BaraatTheLongshot, m_BaraatTheLongshotSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->HandleEmoteCommand(EMOTE_ONESHOT_SALUTE_NOSHEATH);
                        }, 23000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            G3D::Vector3 const Path_Baraat[9] =
                            {
                                { 4989.26f, 9825.507f, -79.19628f },
                                { 4992.006f, 9821.853f, -79.19628f },
                                { 4997.772f, 9809.228f, -79.19628f },
                                { 5000.878f, 9805.207f, -79.02336f },
                                { 5002.57f, 9803.119f, -77.93478f },
                                { 5009.222f, 9796.793f, -77.58269f },
                                { 5011.972f, 9794.293f, -77.83269f },
                                { 5015.722f, 9790.543f, -78.08269f },
                                { 5020.901f, 9785.626f, -77.89914f }
                            };

                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_ArmyOfTheLightAfterOrders, Path_Baraat, 9, true);
                        }, 27000);
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_GrandVindicatorSorvos, m_GrandVindicatorSorvosSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->HandleEmoteCommand(EMOTE_ONESHOT_SALUTE_NOSHEATH);
                        }, 23000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            G3D::Vector3 const Path_Sorvos[10] =
                            {
                                { 4985.331f, 9815.717f, -79.19628f },
                                { 4988.003f, 9813.323f, -79.19628f },
                                { 4991.202f, 9809.843f, -79.19628f },
                                { 4994.864f, 9806.353f, -79.19628f },
                                { 4998.621f, 9803.2f, -79.08977f },
                                { 5000.984f, 9799.598f, -77.7474f },
                                { 5005.05f, 9796.18f, -77.72286f },
                                { 5009.8f, 9791.93f, -77.72286f },
                                { 5012.05f, 9789.68f, -78.47286f },
                                { 5015.901f, 9786.051f, -77.99634f }
                            };

                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_ArmyOfTheLightAfterOrders, Path_Sorvos, 10, true);
                        }, 33000);
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_BlademasterTelaamon, m_BlademasterTelaamonSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->HandleEmoteCommand(EMOTE_ONESHOT_SALUTE_NOSHEATH);
                        }, 23000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            G3D::Vector3 const Path_Telaamon[12] =
                            {
                                { 4987.688f, 9831.599f, -79.19628f },
                                { 4990.647f, 9827.529f, -79.19628f },
                                { 4995.77f, 9820.067f, -79.19628f },
                                { 4997.991f, 9814.913f, -79.19628f },
                                { 5000.807f, 9808.944f, -79.19628f },
                                { 5002.08f, 9806.592f, -78.96094f },
                                { 5004.738f, 9802.423f, -77.67172f },
                                { 5010.935f, 9796.984f, -77.68676f },
                                { 5013.935f, 9794.234f, -78.43676f },
                                { 5015.935f, 9792.234f, -78.43676f },
                                { 5017.935f, 9790.484f, -77.93676f },
                                { 5020.405f, 9788.028f, -77.94772f }
                            };

                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_ArmyOfTheLightAfterOrders, Path_Telaamon, 12, true);
                        }, 26000);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_DistributeOrders, 3000);
                    break;
                }
                case eActions::Action_VelenRewardSigilQuest:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_MoveToSigil, 1000);
                    break;
                }
                case eActions::Action_VelenFound:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    me->SetUInt32Value(UNIT_FIELD_BYTES_1, 8);
                    m_Events.ScheduleEvent(eEvents::Event_SetBytes, 8000);
                    break;
                }
                case eActions::Action_VelenStartPathWithTuralyon:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathWithTuraalyon, 15000);
                    break;
                }
                case eActions::Action_VelenMoveBeforeFight:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Turalyon, m_TuralyonBeforeFightSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TuralyonMoveBeforeFight);
                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_BaraatTheLongshot, m_BaraatBeforeFightSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_BaraatMoveBeforeFight);
                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_BlademasterTelaamon, m_TelaamonBeforeFightSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TelaamonMoveBeforeFight);
                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_GrandVindicatorSorvos, m_SorvosBeforeFightSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_SorvosMoveBeforeFight);
                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Talgath, m_TalgathBeforeFightSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TalgathMoveBeforeFight);
                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_StartBeforeFightPath, 1000);
                    m_Events.ScheduleEvent(eEvents::Event_StartPreFightConversation, 2000);
                    break;
                }
                case eActions::Action_VelenMoveAfterFight:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_StartTriumvirateConversation, 3000);
                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_MoveTobeaconEnd:
                {
                    me->SetAIAnimKitId(4760);
                    m_Events.ScheduleEvent(eEvents::Event_RemoveAnimKit, 2000);
                    break;
                }
                case ePoints::Point_HomePointReached:
                {
                    me->SetFacingTo(6.176435f);
                    break;
                }
                case ePoints::Point_VelenToSigil:
                {
                    m_Events.ScheduleEvent(eEvents::Event_MoveToConsole, 11000);
                    break;
                }
                case ePoints::Point_VelenToConsole:
                {
                    me->SetFacingTo(0.1396263f);

                    if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                    {
                        if (Quest const* l_Quest = sObjectMgr->GetQuestTemplate(eQuests::Quest_CustomQuestVelenMovedToConsole))
                            l_Player->RewardQuest(l_Quest, 0, nullptr, false);
                    }

                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PathFromBedEnd:
                {
                    me->SetFacingTo(3.368485f);
                    break;
                }
                case ePoints::Point_PathWithTuralyonEnd:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PathBeforeFightEnd:
                {
                    m_Events.ScheduleEvent(eEvents::Event_DespawnPreFightParty, 12000);
                    break;
                }
                case ePoints::Point_PathAfterFightEnd:
                {
                    me->SendPlaySpellVisualKit(85644, 0, 0);
                    me->SendPlaySpellVisualKit(85596, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                if (l_Player->GetQuestObjectiveCounter(eObjectives::Obj_CallDownALightforgedBeacon) == 1 && !ArmyOfTheLightEventOccurred)
                {
                    m_Events.ScheduleEvent(eEvents::Event_SummonBeacon, 4000);
                    ArmyOfTheLightEventOccurred = true;
                }

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_MoveToBeacon:
                {
                    Talk(0, l_Player->GetGUID());
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_MoveTobeaconEnd, m_MoveToBeaconPos, true);
                    break;
                }
                case eEvents::Event_RemoveAnimKit:
                {
                    me->SetAIAnimKitId(4760);
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_VelenPlacedBeacon);
                    m_Events.ScheduleEvent(eEvents::Event_MoveToDefaultPos, 1000);
                    break;
                }
                case eEvents::Event_MoveToDefaultPos:
                {
                    me->SetAIAnimKitId(0);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_HomePointReached, m_MoveToHomePos, true);
                    break;
                }
                case eEvents::Event_SummonBeacon:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Beacon, m_BeaconSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->PlayOneShotAnimKitId(12994);
                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SummonArmy, 5000);
                    break;
                }
                case eEvents::Event_SummonArmy:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_ArchmageYmera, m_ArchmageYmeraArrivalPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);
                        l_Creature->CastSpell(l_Creature, eSpells::Spell_BeamDown, true);
                        l_Creature->SetWalk(true);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_ArmyOfTheLightAfterTeleport, 4979.297f, 9828.694f, -79.05515f, true);
                        }, 3000);

                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_GrandLectorEnaara, m_GrandLectorEnaaraArrivalPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->CastSpell(l_Creature, eSpells::Spell_BeamDown, true);
                        l_Creature->SetWalk(false);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_ArmyOfTheLightAfterTeleport, 4980.363f, 9815.732f, -79.05541f, true);
                        }, 3000);

                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_CaptainFareeya, m_CaptainFareeyaArrivalPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);
                        l_Creature->CastSpell(l_Creature, eSpells::Spell_BeamDown, true);
                        l_Creature->SetWalk(false);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_ArmyOfTheLightAfterTeleport, 4977.753f, 9823.132f, -79.1383f, true);
                        }, 2000);

                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_BaraatTheLongshot, m_BaraatTheLongshotArrivalPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->CastSpell(l_Creature, eSpells::Spell_BeamDown, true);
                        l_Creature->SetWalk(false);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_ArmyOfTheLightAfterTeleport, 4983.3f, 9828.533f, -79.13821f, true);
                        }, 3000);

                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_GrandVindicatorSorvos, m_GrandVindicatorSorvosArrivalPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->CastSpell(l_Creature, eSpells::Spell_BeamDown, true);
                        l_Creature->SetWalk(false);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_ArmyOfTheLightAfterTeleport, 4981.537f, 9818.815f, -79.13817f, true);
                        }, 3000);

                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_BlademasterTelaamon, m_BlademasterTelaamonArrivalPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->CastSpell(l_Creature, eSpells::Spell_BeamDown, true);
                        l_Creature->SetWalk(true);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_ArmyOfTheLightAfterTeleport, 4981.641f, 9832.217f, -79.05555f, true);
                        }, 4000);

                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    m_Events.ScheduleEvent(eEvents::Event_ThxForHelp, 8000);
                    break;
                }
                case eEvents::Event_ThxForHelp:
                {
                    Talk(1, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_BeaconFinalKillcredit, 3000);
                    break;
                }
                case eEvents::Event_BeaconFinalKillcredit:
                {
                    for (auto l_Itr : m_ArmyOfTheLightGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->DespawnOrUnsummon();
                        }
                    }

                    me->DespawnOrUnsummon();
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_BeaconLand);
                    break;
                }
                case eEvents::Event_DistributeOrders:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_DistributeOrders, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eEvents::Event_MoveToSigil:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_VelenMoveToSigil, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_VelenToSigil, Path_VelenToSigil, 2, true);
                    break;
                }
                case eEvents::Event_MoveToConsole:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_VelenToConsole, Path_VelenToConsole, 9, true);
                    break;
                }
                case eEvents::Event_SetBytes:
                {
                    me->SetUInt32Value(UNIT_FIELD_BYTES_1, 0);
                    me->SetFacingTo(3.316126f);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathFromBed, 1000);
                    break;
                }
                case eEvents::Event_StartPathFromBed:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathFromBedEnd, Path_VelenFromBed, 3, true);
                    break;
                }
                case eEvents::Event_StartPathWithTuraalyon:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathWithTuralyonEnd, Path_VelenWithTuralyon, 9, true);
                    break;
                }
                case eEvents::Event_StartBeforeFightPath:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathBeforeFightEnd, Path_VelenBeforeFight, 4, true);
                    break;
                }
                case eEvents::Event_StartPreFightConversation:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_PreFightConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eEvents::Event_DespawnPreFightParty:
                {
                    for (auto l_Itr : m_ArmyOfTheLightGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->DespawnOrUnsummon();
                        }
                    }

                    me->DespawnOrUnsummon();
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_PreFightEvent);
                    break;
                }
                case eEvents::Event_StartTriumvirateConversation:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestShadowOfTheTriumvirateAccepted, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterFight, 7000);
                    break;
                }
                case eEvents::Event_StartPathAfterFight:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterFightEnd, Path_VelenAfterFight, 18, true);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathConversation, 1000);
                    break;
                }
                case eEvents::Event_StartPathConversation:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_PathAfterFightStarted, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_prophet_velen_120533AI(p_Creature);
        }
};

/// Archmage Ymera - 123413
class npc_archmage_ymera_123413 : public CreatureScript
{
    public:
        npc_archmage_ymera_123413() : CreatureScript("npc_archmage_ymera_123413") { }

        struct npc_archmage_ymera_123413AI : public ScriptedAI
        {
            npc_archmage_ymera_123413AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum ePoints
            {
                Point_ArmyOfTheLightAfterTeleport = 3,
                Point_ConservatoryLeaveEnd = 4,
                Point_YmeraPathToBeaconEnd = 5,
                Point_YmeraPathOnVindicaarEnd = 6
            };

            enum eQuests
            {
                Quest_NotSoHumbleBeginnings = 47686,
                Quest_InvasiveSpecies = 47688,
                Quest_ConservationOfMagic = 47882,
                Quest_TheLongestVigil = 47883,
                Quest_TheSigilOfAwakening = 48107,
                Quest_PeerReview = 48105
            };

            enum eObjectives
            {
                Obj_YmeraLosLineHeardFirst = 4768600,
                Obj_YmeraLosLineHeardSecond = 2908940
            };

            enum eKillcredits
            {
                Killcredit_YmeraLosLineHeardFirst = 4768600,
                Killcredit_YmeraLosLineHeardSecond = 2908940,
                Killcredit_WakeTheGatekeeper = 124070,
                Killcredit_YmeraReachedVindicaar = 2915370
            };

            enum eConversations
            {
                Conv_QuoramActivated = 5345,
                Conv_YmeraLeaveConservatory = 5356
            };

            enum eActions
            {
                Action_YmeraStartJostling = 1,
                Action_YmeraLeaveConservatory = 2,
                Action_TeleportOnVindicaar = 3,
                Action_YmeraReachedVindicaar = 4
            };

            enum eNpcs
            {
                Npc_Crystal = 120693,
                Npc_Quiram = 124799,
                Npc_ActivatedQuoram = 124070
            };

            enum eSpells
            {
                Spell_ArcaneChanneling = 251074,
                Spell_TaxiNodeConservatoryOfTheArcane = 252192,
                Spell_AttuningCrystal = 254722
            };

            ObjectGuid m_SummonerGuid;
            std::vector<ObjectGuid> m_EventNpcGuids;
            Position const CristalSpawnPos = { 5525.545f, 9591.888f, -70.00551f, 1.565871f };
            Position const QuoramSpawnPos = { 5525.643f, 9590.849f, -75.10218f, 1.565871f };
            bool m_JostlingEvent = false;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_YmeraStartJostling:
                {
                    uint64 l_PlayerGuid = m_SummonerGuid;
                    m_JostlingEvent = true;

                    if (Creature* l_Crystal = l_Player->SummonCreature(eNpcs::Npc_Crystal, CristalSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        me->DelayedCastSpell(l_Crystal, eSpells::Spell_ArcaneChanneling, true, 2000);
                        m_EventNpcGuids.push_back(l_Crystal->GetGUID());
                    }

                    if (Creature* l_Quoram = l_Player->SummonCreature(eNpcs::Npc_Quiram, QuoramSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Quoram->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_SPELLCLICK);

                        l_Quoram->AddDelayedEvent([l_Quoram]() -> void
                        {
                            l_Quoram->SetAIAnimKitId(0);
                            l_Quoram->DespawnOrUnsummon(4000);
                        }, 2000);

                        l_Quoram->AddDelayedEvent([l_Quoram]() -> void
                        {
                            l_Quoram->RemoveFlag(UNIT_FIELD_FLAGS, 537166592);
                            l_Quoram->RemoveFlag(UNIT_FIELD_FLAGS_2, 33554433);
                            l_Quoram->RemoveFlag(UNIT_FIELD_FLAGS_3, 8192);
                        }, 5500);
                    }

                    me->AddDelayedEvent([this, l_PlayerGuid]() -> void
                    {
                        if (Player* l_Pl = ObjectAccessor::GetPlayer(*me, l_PlayerGuid))
                        {
                            if (Creature* l_Quoram = l_Pl->SummonCreature(eNpcs::Npc_ActivatedQuoram, QuoramSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Pl->GetGUID()))
                            {
                                l_Quoram->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);

                                l_Quoram->AddDelayedEvent([l_Quoram, l_PlayerGuid]() -> void
                                {
                                    if (Player* l_Pla = ObjectAccessor::GetPlayer(*l_Quoram, l_PlayerGuid))
                                        l_Pla->KilledMonsterCredit(eKillcredits::Killcredit_WakeTheGatekeeper);

                                    l_Quoram->SetFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
                                }, 26000);

                                m_EventNpcGuids.push_back(l_Quoram->GetGUID());
                            }

                            if (Conversation* l_Conversation = new Conversation)
                            {
                                if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuoramActivated, l_Pl, nullptr, l_Pl->GetPosition()))
                                    delete l_Conversation;
                            }
                        }

                        me->CastStop();
                    }, 7000);

                    break;
                }
                case eActions::Action_YmeraLeaveConservatory:
                {
                    uint64 l_PlayerGuid = m_SummonerGuid;

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);

                    l_Player->AddDelayedEvent([l_Player]() -> void
                    {
                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_YmeraLeaveConservatory, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }
                    }, 3000);

                    me->AddDelayedEvent([this, l_PlayerGuid]() -> void
                    {
                        if (Player* l_Pl = ObjectAccessor::GetPlayer(*me, l_PlayerGuid))
                            me->SetFacingToObject(l_Pl);
                    }, 10000);

                    me->AddDelayedEvent([this]() -> void
                    {
                        me->HandleEmoteCommand(EMOTE_ONESHOT_SALUTE);
                    }, 18000);

                    me->AddDelayedEvent([this]() -> void
                    {
                        me->GetMotionMaster()->MovePoint(ePoints::Point_ConservatoryLeaveEnd, 5524.588f, 9636.811f, -81.7714f, true);
                    }, 22000);

                    break;
                }
                case eActions::Action_TeleportOnVindicaar:
                {
                    uint64 l_PlayerGuid = m_SummonerGuid;

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);

                    me->AddDelayedEvent([this, l_PlayerGuid]() -> void
                    {
                        if (Player* l_Pl = ObjectAccessor::GetPlayer(*me, l_PlayerGuid))
                            Talk(5, l_PlayerGuid);
                    }, 3000);

                    me->AddDelayedEvent([this]() -> void
                    {
                        G3D::Vector3 const Path_Ymera[5] =
                        {
                            { 5759.874f, 9487.717f, -66.80151f },
                            { 5759.941f, 9490.182f, -67.07265f },
                            { 5759.874f, 9492.705f, -67.07265f },
                            { 5761.542f, 9494.56f, -67.07265f },
                            { 5765.043f, 9494.135f, -67.07265f }
                        };
                        me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_YmeraPathToBeaconEnd, Path_Ymera, 5, true);
                    }, 5000);

                    break;
                }
                case eActions::Action_YmeraReachedVindicaar:
                {
                    me->AddDelayedEvent([this]() -> void
                    {
                        me->SendPlaySpellVisualKit(84441, 0, 0);
                        me->SendPlaySpellVisualKit(85496, 0, 0);
                    }, 500);

                    me->AddDelayedEvent([this]() -> void
                    {
                        G3D::Vector3 const Path_Ymera[23] =
                        {
                            { 4604.09f, 9829.056f, 68.75423f },
                            { 4605.84f, 9830.306f, 68.50423f },
                            { 4607.34f, 9831.306f, 68.50423f },
                            { 4608.59f, 9831.806f, 68.75423f },
                            { 4609.84f, 9832.806f, 69.00423f },
                            { 4613.84f, 9834.056f, 70.25423f },
                            { 4616.59f, 9834.806f, 71.25423f },
                            { 4617.491f, 9835.062f, 71.44645f },
                            { 4619.381f, 9835.969f, 71.78595f },
                            { 4620.881f, 9836.469f, 71.78595f },
                            { 4622.631f, 9836.969f, 72.03595f },
                            { 4623.881f, 9837.719f, 71.53595f },
                            { 4626.631f, 9838.969f, 71.53595f },
                            { 4627.116f, 9839.095f, 71.41147f },
                            { 4628.135f, 9840.212f, 71.67389f },
                            { 4629.885f, 9841.712f, 71.67389f },
                            { 4630.885f, 9844.712f, 71.67389f },
                            { 4631.049f, 9845.811f, 71.35755f },
                            { 4630.769f, 9847.559f, 71.56146f },
                            { 4630.519f, 9849.809f, 71.56146f },
                            { 4629.032f, 9853.674f, 71.21146f },
                            { 4627.082f, 9856.326f, 71.46146f },
                            { 4625.632f, 9857.979f, 71.21146f }
                        };

                        me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_YmeraPathOnVindicaarEnd, Path_Ymera, 23, false);
                    }, 2000);

                    break;
                }
                default:
                    break;
                }
            }

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player || me->isSummon())
                    return;

                if (me->GetExactDist2d(l_Player) < 15.0f && l_Player->HasQuest(eQuests::Quest_NotSoHumbleBeginnings) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_YmeraLosLineHeardFirst) == 0)
                {
                    Talk(0, l_Player->GetGUID());
                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_YmeraLosLineHeardFirst);
                }

                if (me->GetExactDist2d(l_Player) < 15.0f && l_Player->GetQuestStatus(eQuests::Quest_InvasiveSpecies) == QUEST_STATUS_COMPLETE &&
                    l_Player->GetQuestStatus(eQuests::Quest_ConservationOfMagic) == QUEST_STATUS_COMPLETE &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_YmeraLosLineHeardSecond) == 0)
                {
                    Talk(2, l_Player->GetGUID());
                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_YmeraLosLineHeardSecond);
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_TheLongestVigil:
                {
                    Talk(3, p_Player->GetGUID());
                    break;
                }
                case eQuests::Quest_TheSigilOfAwakening:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TeleportOnVindicaar);
                    }

                    p_Player->CastSpell(p_Player, eSpells::Spell_TaxiNodeConservatoryOfTheArcane, true);
                    break;
                }
                default:
                    break;
                }
            }

            void sQuestReward(Player* p_Player, Quest const* p_Quest, uint32 /*p_Option*/) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_NotSoHumbleBeginnings:
                {
                    Talk(1, p_Player->GetGUID());
                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_PointId)
                {
                case ePoints::Point_ArmyOfTheLightAfterTeleport:
                {
                    me->SetFacingTo(3.954695f);
                    me->HandleEmoteCommand(EMOTE_ONESHOT_SALUTE_NOSHEATH);
                    break;
                }
                case ePoints::Point_ConservatoryLeaveEnd:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_YmeraPathToBeaconEnd:
                {
                    me->SendPlaySpellVisualKit(85644, 0, 0);
                    me->SendPlaySpellVisualKit(85596, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_YmeraPathOnVindicaarEnd:
                {
                    me->SetFacingTo(5.830118f);
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_YmeraReachedVindicaar);
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }

            void sGossipHello(Player* p_Player) override
            {
                if (p_Player->HasQuest(Quest_PeerReview))
                {
                    p_Player->PrepareGossipMenu(me, 21696, true);
                    p_Player->SendPreparedGossip(me);
                }
            }

            void sGossipSelect(Player* p_Player, uint32 p_Sender, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();

                if (p_Sender == 21696)
                {
                    p_Player->CastSpell(p_Player, eSpells::Spell_AttuningCrystal, true);
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                if ((l_Player->GetQuestStatus(eQuests::Quest_TheLongestVigil) == QUEST_STATUS_COMPLETE ||
                    !l_Player->HasQuest(eQuests::Quest_TheLongestVigil)) && m_JostlingEvent)
                {
                    for (auto l_Itr : m_EventNpcGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->DespawnOrUnsummon();
                        }
                    }

                    me->DespawnOrUnsummon();
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_archmage_ymera_123413AI(p_Creature);
        }
};

/// Grand Lector Enaara - 123667
class npc_grand_lector_enaara_123667 : public CreatureScript
{
    public:
        npc_grand_lector_enaara_123667() : CreatureScript("npc_grand_lector_enaara_123667") { }

        struct npc_grand_lector_enaara_123667AI : public ScriptedAI
        {
            npc_grand_lector_enaara_123667AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum ePoints
            {
                Point_ArmyOfTheLightAfterTeleport = 3
            };

            enum eSpells
            {
                Spell_CreateCrystalAndKillCredit = 247137
            };

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();
                p_Player->CastSpell(p_Player, eSpells::Spell_CreateCrystalAndKillCredit, true);
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_ArmyOfTheLightAfterTeleport:
                {
                    me->SetFacingTo(1.791377f);
                    me->HandleEmoteCommand(EMOTE_ONESHOT_SALUTE_NOSHEATH);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_grand_lector_enaara_123667AI(p_Creature);
        }
};

/// Captain Fareeya - 123668
class npc_captain_fareeya_123668 : public CreatureScript
{
    public:
        npc_captain_fareeya_123668() : CreatureScript("npc_captain_fareeya_123668") { }

        struct npc_captain_fareeya_123668AI : public ScriptedAI
        {
            npc_captain_fareeya_123668AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum ePoints
            {
                Point_ArmyOfTheLightAfterTeleport = 3,
                Point_ArmyOfTheLightAfterOrders = 4
            };

            enum eActions
            {
                Action_TuralyonTeleportedOnConservatory = 2
            };

            enum eQuests
            {
                Quest_WeHaveAProblem = 48344
            };

            enum eKillcredits
            {
                Killcredit_TravelToTheConservatoryOfTheArcane = 126224
            };

            enum eObjectives
            {
                Obj_TravelToTheConservatoryOfTheArcane = 292207
            };

            enum eNpcs
            {
                Npc_Turalyon = 124312
            };

            ObjectGuid m_SummonerGuid;
            Position const m_TuralyonSpawnPos = { 5763.49f, 9498.14f, -67.1971f, 1.077823f };

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) < 15.0f && l_Player->HasQuest(eQuests::Quest_WeHaveAProblem) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_TravelToTheConservatoryOfTheArcane) == 0)
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Turalyon, m_TuralyonSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TuralyonTeleportedOnConservatory);
                    }

                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_TravelToTheConservatoryOfTheArcane);
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_PointId)
                {
                case ePoints::Point_ArmyOfTheLightAfterTeleport:
                {
                    me->SetFacingTo(2.996474f);
                    me->HandleEmoteCommand(EMOTE_ONESHOT_SALUTE_NOSHEATH);
                    Talk(0, l_Player->GetGUID());
                    break;
                }
                case ePoints::Point_ArmyOfTheLightAfterOrders:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_captain_fareeya_123668AI(p_Creature);
        }
};

/// Baraat the Longshot - 123670
class npc_baraat_the_longshot_123670 : public CreatureScript
{
    public:
        npc_baraat_the_longshot_123670() : CreatureScript("npc_baraat_the_longshot_123670") { }

        struct npc_baraat_the_longshot_123670AI : public ScriptedAI
        {
            npc_baraat_the_longshot_123670AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_BaraatAfterOrder[9] =
            {
                { 5870.337f, 9762.709f, -72.18397f },
                { 5857.057f, 9758.613f, -72.21048f },
                { 5859.807f, 9761.113f, -71.96048f },
                { 5861.557f, 9762.363f, -71.96048f },
                { 5865.557f, 9763.363f, -71.96048f },
                { 5866.557f, 9763.113f, -71.96048f },
                { 5869.557f, 9762.863f, -71.96048f },
                { 5875.137f, 9760.961f, -71.84662f },
                { 5880.709f, 9756.585f, -72.04728f }
            };

            G3D::Vector3 const Path_BaraatAfterJump[6] =
            {
                { 5893.725f, 9741.619f, -72.59917f },
                { 5895.725f, 9738.619f, -73.09917f },
                { 5894.975f, 9735.869f, -73.59917f },
                { 5894.975f, 9732.369f, -74.34917f },
                { 5894.975f, 9730.369f, -74.84917f },
                { 5894.91f, 9728.77f, -75.44853f }
            };

            G3D::Vector3 const Path_BaraatWithTuralyon[18] =
            {
                { 6166.272f, 9621.365f, -80.90038f },
                { 6164.803f, 9620.033f, -80.72931f },
                { 6158.803f, 9618.223f, -81.35504f },
                { 6157.553f, 9618.223f, -82.35504f },
                { 6155.303f, 9617.973f, -82.60504f },
                { 6153.053f, 9617.973f, -83.60504f },
                { 6152.436f, 9617.714f, -83.49846f },
                { 6150.686f, 9617.214f, -83.74846f },
                { 6145.936f, 9616.464f, -83.49846f },
                { 6143.686f, 9616.214f, -83.49846f },
                { 6141.186f, 9615.714f, -83.24846f },
                { 6139.186f, 9615.464f, -83.49846f },
                { 6137.172f, 9614.852f, -82.65496f },
                { 6134.172f, 9614.352f, -81.40496f },
                { 6130.28f, 9613.494f, -80.41172f },
                { 6129.03f, 9613.244f, -79.91172f },
                { 6127.03f, 9613.244f, -80.41172f },
                { 6122.53f, 9612.494f, -80.41172f }
            };

            G3D::Vector3 const Path_BaraatBeforeFight[3] =
            {
                { 6203.53f, 9944.296f, -25.26716f },
                { 6213.688f, 9938.375f, -25.38715f },
                { 6215.542f, 9937.2f, -25.66431f }
            };

            G3D::Vector3 const Path_BaraatAfterFight[17] =
            {
                { 6239.617f, 9927.518f, -24.97707f },
                { 6246.617f, 9940.018f, -24.72707f },
                { 6258.867f, 9965.518f, -26.22707f },
                { 6260.867f, 9977.518f, -24.47707f },
                { 6249.617f, 9992.018f, -15.97707f },
                { 6240.367f, 10004.27f, -15.72707f },
                { 6235.867f, 10015.02f, -15.47707f },
                { 6233.617f, 10026.02f, -15.22707f },
                { 6232.617f, 10045.52f, -15.22707f },
                { 6236.617f, 10061.77f, -15.22707f },
                { 6244.617f, 10071.02f, -14.97707f },
                { 6247.117f, 10072.77f, -12.97707f },
                { 6250.867f, 10074.77f, -12.97707f },
                { 6261.367f, 10084.02f, -14.97707f },
                { 6275.117f, 10091.02f, -16.22707f },
                { 6294.117f, 10099.52f, -16.22707f },
                { 6302.424f, 10112.43f, -16.51042f }
            };

            G3D::Vector3 const Path_BaraatAfterTeleportOnVindicaar[9] =
            {
                { 4604.479f, 9839.246f, 68.59985f },
                { 4608.229f, 9836.496f, 68.59985f },
                { 4614.229f, 9837.496f, 70.34985f },
                { 4621.437f, 9839.143f, 71.62339f },
                { 4622.176f, 9840.963f, 71.66743f },
                { 4623.176f, 9843.963f, 72.16743f },
                { 4625.176f, 9850.963f, 71.66743f },
                { 4626.426f, 9853.963f, 71.41743f },
                { 4626.915f, 9855.782f, 71.21146f }
            };

            enum ePoints
            {
                Point_ArmyOfTheLightAfterTeleport = 3,
                Point_ArmyOfTheLightAfterOrders = 4,
                Point_PathAfterOrderEnd = 5,
                Point_JumpEnd = 6,
                Point_PathAfterJumpEnd = 7,
                Point_PathWithTuralyonEnd = 8,
                Point_TalgathiIncineratorMoveEnd = 9,
                Point_BeforeFightPathEnd = 10,
                Point_PathAfterFightEnd = 11,
                Point_PathAfterTeleportOnVindicaarEnd = 12
            };

            enum eActions
            {
                Action_BaraatMoveAfterOrder = 1,
                Action_BaraatMoveWithTuralyon = 7,
                Action_BaraatMoveBeforeFight = 11,
                Action_BaraatMoveAfterFight = 19,
                Action_BaraatMoveAfterTeleportOnVindicaar = 27
            };

            enum eKillcredits
            {
                Killcredit_OrdersGivenToBaraat = 123670
            };

            enum eEvents
            {
                Event_SetFacing = 1,
                Event_SayFirstLine = 2,
                Event_StartPathAfterOrder = 3,
                Event_TuralyonPathSetFacing = 4,
                Event_Emote = 5,
                Event_StartPathWithTuralyon = 6,
                Event_SummonIncinerators = 7,
                Event_StartBeforeFightPath = 8,
                Event_StartPathAfterFight = 9,
                Event_StartPathAfterTeleportOnVindicaar = 10
            };

            enum eSpells
            {
                Spell_CosmeticCamouflageState = 155632,
                Spell_Shoot = 253332
            };

            enum eNpcs
            {
                Npc_TalgathiIncinerator = 125190
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void MoveInLineOfSight(Unit* p_Who) override
            {
                if (p_Who->ToCreature() && p_Who->GetEntry() == eNpcs::Npc_TalgathiIncinerator && me->GetExactDist2d(p_Who) < 20.0f &&
                    !me->isSummon())
                {
                    DoCast(p_Who, eSpells::Spell_Shoot, true);
                }
            }

            void InitializeAI() override
            {
                if (me->HasInPhaseList(9628))
                    m_Events.ScheduleEvent(eEvents::Event_SummonIncinerators, 5000);
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_ArmyOfTheLightAfterTeleport:
                {
                    me->HandleEmoteCommand(EMOTE_ONESHOT_SALUTE_NOSHEATH);
                    break;
                }
                case ePoints::Point_ArmyOfTheLightAfterOrders:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PathAfterOrderEnd:
                {
                    me->GetMotionMaster()->MoveJump(5890.04f, 9747.47f, -72.2498f, 10.0f, 10.0f, 0.0f, ePoints::Point_JumpEnd);
                    break;
                }
                case ePoints::Point_JumpEnd:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterJumpEnd, Path_BaraatAfterJump, 6, false);
                    break;
                }
                case ePoints::Point_PathAfterJumpEnd:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PathWithTuralyonEnd:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_BeforeFightPathEnd:
                {
                    me->SetFacingTo(5.427974f);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 376);
                    break;
                }
                case ePoints::Point_PathAfterFightEnd:
                {
                    me->SendPlaySpellVisualKit(85644, 0, 0);
                    me->SendPlaySpellVisualKit(85596, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PathAfterTeleportOnVindicaarEnd:
                {
                    me->SetFacingTo(1.576816f);
                    break;
                }
                default:
                    break;
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();
                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_OrdersGivenToBaraat);

                if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_BaraatMoveAfterOrder);
                }
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_BaraatMoveAfterOrder:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    DoCast(eSpells::Spell_CosmeticCamouflageState, true);
                    me->SetAIAnimKitId(13602);
                    m_Events.ScheduleEvent(eEvents::Event_SetFacing, 2000);
                    break;
                }
                case eActions::Action_BaraatMoveWithTuralyon:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    m_Events.ScheduleEvent(eEvents::Event_TuralyonPathSetFacing, 10000);
                    break;
                }
                case eActions::Action_BaraatMoveBeforeFight:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 376);
                    m_Events.ScheduleEvent(eEvents::Event_StartBeforeFightPath, 1000);
                    break;
                }
                case eActions::Action_BaraatMoveAfterFight:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterFight, 13000);
                    break;
                }
                case eActions::Action_BaraatMoveAfterTeleportOnVindicaar:
                {
                    me->AddDelayedEvent([this]() -> void
                    {
                        me->SendPlaySpellVisualKit(85496, 0, 0);
                    }, 500);

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterTeleportOnVindicaar, 2000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SetFacing:
                {
                    me->RemoveAura(eSpells::Spell_CosmeticCamouflageState);
                    me->SetAIAnimKitId(0);

                    if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                    {
                        me->SetFacingToObject(l_Player);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SayFirstLine, 1000);
                    break;
                }
                case eEvents::Event_SayFirstLine:
                {
                    if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                        Talk(0, l_Player->GetGUID());

                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterOrder, 5000);
                    break;
                }
                case eEvents::Event_StartPathAfterOrder:
                {
                    DoCast(eSpells::Spell_CosmeticCamouflageState, true);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterOrderEnd, Path_BaraatAfterOrder, 9, false);
                    break;
                }
                case eEvents::Event_TuralyonPathSetFacing:
                {
                    me->SetFacingTo(6.056293f);
                    m_Events.ScheduleEvent(eEvents::Event_Emote, 2000);
                    break;
                }
                case eEvents::Event_Emote:
                {
                    me->HandleEmoteCommand(EMOTE_ONESHOT_SALUTE);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathWithTuralyon, 18000);
                    break;
                }
                case eEvents::Event_StartPathWithTuralyon:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathWithTuralyonEnd, Path_BaraatWithTuralyon, 18, true);
                    break;
                }
                case eEvents::Event_SummonIncinerators:
                {
                    uint8 l_Count = urand(1, 3);

                    std::array<Position const, 6> m_TalgathiIncineratorsSpawnPos =
                    { {
                        { 6242.211f, 9880.255f, -8.845211f, 2.20233f },
                        { 6263.73f, 9890.989f, -13.01407f, 2.436593f },
                        { 6280.067f, 9828.501f, 0.04928041f, 2.20233f },
                        { 6318.025f, 9868.767f, -6.696726f, 2.551739f },
                        { 6238.613f, 9833.523f, -5.835506f, 1.973439f },
                        { 6269.678711f, 9874.832031f, -5.835506f, 2.317887f }
                    } };

                    for (uint8 l_Itr = 0; l_Itr < l_Count; l_Itr++)
                    {
                        if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_TalgathiIncinerator, m_TalgathiIncineratorsSpawnPos[urand(0, 5)], TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 5000))
                        {
                            l_Creature->SetPhaseMask(0, false);
                            l_Creature->SetInPhase(9628, false, true);
                            l_Creature->SetReactState(ReactStates::REACT_PASSIVE);
                            l_Creature->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_TalgathiIncineratorMoveEnd, me->GetPosition());
                        }
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SummonIncinerators, urand(20000, 30000));
                    break;
                }
                case eEvents::Event_StartBeforeFightPath:
                {
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_BeforeFightPathEnd, Path_BaraatBeforeFight, 3, true);
                    break;
                }
                case eEvents::Event_StartPathAfterFight:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterFightEnd, Path_BaraatAfterFight, 17, true);
                    break;
                }
                case eEvents::Event_StartPathAfterTeleportOnVindicaar:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterTeleportOnVindicaarEnd, Path_BaraatAfterTeleportOnVindicaar, 9, true);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_baraat_the_longshot_123670AI(p_Creature);
        }
};

/// Grand Vindicator Sorvos - 123669
class npc_grand_vindicator_sorvos_123669 : public CreatureScript
{
    public:
        npc_grand_vindicator_sorvos_123669() : CreatureScript("npc_grand_vindicator_sorvos_123669") { }

        struct npc_grand_vindicator_sorvos_123669AI : public ScriptedAI
        {
            npc_grand_vindicator_sorvos_123669AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_SorvosAfterOrder[7] =
            {
                { 6046.35f, 9794.783f, -67.76968f },
                { 6046.35f, 9791.033f, -67.51968f },
                { 6046.35f, 9789.783f, -67.51968f },
                { 6046.35f, 9785.533f, -67.51968f },
                { 6046.35f, 9783.783f, -67.51968f },
                { 6046.2f, 9780.364f, -68.11005f },
                { 6045.973f, 9779.618f, -68.33534f }
            };

            G3D::Vector3 const Path_SorvosWithTuralyon[21] =
            {
                { 6178.193f, 9613.498f, -80.7762f },
                { 6173.107f, 9615.209f, -80.50276f },
                { 6168.151f, 9615.877f, -80.58566f },
                { 6165.651f, 9615.877f, -80.58566f },
                { 6163.99f, 9615.928f, -80.35655f },
                { 6159.085f, 9615.227f, -81.45877f },
                { 6157.585f, 9614.977f, -81.95877f },
                { 6155.335f, 9614.727f, -82.45877f },
                { 6153.835f, 9614.477f, -83.20877f },
                { 6151.428f, 9613.945f, -83.63177f },
                { 6149.928f, 9613.945f, -83.38177f },
                { 6143.428f, 9613.445f, -83.38177f },
                { 6140.428f, 9613.195f, -83.38177f },
                { 6137.027f, 9612.733f, -82.16475f },
                { 6135.027f, 9612.733f, -81.41475f },
                { 6133.777f, 9612.483f, -80.66475f },
                { 6130.539f, 9611.873f, -80.2849f },
                { 6128.789f, 9611.623f, -80.0349f },
                { 6126.789f, 9611.373f, -80.2849f },
                { 6123.789f, 9611.373f, -80.2849f },
                { 6119.789f, 9610.873f, -80.2849f }
            };

            G3D::Vector3 const Path_SorvosBeforeFight[3] =
            {
                { 6226.479f, 9943.471f, -25.22247f },
                { 6221.401f, 9939.543f, -25.7309f },
                { 6218.75f, 9939.583f, -25.53931f }
            };

            G3D::Vector3 const Path_SorvosAfterTeleportOnVindicaar[11] =
            {
                { 4602.096f, 9834.428f, 68.59172f },
                { 4607.346f, 9834.178f, 68.59172f },
                { 4609.346f, 9834.178f, 68.59172f },
                { 4619.096f, 9835.928f, 71.59172f },
                { 4622.413f, 9836.685f, 71.62334f },
                { 4623.3f, 9838.781f, 71.6674f },
                { 4624.3f, 9841.281f, 71.6674f },
                { 4625.05f, 9843.281f, 71.6674f },
                { 4626.8f, 9849.281f, 71.6674f },
                { 4628.05f, 9852.281f, 71.4174f },
                { 4629.188f, 9855.879f, 71.21146f }
            };

            G3D::Vector3 const Path_SorvosAfterFight[18] =
            {
                { 6250.487f, 9940.086f, -24.72167f },
            { 6262.987f, 9965.086f, -26.22167f },
            { 6263.987f, 9980.086f, -24.47167f },
            { 6252.237f, 9994.086f, -15.97167f },
            { 6242.237f, 10006.59f, -15.72167f },
            { 6238.237f, 10016.09f, -15.47167f },
            { 6236.237f, 10026.34f, -15.22167f },
            { 6234.737f, 10046.34f, -15.22167f },
            { 6237.987f, 10059.59f, -15.22167f },
            { 6244.237f, 10067.59f, -14.97167f },
            { 6246.487f, 10070.09f, -12.97167f },
            { 6250.987f, 10072.34f, -12.97167f },
            { 6262.487f, 10081.59f, -14.97167f },
            { 6274.987f, 10087.34f, -16.22167f },
            { 6289.237f, 10089.34f, -16.22167f },
            { 6298.737f, 10093.09f, -16.22167f },
            { 6306.487f, 10102.59f, -16.22167f },
            { 6310.915f, 10111.4f, -16.51042f }
            };

            enum ePoints
            {
                Point_ArmyOfTheLightAfterTeleport = 3,
                Point_ArmyOfTheLightAfterOrders = 4,
                Point_PathAfterOrderEnd = 5,
                Point_PathWithTuralyonEnd = 6,
                Point_PathBeforeFightEnd = 7,
                Point_PathAfterFightEnd = 8,
                Point_PathAfterTeleportOnVindicaarEnd = 9
            };

            enum eActions
            {
                Action_SorvosMoveAfterOrder = 1,
                Action_SorvosMoveWithTuralyon = 6,
                Action_SorvosMoveBeforeFight = 12,
                Action_SorvosMoveAfterFight = 20,
                Action_SorvosMoveAfterTeleportOnVindicaar = 28
            };

            enum eKillcredits
            {
                Killcredit_OrdersGivenToSorvos = 123669
            };

            enum eEvents
            {
                Event_SayFirstLine = 1,
                Event_StartPathAfterOrder = 2,
                Event_SetFacing = 3,
                Event_Emote = 4,
                Event_StartPathWithTuralyon = 5,
                Event_StartPathBeforeFight = 6,
                Event_StartPathAfterFight = 7,
                Event_StartPathAfterTeleportOnVindicaar = 8
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_ArmyOfTheLightAfterTeleport:
                {
                    me->SetFacingTo(2.291201f);
                    me->HandleEmoteCommand(EMOTE_ONESHOT_SALUTE_NOSHEATH);
                    break;
                }
                case ePoints::Point_ArmyOfTheLightAfterOrders:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PathAfterOrderEnd:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PathWithTuralyonEnd:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PathBeforeFightEnd:
                {
                    me->SetFacingTo(5.044002f);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 333);
                    break;
                }
                case ePoints::Point_PathAfterFightEnd:
                {
                    me->SendPlaySpellVisualKit(85644, 0, 0);
                    me->SendPlaySpellVisualKit(85596, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PathAfterTeleportOnVindicaarEnd:
                {
                    me->SetFacingTo(2.114374f);
                    break;
                }
                default:
                    break;
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();
                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_OrdersGivenToSorvos);

                if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_SorvosMoveAfterOrder);
                }
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_SorvosMoveAfterOrder:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    m_Events.ScheduleEvent(eEvents::Event_SayFirstLine, 1000);
                    break;
                }
                case eActions::Action_SorvosMoveWithTuralyon:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    m_Events.ScheduleEvent(eEvents::Event_SetFacing, 10000);
                    break;
                }
                case eActions::Action_SorvosMoveBeforeFight:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 333);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathBeforeFight, 1000);
                    break;
                }
                case eActions::Action_SorvosMoveAfterFight:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterFight, 12000);
                    break;
                }
                case eActions::Action_SorvosMoveAfterTeleportOnVindicaar:
                {
                    me->AddDelayedEvent([this]() -> void
                    {
                        me->SendPlaySpellVisualKit(85496, 0, 0);
                    }, 500);

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterTeleportOnVindicaar, 2000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SayFirstLine:
                {
                    if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                        Talk(0, l_Player->GetGUID());

                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterOrder, 4000);
                    break;
                }
                case eEvents::Event_StartPathAfterOrder:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterOrderEnd, Path_SorvosAfterOrder, 7, false);
                    break;
                }
                case eEvents::Event_SetFacing:
                {
                    me->SetFacingTo(0.7504916f);
                    m_Events.ScheduleEvent(eEvents::Event_Emote, 2000);
                    break;
                }
                case eEvents::Event_Emote:
                {
                    me->HandleEmoteCommand(EMOTE_ONESHOT_SALUTE);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathWithTuralyon, 10000);
                    break;
                }
                case eEvents::Event_StartPathWithTuralyon:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathWithTuralyonEnd, Path_SorvosWithTuralyon, 21, true);
                    break;
                }
                case eEvents::Event_StartPathBeforeFight:
                {
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathBeforeFightEnd, Path_SorvosBeforeFight, 3, true);
                    break;
                }
                case eEvents::Event_StartPathAfterFight:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterFightEnd, Path_SorvosAfterFight, 18, true);
                    break;
                }
                case eEvents::Event_StartPathAfterTeleportOnVindicaar:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterTeleportOnVindicaarEnd, Path_SorvosAfterTeleportOnVindicaar, 11, true);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_grand_vindicator_sorvos_123669AI(p_Creature);
        }
};

/// Blademaster Telaamon - 123671
class npc_blademaster_telaamon_123671 : public CreatureScript
{
    public:
        npc_blademaster_telaamon_123671() : CreatureScript("npc_blademaster_telaamon_123671") { }

        struct npc_blademaster_telaamon_123671AI : public ScriptedAI
        {
            npc_blademaster_telaamon_123671AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_TelaamonAfterOrder[7] =
            {
                { 6072.468f, 9522.086f, -75.05016f },
                { 6069.968f, 9523.586f, -74.80016f },
                { 6068.218f, 9525.836f, -74.30016f },
                { 6065.968f, 9529.836f, -73.80016f },
                { 6065.218f, 9538.586f, -72.80016f },
                { 6063.968f, 9543.086f, -73.05016f },
                { 6062.165f, 9552.509f, -77.39153f }
            };

            G3D::Vector3 const Path_TelaamonWithTuralyon[20] =
            {
                { 6177.188f, 9625.02f, -81.41422f },
                { 6174.584f, 9622.503f, -80.93603f },
                { 6170.864f, 9619.986f, -80.56519f },
                { 6162.744f, 9618.01f, -80.46313f },
                { 6158.12f, 9617.0f, -81.85919f },
                { 6155.37f, 9616.75f, -82.60919f },
                { 6153.12f, 9616.5f, -83.35919f },
                { 6151.981f, 9615.871f, -83.67084f },
                { 6150.481f, 9615.871f, -83.42084f },
                { 6146.981f, 9615.371f, -83.67084f },
                { 6143.981f, 9615.121f, -83.42084f },
                { 6142.731f, 9614.871f, -83.42084f },
                { 6140.981f, 9614.621f, -83.17084f },
                { 6139.481f, 9614.371f, -83.42084f },
                { 6137.025f, 9614.006f, -82.38806f },
                { 6134.275f, 9614.006f, -81.38806f },
                { 6130.269f, 9613.275f, -80.28532f },
                { 6129.019f, 9613.025f, -80.03532f },
                { 6126.769f, 9612.775f, -80.28532f },
                { 6122.769f, 9612.275f, -80.28532f }
            };

            G3D::Vector3 const Path_TelaamonBeforeFight[3] =
            {
                { 6202.454f, 9922.987f, -25.53082f },
                { 6205.866f, 9925.745f, -25.6059f },
                { 6206.883f, 9926.991f, -25.53931f }
            };

            G3D::Vector3 const Path_TelaamonAfterFight[19] =
            {
                { 6248.479f, 9939.172f, -24.72942f },
                { 6254.729f, 9952.172f, -26.22942f },
                { 6261.479f, 9965.672f, -26.22942f },
                { 6262.979f, 9974.922f, -25.72942f },
                { 6262.729f, 9979.172f, -24.47942f },
                { 6251.479f, 9993.422f, -15.97942f },
                { 6241.729f, 10005.42f, -15.72942f },
                { 6237.729f, 10015.17f, -15.47942f },
                { 6235.479f, 10026.17f, -15.22942f },
                { 6233.979f, 10045.17f, -15.22942f },
                { 6236.979f, 10060.42f, -15.22942f },
                { 6244.229f, 10069.17f, -14.97942f },
                { 6246.729f, 10071.42f, -12.97942f },
                { 6250.729f, 10073.42f, -12.97942f },
                { 6262.229f, 10082.92f, -14.97942f },
                { 6275.479f, 10088.42f, -16.22942f },
                { 6290.729f, 10092.67f, -16.22942f },
                { 6298.979f, 10101.67f, -16.22942f },
                { 6304.537f, 10112.14f, -16.51042f }
            };

            G3D::Vector3 const Path_TelaamonAfterTeleportOnVindicaar[10] =
            {
                { 4602.502f, 9836.415f, 68.59328f },
                { 4608.002f, 9835.165f, 68.59328f },
                { 4618.002f, 9836.915f, 71.59328f },
                { 4621.944f, 9837.75f, 71.62336f },
                { 4622.872f, 9839.275f, 71.66741f },
                { 4623.872f, 9841.775f, 71.66741f },
                { 4624.372f, 9843.275f, 71.91741f },
                { 4626.622f, 9849.275f, 71.66741f },
                { 4627.872f, 9852.275f, 71.41741f },
                { 4630.3f, 9857.8f, 71.21146f }
            };

            enum ePoints
            {
                Point_ArmyOfTheLightAfterTeleport = 3,
                Point_ArmyOfTheLightAfterOrders = 4,
                Point_PathAfterOrderEnd = 5,
                Point_PathWithTuralyonEnd = 6,
                Point_PathBeforeFightEnd = 7,
                Point_PathAfterFightEnd = 8,
                Point_PathAfterTeleportOnVindicaarEnd = 9
            };

            enum eActions
            {
                Action_TelaamonMoveAfterOrder = 1,
                Action_TelaamonMoveWithTuralyon = 8,
                Action_TelaamonMoveBeforeFight = 13,
                Action_TelaamonMoveAfterFight = 21,
                Action_TelaamonMoveAfterTeleportOnVindicaar = 29
            };

            enum eKillcredits
            {
                Killcredit_OrdersGivenToTelaamon = 123671
            };

            enum eEvents
            {
                Event_SayFirstLine = 1,
                Event_StartPathAfterOrder = 2,
                Event_SetFacing = 3,
                Event_Emote = 4,
                Event_StartPathWithTuralyon = 5,
                Event_StartPathBeforeFight = 6,
                Event_StartPathAfterFight = 7,
                Event_StartPathAfterTeleportOnVindicaar = 8
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_ArmyOfTheLightAfterTeleport:
                {
                    me->SetFacingTo(4.018917f);
                    me->HandleEmoteCommand(EMOTE_ONESHOT_SALUTE_NOSHEATH);
                    break;
                }
                case ePoints::Point_ArmyOfTheLightAfterOrders:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PathAfterOrderEnd:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PathWithTuralyonEnd:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PathBeforeFightEnd:
                {
                    me->SetFacingTo(5.846853f);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 375);
                    break;
                }
                case ePoints::Point_PathAfterFightEnd:
                {
                    me->SendPlaySpellVisualKit(85644, 0, 0);
                    me->SendPlaySpellVisualKit(85596, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PathAfterTeleportOnVindicaarEnd:
                {
                    me->SetFacingTo(2.681287f);
                    break;
                }
                default:
                    break;
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();
                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_OrdersGivenToTelaamon);

                if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_TelaamonMoveAfterOrder);
                }
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_TelaamonMoveAfterOrder:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    m_Events.ScheduleEvent(eEvents::Event_SayFirstLine, 3000);
                    break;
                }
                case eActions::Action_TelaamonMoveWithTuralyon:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    m_Events.ScheduleEvent(eEvents::Event_SetFacing, 10000);
                    break;
                }
                case eActions::Action_TelaamonMoveBeforeFight:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 375);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathBeforeFight, 1000);
                    break;
                }
                case eActions::Action_TelaamonMoveAfterFight:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterFight, 15000);
                    break;
                }
                case eActions::Action_TelaamonMoveAfterTeleportOnVindicaar:
                {
                    me->AddDelayedEvent([this]() -> void
                    {
                        me->SendPlaySpellVisualKit(85496, 0, 0);
                    }, 500);

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 1);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterTeleportOnVindicaar, 3000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SayFirstLine:
                {
                    if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                        Talk(0, l_Player->GetGUID());

                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterOrder, 1000);
                    break;
                }
                case eEvents::Event_StartPathAfterOrder:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterOrderEnd, Path_TelaamonAfterOrder, 7, false);
                    break;
                }
                case eEvents::Event_SetFacing:
                {
                    me->SetFacingTo(5.51524f);
                    m_Events.ScheduleEvent(eEvents::Event_Emote, 2000);
                    break;
                }
                case eEvents::Event_Emote:
                {
                    me->HandleEmoteCommand(EMOTE_ONESHOT_SALUTE);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathWithTuralyon, 10000);
                    break;
                }
                case eEvents::Event_StartPathWithTuralyon:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathWithTuralyonEnd, Path_TelaamonWithTuralyon, 20, true);
                    break;
                }
                case eEvents::Event_StartPathBeforeFight:
                {
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathBeforeFightEnd, Path_TelaamonBeforeFight, 3, true);
                    break;
                }
                case eEvents::Event_StartPathAfterFight:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterFightEnd, Path_TelaamonAfterFight, 19, true);
                    break;
                }
                case eEvents::Event_StartPathAfterTeleportOnVindicaar:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterTeleportOnVindicaarEnd, Path_TelaamonAfterTeleportOnVindicaar, 10, true);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_blademaster_telaamon_123671AI(p_Creature);
        }
};

/// Erratic Power Conduit - 123560
class npc_erratic_power_conduit_123560 : public CreatureScript
{
    public:
        npc_erratic_power_conduit_123560() : CreatureScript("npc_erratic_power_conduit_123560") { }

        struct npc_erratic_power_conduit_123560AI : public ScriptedAI
        {
            npc_erratic_power_conduit_123560AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eNpcs
            {
                Npc_PowerConduit = 124558
            };

            enum eSpells
            {
                Spell_Stabilizing = 247414
            };

            enum eKillcredits
            {
                Killcredit_PowerConduitStabilized = 123560
            };

            enum eQuests
            {
                Quest_ConservationOfMagic = 47882
            };

            void InitializeAI() override
            {
                me->SetUInt32Value(UNIT_FIELD_STATE_ANIM_KIT_ID, 13518);
            }

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = p_Caster->ToPlayer())
                {
                    if (p_Spell->Id == eSpells::Spell_Stabilizing && l_Player->GetQuestStatus(eQuests::Quest_ConservationOfMagic) != QUEST_STATUS_COMPLETE)
                    {
                        me->AddToHideList(l_Player->GetGUID(), 360000);
                        me->DestroyForPlayer(l_Player);

                        if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_PowerConduit, me->GetPosition(), TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 360000, 0, l_Player->GetGUID()))
                        {
                            l_Creature->CastSpell(l_Creature, eSpells::Spell_Stabilizing, true);
                        }

                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_PowerConduitStabilized);
                    }
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_erratic_power_conduit_123560AI(p_Creature);
        }
};

/// FX STalker - 120693
class npc_fx_stalker_120693 : public CreatureScript
{
    public:
        npc_fx_stalker_120693() : CreatureScript("npc_fx_stalker_120693") { }

        struct npc_fx_stalker_120693AI : public ScriptedAI
        {
            npc_fx_stalker_120693AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            void StartPath()
            {
                if (me->HasInPhaseList(5616) && int32(me->GetHomePosition().GetPositionX()) == 5638)
                {
                    DoCast(eSpells::Spell_GreenPath, true);
                    me->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_SignBunnyPathEnd, Path_GreenFromBlue, 7);
                }

                if (me->HasInPhaseList(5616) && int32(me->GetHomePosition().GetPositionX()) == 5637)
                {
                    DoCast(eSpells::Spell_GreenPath, true);
                    me->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_SignBunnyPathEnd, Path_GreenFromYellow, 8);
                }

                if (me->HasInPhaseList(5617) && int32(me->GetHomePosition().GetPositionY()) == 9513)
                {
                    DoCast(eSpells::Spell_OrangePath, true);
                    me->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_SignBunnyPathEnd, Path_OrangeFromRed, 13);
                }

                if (me->HasInPhaseList(5617) && int32(me->GetHomePosition().GetPositionY()) == 9505)
                {
                    DoCast(eSpells::Spell_OrangePath, true);
                    me->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_SignBunnyPathEnd, Path_OrangeFromYellow, 13);
                }

                if (me->HasInPhaseList(5618) && int32(me->GetHomePosition().GetPositionX()) == 5636)
                {
                    DoCast(eSpells::Spell_PurplePath, true);
                    me->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_SignBunnyPathEnd, Path_PurpleFromRed, 16);
                }

                if (me->HasInPhaseList(5618) && int32(me->GetHomePosition().GetPositionX()) == 5638)
                {
                    DoCast(eSpells::Spell_PurplePath, true);
                    me->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_SignBunnyPathEnd, Path_PurpleFromBlue, 18);
                }
            }

            G3D::Vector3 const Path_GreenFromBlue[7] =
            {
                { 5644.816f, 9501.809f, -67.26189f },
                { 5647.566f, 9497.809f, -67.01189f },
                { 5649.566f, 9494.059f, -66.01189f },
                { 5650.701f, 9488.689f, -65.95762f },
                { 5650.197f, 9481.497f, -66.18951f },
                { 5648.506f, 9473.145f, -66.14623f },
                { 5648.127f, 9470.445f, -65.9555f }
            };

            G3D::Vector3 const Path_GreenFromYellow[8] =
            {
                { 5644.392f, 9501.949f, -67.551f },
                { 5647.392f, 9497.949f, -67.301f },
                { 5649.463f, 9493.885f, -66.28754f },
                { 5650.701f, 9488.689f, -65.95762f },
                { 5650.607f, 9485.58f, -66.03735f },
                { 5650.197f, 9481.497f, -66.18951f },
                { 5648.506f, 9473.145f, -66.14623f },
                { 5648.127f, 9470.445f, -65.9555f }
            };

            G3D::Vector3 const Path_OrangeFromRed[13] =
            {
                { 5649.43f, 9510.656f, -67.57626f },
                { 5652.259f, 9510.926f, -67.33804f },
                { 5655.441f, 9511.707f, -66.07013f },
                { 5659.691f, 9512.457f, -65.82013f },
                { 5662.351f, 9513.24f, -66.18951f },
                { 5666.853f, 9513.85f, -65.86441f },
                { 5673.937f, 9514.239f, -66.07206f },
                { 5677.129f, 9514.422f, -65.8448f },
                { 5679.612f, 9515.169f, -66.07206f },
                { 5681.348f, 9516.717f, -65.58832f },
                { 5682.848f, 9518.467f, -65.33832f },
                { 5683.848f, 9519.717f, -65.08832f },
                { 5685.957f, 9522.715f, -65.10458f }
            };

            G3D::Vector3 const Path_OrangeFromYellow[13] =
            {
                { 5649.326f, 9510.5f, -67.57626f },
                { 5652.259f, 9510.926f, -67.33804f },
                { 5655.312f, 9511.312f, -66.06738f },
                { 5659.812f, 9512.562f, -65.81738f },
                { 5662.351f, 9513.24f, -66.18951f },
                { 5666.92f, 9513.867f, -65.86163f },
                { 5673.937f, 9514.239f, -66.07206f },
                { 5677.149f, 9514.426f, -65.84428f },
                { 5679.612f, 9515.169f, -66.07206f },
                { 5681.388f, 9516.716f, -65.58832f },
                { 5682.888f, 9518.466f, -65.33832f },
                { 5683.888f, 9519.716f, -65.08832f },
                { 5685.957f, 9522.715f, -65.10458f }
            };

            G3D::Vector3 const Path_PurpleFromRed[16] =
            {
                { 5633.174f, 9519.26f, -67.60542f },
                { 5632.674f, 9520.76f, -67.60542f },
                { 5632.674f, 9523.26f, -67.60542f },
                { 5632.674f, 9525.26f, -67.60542f },
                { 5632.929f, 9527.403f, -67.39636f },
                { 5632.807f, 9532.039f, -65.91655f },
                { 5632.616f, 9536.235f, -66.00683f },
                { 5632.451f, 9538.857f, -66.00809f },
                { 5632.951f, 9541.357f, -66.00809f },
                { 5633.219f, 9545.38f, -66.11981f },
                { 5633.673f, 9547.499f, -66.12672f },
                { 5635.417f, 9552.407f, -66.18951f },
                { 5637.327f, 9555.604f, -66.11211f },
                { 5639.327f, 9557.104f, -66.11211f },
                { 5641.787f, 9558.516f, -66.04611f },
                { 5649.49f, 9559.419f, -64.89869f }
            };

            G3D::Vector3 const Path_PurpleFromBlue[18] =
            {
                { 5633.172f, 9518.964f, -67.54772f },
                { 5632.672f, 9520.714f, -67.54772f },
                { 5632.444f, 9523.229f, -67.78098f },
                { 5632.844f, 9525.18f, -67.70358f },
                { 5632.929f, 9527.403f, -67.39636f },
                { 5632.553f, 9532.07f, -66.14391f },
                { 5632.616f, 9536.235f, -66.00683f },
                { 5632.398f, 9538.881f, -65.95459f },
                { 5632.898f, 9541.381f, -65.95459f },
                { 5633.219f, 9545.38f, -66.11981f },
                { 5633.54f, 9547.77f, -65.90466f },
                { 5635.54f, 9552.52f, -65.90466f },
                { 5637.156f, 9555.591f, -66.18951f },
                { 5639.497f, 9557.156f, -65.90359f },
                { 5641.747f, 9558.406f, -65.90359f },
                { 5643.788f, 9558.818f, -65.61767f },
                { 5646.514f, 9559.283f, -64.78984f },
                { 5649.49f, 9559.419f, -64.89869f }
            };

            enum ePoints
            {
                Point_BunnyPathEnd = 1,
                Point_SignBunnyPathEnd = 2,
                Point_BoulderPathEnd = 3,
                Point_MovingBunnyPathEnd = 4
            };

            enum eSpells
            {
                Spell_MatrixFireUp = 250430,
                Spell_ShieldBeam = 241023,
                Spell_ArcaneChanneling = 241552,
                Spell_ArcaneBarrier = 245703,
                Spell_GreenPath = 251098,
                Spell_OrangePath = 251097,
                Spell_PurplePath = 251095
            };

            enum eEvents
            {
                Event_RestartPath = 1
            };

            EventMap m_Events;

            void InitializeAI() override
            {
                if (me->GetAreaId() == 8882)
                {
                    me->SetSpeed(MOVE_RUN, 1.5f);
                    StartPath();
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_BunnyPathEnd:
                {
                    DoCast(eSpells::Spell_MatrixFireUp, true);
                    me->DespawnOrUnsummon(3000);
                    break;
                }
                case ePoints::Point_SignBunnyPathEnd:
                {
                    me->RemoveAllAuras();
                    me->GetMotionMaster()->Clear(true);
                    me->GetMotionMaster()->MoveIdle();
                    me->NearTeleportTo(me->GetHomePosition());
                    m_Events.ScheduleEvent(eEvents::Event_RestartPath, 5000);
                    break;
                }
                case ePoints::Point_BoulderPathEnd:
                {
                    me->SendPlaySpellVisualKit(7102, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_MovingBunnyPathEnd:
                {
                    me->SendPlaySpellVisualKit(43725, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_RestartPath:
                {
                    StartPath();
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_fx_stalker_120693AI(p_Creature);
        }
};

/// Grand Vizier Jarasum - 123521
class npc_grand_vizier_jarasum_123521 : public CreatureScript
{
    public:
        npc_grand_vizier_jarasum_123521() : CreatureScript("npc_grand_vizier_jarasum_123521") { }

        struct npc_grand_vizier_jarasum_123521AI : public ScriptedAI
        {
            npc_grand_vizier_jarasum_123521AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_ArcaneBolt = 252237,
                Spell_UnleashedFamiliars = 252281,
                Spell_ViziersCelerity = 252278
            };

            enum eEvents
            {
                Event_CastArcaneBolt = 1,
                Event_CastUnleashedFamiliars = 2,
                Event_CastViziersCelerity = 3
            };

            enum eKillcredits
            {
                Killcredit_GrandVizierJarasumDefeated = 123521
            };

            EventMap m_Events;
            bool m_JarasumDefeated = false;

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();
                Talk(0);
                me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);

                me->AddDelayedEvent([this]() -> void
                {
                    me->setFaction(14);
                    me->RemoveFlag(UNIT_FIELD_FLAGS, 33024);
                    me->SetFlag(UNIT_FIELD_FLAGS, 32768);
                }, 4000);
            }

            void Reset() override
            {
                m_Events.Reset();
                me->setFaction(190);
                me->SetFlag(UNIT_FIELD_FLAGS, 33024);
                me->SetFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
                me->SetFullHealth();
                m_JarasumDefeated = false;
            }

            void EnterCombat(Unit* /*victim*/) override
            {
                me->SetReactState(ReactStates::REACT_AGGRESSIVE);
                m_Events.ScheduleEvent(eEvents::Event_CastArcaneBolt, 2000);
                m_Events.ScheduleEvent(eEvents::Event_CastUnleashedFamiliars, 4000);
                m_Events.ScheduleEvent(eEvents::Event_CastViziersCelerity, 7000);
            }

            void DamageTaken(Unit* attacker, uint32& damage, SpellInfo const* /*p_SpellInfo*/) override
            {
                if (damage >= me->GetHealth())
                {
                    damage = 0;
                    me->SetHealth(1);

                    if (!m_JarasumDefeated)
                    {
                        for (auto l_Itr : me->getThreatManager().getThreatList())
                        {
                            if (Unit* l_Unit = l_Itr->getTarget())
                            {
                                if (Player* l_Player = l_Unit->ToPlayer())
                                {
                                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_GrandVizierJarasumDefeated);
                                }
                            }
                        }

                        me->CastStop();
                        me->StopAttack();
                        attacker->AttackStop();
                        me->setFaction(190);
                        me->SetFlag(UNIT_FIELD_FLAGS, 557328);
                        me->DeleteThreatList();
                        Talk(1);
                        me->SetFacingToObject(attacker);
                        m_Events.Reset();
                        m_JarasumDefeated = true;

                        me->AddDelayedEvent([this]() -> void
                        {
                            me->HandleEmoteCommand(EMOTE_ONESHOT_BOW);
                        }, 1000);

                        me->AddDelayedEvent([this]() -> void
                        {
                            EnterEvadeMode();
                        }, 5000);
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                if (!UpdateVictim())
                    return;

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastArcaneBolt:
                {
                    DoCastVictim(eSpells::Spell_ArcaneBolt);
                    m_Events.ScheduleEvent(eEvents::Event_CastArcaneBolt, urand(5000, 10000));
                    break;
                }
                case eEvents::Event_CastUnleashedFamiliars:
                {
                    DoCast(eSpells::Spell_UnleashedFamiliars);
                    m_Events.ScheduleEvent(eEvents::Event_CastUnleashedFamiliars, urand(10000, 20000));
                    break;
                }
                case eEvents::Event_CastViziersCelerity:
                {
                    DoCast(eSpells::Spell_ViziersCelerity);
                    m_Events.ScheduleEvent(eEvents::Event_CastViziersCelerity, urand(10000, 20000));
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_grand_vizier_jarasum_123521AI(p_Creature);
        }
};

/// Arc-Consul Velara - 123520
class npc_arc_consul_velara_123520 : public CreatureScript
{
    public:
        npc_arc_consul_velara_123520() : CreatureScript("npc_arc_consul_velara_123520") { }

        struct npc_arc_consul_velara_123520AI : public ScriptedAI
        {
            npc_arc_consul_velara_123520AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_ArcaneBolt = 252237,
                Spell_MysticBarrage = 252204,
                Spell_GreaterMageWard = 252198,
                Spell_CrystallineDefenseGrid = 252184
            };

            enum eEvents
            {
                Event_CastArcaneBolt = 1,
                Event_CastMysticBarrage = 2,
                Event_CastGreaterMageWard = 3,
                Event_CastCrystallineDefenseGrid = 4
            };

            enum eKillcredits
            {
                Killcredit_ArcConsulVelaraDefeated = 123520
            };

            EventMap m_Events;
            bool m_SeventyFivePctLine = false;
            bool m_ThirtyFivePctLine = false;
            bool m_VelaraDefeated = false;

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();
                Talk(0);
                me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);

                me->AddDelayedEvent([this]() -> void
                {
                    me->setFaction(14);
                    me->RemoveFlag(UNIT_FIELD_FLAGS, 33024);
                    me->SetFlag(UNIT_FIELD_FLAGS, 32768);
                }, 3000);
            }

            void Reset() override
            {
                m_Events.Reset();
                me->setFaction(190);
                me->SetFlag(UNIT_FIELD_FLAGS, 33024);
                me->SetFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
                me->SetFullHealth();
                m_SeventyFivePctLine = false;
                m_ThirtyFivePctLine = false;
                m_VelaraDefeated = false;
            }

            void EnterCombat(Unit* /*victim*/) override
            {
                me->SetReactState(ReactStates::REACT_AGGRESSIVE);
                m_Events.ScheduleEvent(eEvents::Event_CastArcaneBolt, 2000);
                m_Events.ScheduleEvent(eEvents::Event_CastMysticBarrage, 7000);
                m_Events.ScheduleEvent(eEvents::Event_CastGreaterMageWard, 13000);
                m_Events.ScheduleEvent(eEvents::Event_CastCrystallineDefenseGrid, 17000);
            }

            void DamageTaken(Unit* attacker, uint32& damage, SpellInfo const* /*p_SpellInfo*/) override
            {
                if (me->GetHealthPct() <= 75 && !m_SeventyFivePctLine)
                {
                    Talk(1);
                    m_SeventyFivePctLine = true;
                }

                if (me->GetHealthPct() <= 35 && !m_ThirtyFivePctLine)
                {
                    Talk(2);
                    m_ThirtyFivePctLine = true;
                }

                if (damage >= me->GetHealth())
                {
                    damage = 0;
                    me->SetHealth(1);

                    if (!m_VelaraDefeated)
                    {
                        for (auto l_Itr : me->getThreatManager().getThreatList())
                        {
                            if (Unit* l_Unit = l_Itr->getTarget())
                            {
                                if (Player* l_Player = l_Unit->ToPlayer())
                                {
                                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_ArcConsulVelaraDefeated);
                                }
                            }
                        }

                        me->CastStop();
                        me->StopAttack();
                        attacker->AttackStop();
                        me->setFaction(190);
                        me->SetFlag(UNIT_FIELD_FLAGS, 557328);
                        me->DeleteThreatList();
                        Talk(3);
                        me->SetFacingToObject(attacker);
                        m_Events.Reset();
                        m_VelaraDefeated = true;

                        me->AddDelayedEvent([this]() -> void
                        {
                            me->HandleEmoteCommand(EMOTE_ONESHOT_BOW);
                        }, 1000);

                        me->AddDelayedEvent([this]() -> void
                        {
                            EnterEvadeMode();
                        }, 5000);
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                if (!UpdateVictim())
                    return;

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastArcaneBolt:
                {
                    DoCastVictim(eSpells::Spell_ArcaneBolt);
                    m_Events.ScheduleEvent(eEvents::Event_CastArcaneBolt, urand(5000, 20000));
                    break;
                }
                case eEvents::Event_CastMysticBarrage:
                {
                    DoCast(eSpells::Spell_MysticBarrage);
                    m_Events.ScheduleEvent(eEvents::Event_CastMysticBarrage, urand(13000, 20000));
                    break;
                }
                case eEvents::Event_CastGreaterMageWard:
                {
                    DoCast(eSpells::Spell_GreaterMageWard);
                    m_Events.ScheduleEvent(eEvents::Event_CastGreaterMageWard, urand(14000, 20000));
                    break;
                }
                case eEvents::Event_CastCrystallineDefenseGrid:
                {
                    DoCast(eSpells::Spell_CrystallineDefenseGrid);
                    m_Events.ScheduleEvent(eEvents::Event_CastCrystallineDefenseGrid, urand(20000, 30000));
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_arc_consul_velara_123520AI(p_Creature);
        }
};

/// High Wakener Aargon - 123522
class npc_high_wakener_aargon_123522 : public CreatureScript
{
    public:
        npc_high_wakener_aargon_123522() : CreatureScript("npc_high_wakener_aargon_123522") { }

        struct npc_high_wakener_aargon_123522AI : public ScriptedAI
        {
            npc_high_wakener_aargon_123522AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_SummonConstruct = 252240,
                Spell_ArcaneCleave = 252276
            };

            enum eEvents
            {
                Event_CastSummonConstruct = 1,
                Event_CastArcaneCleave = 2
            };

            enum eKillcredits
            {
                Killcredit_HighWakenerAargonDefeated = 123522
            };

            EventMap m_Events;
            bool m_SeventyPctLine = false;
            bool m_ThirtyFivePctLine = false;
            bool m_AargonDefeated = false;

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();
                Talk(0);
                me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);

                me->AddDelayedEvent([this]() -> void
                {
                    me->setFaction(14);
                    me->RemoveFlag(UNIT_FIELD_FLAGS, 33024);
                    me->SetFlag(UNIT_FIELD_FLAGS, 32768);
                }, 3000);
            }

            void Reset() override
            {
                if (Guardian* l_Guard = me->GetGuardianPet())
                {
                    l_Guard->DespawnOrUnsummon();
                }

                m_Events.Reset();
                me->setFaction(190);
                me->SetFlag(UNIT_FIELD_FLAGS, 33024);
                me->SetFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
                me->SetFullHealth();
                m_SeventyPctLine = false;
                m_ThirtyFivePctLine = false;
                m_AargonDefeated = false;
            }

            void EnterCombat(Unit* /*victim*/) override
            {
                me->SetReactState(ReactStates::REACT_AGGRESSIVE);
                m_Events.ScheduleEvent(eEvents::Event_CastSummonConstruct, 1000);
                m_Events.ScheduleEvent(eEvents::Event_CastArcaneCleave, 4000);
            }

            void DamageTaken(Unit* attacker, uint32& damage, SpellInfo const* /*p_SpellInfo*/) override
            {
                if (me->GetHealthPct() <= 70 && !m_SeventyPctLine)
                {
                    Talk(1);
                    m_SeventyPctLine = true;
                }

                if (me->GetHealthPct() <= 35 && !m_ThirtyFivePctLine)
                {
                    Talk(2);
                    m_ThirtyFivePctLine = true;
                }

                if (damage >= me->GetHealth())
                {
                    damage = 0;
                    me->SetHealth(1);

                    if (!m_AargonDefeated)
                    {
                        for (auto l_Itr : me->getThreatManager().getThreatList())
                        {
                            if (Unit* l_Unit = l_Itr->getTarget())
                            {
                                if (Player* l_Player = l_Unit->ToPlayer())
                                {
                                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_HighWakenerAargonDefeated);
                                }
                            }
                        }

                        damage = 0;
                        me->SetHealth(1);
                        me->CastStop();
                        me->StopAttack();
                        attacker->AttackStop();
                        me->setFaction(190);
                        me->SetFlag(UNIT_FIELD_FLAGS, 557328);
                        me->DeleteThreatList();
                        Talk(3);
                        me->SetFacingToObject(attacker);
                        m_Events.Reset();
                        m_AargonDefeated = true;

                        me->AddDelayedEvent([this]() -> void
                        {
                            me->HandleEmoteCommand(EMOTE_ONESHOT_BOW);
                        }, 1000);

                        me->AddDelayedEvent([this]() -> void
                        {
                            EnterEvadeMode();
                        }, 5000);
                    }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                if (!UpdateVictim())
                    return;

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastSummonConstruct:
                {
                    DoCast(eSpells::Spell_SummonConstruct);
                    break;
                }
                case eEvents::Event_CastArcaneCleave:
                {
                    DoCast(eSpells::Spell_ArcaneCleave);
                    m_Events.ScheduleEvent(eEvents::Event_CastArcaneCleave, urand(10000, 20000));
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_high_wakener_aargon_123522AI(p_Creature);
        }
};

/// Gatekeepers Image - 124077
class npc_gatekeepers_image_124077 : public CreatureScript
{
    public:
        npc_gatekeepers_image_124077() : CreatureScript("npc_gatekeepers_image_124077") { }

        struct npc_gatekeepers_image_124077AI : public ScriptedAI
        {
            npc_gatekeepers_image_124077AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eEvents
            {
                Event_SayFirstLine = 1,
                Event_SaySecondLine = 2,
                Event_VisualKitAndDespawn = 3,
                Event_SayThirdLine = 4,
                Event_SayFourthLine = 5,
                Event_SayFifthLine = 6
            };

            enum eActions
            {
                Action_QuoramSummonedBeforeChallenge = 1,
                Action_QuoramSummonedAfterTraps = 2,
                Action_QuoramSummonedAfterLasers = 3,
                Action_QuoramSummonedAfterChallengeComplete = 4
            };

            enum eKillcredits
            {
                Killcredit_EnterTheGatekeepersAlcove = 124076,
                Killcredit_BypassTheBoulders = 124163,
                Killcredit_CompleteTheTrialOfTenacity = 124070
            };

            enum eQuests
            {
                Quest_GatekeepersChallengeTenacity = 47689
            };

            enum eObjectives
            {
                Obj_BypassTheBoulders = 290951,
                Obj_BypassTheLaserField = 290950
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player || me->isSummon())
                    return;

                if (me->GetExactDist2d(l_Player) <= 15.0f && l_Player->HasQuest(eQuests::Quest_GatekeepersChallengeTenacity) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_BypassTheBoulders) == 0 &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_BypassTheLaserField) == 1)
                {
                    Talk(4, l_Player->GetGUID());
                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_BypassTheBoulders);
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 p_Action) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();

                switch (p_Action)
                {
                case 0:
                {
                    me->DestroyForPlayer(p_Player);

                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_QuoramSummonedBeforeChallenge);
                    }

                    break;
                }
                case 1:
                {
                    me->DestroyForPlayer(p_Player);

                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 360000, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_QuoramSummonedAfterChallengeComplete);
                    }

                    break;
                }
                case 2:
                {
                    Talk(6, p_Player->GetGUID());
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
                    break;
                }
                default:
                    break;
                }
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_QuoramSummonedBeforeChallenge:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
                    m_Events.ScheduleEvent(eEvents::Event_SayFirstLine, 1000);
                    break;
                }
                case eActions::Action_QuoramSummonedAfterTraps:
                {
                    me->AddDelayedEvent([this]() -> void
                    {
                        me->SendPlaySpellVisualKit(1364, 0, 0);
                    }, 500);

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
                    me->PlayOneShotAnimKitId(12359);
                    m_Events.ScheduleEvent(eEvents::Event_SayThirdLine, 1000);
                    break;
                }
                case eActions::Action_QuoramSummonedAfterLasers:
                {
                    me->AddDelayedEvent([this]() -> void
                    {
                        me->SendPlaySpellVisualKit(1364, 0, 0);
                    }, 500);

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
                    me->PlayOneShotAnimKitId(12359);
                    m_Events.ScheduleEvent(eEvents::Event_SayFourthLine, 1000);
                    break;
                }
                case eActions::Action_QuoramSummonedAfterChallengeComplete:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
                    m_Events.ScheduleEvent(eEvents::Event_SayFifthLine, 3000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SayFirstLine:
                {
                    Talk(0, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_SaySecondLine, 9000);
                    break;
                }
                case eEvents::Event_SaySecondLine:
                {
                    Talk(1, l_Player->GetGUID());
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_EnterTheGatekeepersAlcove);
                    m_Events.ScheduleEvent(eEvents::Event_VisualKitAndDespawn, 6000);
                    break;
                }
                case eEvents::Event_VisualKitAndDespawn:
                {
                    me->SendPlaySpellVisualKit(1364, 0, 0);
                    me->PlayOneShotAnimKitId(12359);
                    me->DespawnOrUnsummon();
                    break;
                }
                case eEvents::Event_SayThirdLine:
                {
                    Talk(2, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_VisualKitAndDespawn, 6000);
                    break;
                }
                case eEvents::Event_SayFourthLine:
                {
                    Talk(3, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_VisualKitAndDespawn, 4000);
                    break;
                }
                case eEvents::Event_SayFifthLine:
                {
                    Talk(5, l_Player->GetGUID());
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_CompleteTheTrialOfTenacity);
                    me->SetFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_gatekeepers_image_124077AI(p_Creature);
        }
};

/// Rune Gauntlet - 127397
class npc_rune_gauntlet_127397 : public CreatureScript
{
    public:
        npc_rune_gauntlet_127397() : CreatureScript("npc_rune_gauntlet_127397") { }

        struct npc_rune_gauntlet_127397AI : public ScriptedAI
        {
            npc_rune_gauntlet_127397AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            std::array<Position const, 4> m_LeftSideBunnysPosArray =
            { {
                { 5539.283f, 9318.884f, -65.37067f, 4.733351f },
                { 5539.08f, 9322.04f, -65.15804f, 4.762653f },
                { 5539.007f, 9325.209f, -64.82478f, 4.751636f },
                { 5538.804f, 9328.365f, -64.41724f, 4.758826f },
            } };

            std::array<Position const, 6> m_LeftMiddleSideBunnysPosArray =
            { {
                { 5536.201f, 9318.88f, -65.37172f, 4.79716f },
                { 5535.997f, 9322.04f, -65.04512f, 4.794927f },
                { 5535.935f, 9325.209f, -64.67133f, 4.770238f },
                { 5535.731f, 9328.365f, -64.36092f, 4.772118f },
                { 5535.671f, 9331.443f, -64.12494f, 4.763472f },
                { 5535.465f, 9334.601f, -64.09055f, 4.766f },
            } };

            std::array<Position const, 6> m_MiddleSideBunnysPosArray =
            { {
                { 5533.201f, 9318.88f, -65.33759f, 4.78395f },
                { 5533.096f, 9321.868f, -65.15477f, 4.758562f },
                { 5532.935f, 9325.037f, -65.02663f, 4.760505f },
                { 5532.831f, 9328.193f, -64.69081f, 4.756115f },
                { 5532.671f, 9331.271f, -64.29175f, 4.757906f },
                { 5532.566f, 9334.428f, -64.00124f, 4.756362f },
            } };

            std::array<Position const, 6> m_RightMiddleSideBunnysPosArray =
            { {
                { 5530.262f, 9318.587f, -65.45174f, 4.710397f },
                { 5530.184f, 9321.735f, -65.1772f, 4.706152f },
                { 5529.997f, 9324.912f, -65.06655f, 4.732478f },
                { 5529.918f, 9328.063f, -64.62051f, 4.733821f },
                { 5529.731f, 9331.146f, -64.24757f, 4.742421f },
                { 5529.653f, 9334.294f, -64.12494f, 4.741469f },
            } };

            std::array<Position const, 4> m_RightSideBunnysPosArray =
            { {
                { 5527.24f, 9318.414f, -65.56403f, 4.719267f },
                { 5527.29f, 9321.57f, -65.3444f, 4.757306f },
                { 5527.217f, 9324.742f, -65.07156f, 4.748546f },
                { 5527.014f, 9327.898f, -64.69504f, 4.756552f },
            } };

            enum eNpcs
            {
                Npc_TrapRune = 127036,
                Npc_GatekeepersImage = 124077
            };

            enum eSpells
            {
                Spell_BlueRuneState = 252133,
                Spell_RedRuneState = 252125,
                Spell_ArcaneDischarge = 252138
            };

            enum eEvents
            {
                Event_BlueForAll = 1,
                Event_VerticalConstruction = 2,
                Event_HorizontalConstruction = 3,
                Event_ChessConstruction = 4
            };

            enum eKillcredits
            {
                Killcredit_PassRuneGauntlet = 124150
            };

            enum eObjectives
            {
                Obj_PassRuneGauntlet = 290946
            };

            enum eQuests
            {
                Quest_GatekeepersChallengeTenacity = 47689
            };

            enum eActions
            {
                Action_QuoramSummonedAfterTraps = 2
            };

            std::vector<ObjectGuid> m_LeftSideBunnysGuids;
            std::vector<ObjectGuid> m_LeftMiddleSideBunnysGuids;
            std::vector<ObjectGuid> m_MiddleSideBunnysGuids;
            std::vector<ObjectGuid> m_RightMiddleSideBunnysGuids;
            std::vector<ObjectGuid> m_RightSideBunnysGuids;
            std::vector<ObjectGuid> m_AllBunnysGuids;
            Position const m_GatekeepersImageSpawnPos = { 5534.709f, 9289.623f, -57.72812f, 1.60864f };
            EventMap m_Events;

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) < 2.0f && l_Player->HasQuest(eQuests::Quest_GatekeepersChallengeTenacity) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_PassRuneGauntlet) == 0)
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_GatekeepersImage, m_GatekeepersImageSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(Action_QuoramSummonedAfterTraps);
                    }

                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_PassRuneGauntlet);
                }
            }

            void InitializeAI() override
            {
                for (auto l_Itr : m_LeftSideBunnysPosArray)
                {
                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_TrapRune, l_Itr, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0))
                    {
                        l_Creature->SetPhaseMask(0, false);
                        l_Creature->SetInPhase(9379, false, true);
                        m_LeftSideBunnysGuids.push_back(l_Creature->GetGUID());
                        m_AllBunnysGuids.push_back(l_Creature->GetGUID());
                    }
                }

                for (auto l_Itr : m_LeftMiddleSideBunnysPosArray)
                {
                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_TrapRune, l_Itr, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0))
                    {
                        l_Creature->SetPhaseMask(0, false);
                        l_Creature->SetInPhase(9379, false, true);
                        m_LeftMiddleSideBunnysGuids.push_back(l_Creature->GetGUID());
                        m_AllBunnysGuids.push_back(l_Creature->GetGUID());
                    }
                }

                for (auto l_Itr : m_MiddleSideBunnysPosArray)
                {
                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_TrapRune, l_Itr, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0))
                    {
                        l_Creature->SetPhaseMask(0, false);
                        l_Creature->SetInPhase(9379, false, true);
                        m_MiddleSideBunnysGuids.push_back(l_Creature->GetGUID());
                        m_AllBunnysGuids.push_back(l_Creature->GetGUID());
                    }
                }

                for (auto l_Itr : m_RightMiddleSideBunnysPosArray)
                {
                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_TrapRune, l_Itr, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0))
                    {
                        l_Creature->SetPhaseMask(0, false);
                        l_Creature->SetInPhase(9379, false, true);
                        m_RightMiddleSideBunnysGuids.push_back(l_Creature->GetGUID());
                        m_AllBunnysGuids.push_back(l_Creature->GetGUID());
                    }
                }

                for (auto l_Itr : m_RightSideBunnysPosArray)
                {
                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_TrapRune, l_Itr, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0))
                    {
                        l_Creature->SetPhaseMask(0, false);
                        l_Creature->SetInPhase(9379, false, true);
                        m_RightSideBunnysGuids.push_back(l_Creature->GetGUID());
                        m_AllBunnysGuids.push_back(l_Creature->GetGUID());
                    }
                }

                m_Events.ScheduleEvent(eEvents::Event_BlueForAll, 2000);
                m_Events.ScheduleEvent(RAND(eEvents::Event_VerticalConstruction, eEvents::Event_HorizontalConstruction, eEvents::Event_ChessConstruction), 4000);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_BlueForAll:
                {
                    for (auto l_Itr : m_AllBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->RemoveAura(eSpells::Spell_RedRuneState);
                            l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                        }
                    }

                    break;
                }
                case eEvents::Event_VerticalConstruction:
                {
                    for (auto l_Itr : m_LeftSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                        }
                    }

                    for (auto l_Itr : m_LeftMiddleSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->RemoveAura(eSpells::Spell_BlueRuneState);
                            l_Creature->CastSpell(l_Creature, eSpells::Spell_RedRuneState, true);
                            l_Creature->DelayedCastSpell(l_Creature, eSpells::Spell_ArcaneDischarge, true, 2000);
                        }
                    }

                    for (auto l_Itr : m_MiddleSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                        }
                    }

                    for (auto l_Itr : m_RightMiddleSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->RemoveAura(eSpells::Spell_BlueRuneState);
                            l_Creature->CastSpell(l_Creature, eSpells::Spell_RedRuneState, true);
                            l_Creature->DelayedCastSpell(l_Creature, eSpells::Spell_ArcaneDischarge, true, 2000);
                        }
                    }

                    for (auto l_Itr : m_RightSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                        }
                    }

                    m_Events.ScheduleEvent(eEvents::Event_BlueForAll, 3000);
                    m_Events.ScheduleEvent(RAND(eEvents::Event_VerticalConstruction, eEvents::Event_HorizontalConstruction, eEvents::Event_ChessConstruction), 4000);
                    break;
                }
                case eEvents::Event_HorizontalConstruction:
                {
                    uint8 l_Lsl_Itr = 1;
                    uint8 l_Lmsl_Itr = 1;
                    uint8 l_Msl_Itr = 1;
                    uint8 l_Rmsl_Itr = 1;
                    uint8 l_Rsl_Itr = 1;

                    for (auto l_Itr : m_LeftSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            if (l_Lsl_Itr % 2 != 0)
                            {
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                            }
                            else
                            {
                                l_Creature->RemoveAura(eSpells::Spell_BlueRuneState);
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_RedRuneState, true);
                                l_Creature->DelayedCastSpell(l_Creature, eSpells::Spell_ArcaneDischarge, true, 2000);
                            }

                            l_Lsl_Itr++;
                        }
                    }

                    for (auto l_Itr : m_LeftMiddleSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            if (l_Lmsl_Itr % 2 != 0)
                            {
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                            }
                            else
                            {
                                l_Creature->RemoveAura(eSpells::Spell_BlueRuneState);
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_RedRuneState, true);
                                l_Creature->DelayedCastSpell(l_Creature, eSpells::Spell_ArcaneDischarge, true, 2000);
                            }

                            l_Lmsl_Itr++;
                        }
                    }

                    for (auto l_Itr : m_MiddleSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            if (l_Msl_Itr % 2 != 0)
                            {
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                            }
                            else
                            {
                                l_Creature->RemoveAura(eSpells::Spell_BlueRuneState);
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_RedRuneState, true);
                                l_Creature->DelayedCastSpell(l_Creature, eSpells::Spell_ArcaneDischarge, true, 2000);
                            }

                            l_Msl_Itr++;
                        }
                    }

                    for (auto l_Itr : m_RightMiddleSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            if (l_Rmsl_Itr % 2 != 0)
                            {
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                            }
                            else
                            {
                                l_Creature->RemoveAura(eSpells::Spell_BlueRuneState);
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_RedRuneState, true);
                                l_Creature->DelayedCastSpell(l_Creature, eSpells::Spell_ArcaneDischarge, true, 2000);
                            }

                            l_Rmsl_Itr++;
                        }
                    }

                    for (auto l_Itr : m_RightSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            if (l_Rsl_Itr % 2 != 0)
                            {
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                            }
                            else
                            {
                                l_Creature->RemoveAura(eSpells::Spell_BlueRuneState);
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_RedRuneState, true);
                                l_Creature->DelayedCastSpell(l_Creature, eSpells::Spell_ArcaneDischarge, true, 2000);
                            }

                            l_Rsl_Itr++;
                        }
                    }

                    m_Events.ScheduleEvent(eEvents::Event_BlueForAll, 3000);
                    m_Events.ScheduleEvent(RAND(eEvents::Event_VerticalConstruction, eEvents::Event_HorizontalConstruction, eEvents::Event_ChessConstruction), 4000);
                    break;
                }
                case eEvents::Event_ChessConstruction:
                {
                    uint8 l_Lsl_Itr = 1;
                    uint8 l_Lmsl_Itr = 1;
                    uint8 l_Msl_Itr = 1;
                    uint8 l_Rmsl_Itr = 1;
                    uint8 l_Rsl_Itr = 1;

                    for (auto l_Itr : m_LeftSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            if (l_Lsl_Itr % 2 != 0)
                            {
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                            }
                            else
                            {
                                l_Creature->RemoveAura(eSpells::Spell_BlueRuneState);
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_RedRuneState, true);
                                l_Creature->DelayedCastSpell(l_Creature, eSpells::Spell_ArcaneDischarge, true, 2000);
                            }

                            l_Lsl_Itr++;
                        }
                    }

                    for (auto l_Itr : m_LeftMiddleSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            if (l_Lmsl_Itr % 2 == 0)
                            {
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                            }
                            else
                            {
                                l_Creature->RemoveAura(eSpells::Spell_BlueRuneState);
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_RedRuneState, true);
                                l_Creature->DelayedCastSpell(l_Creature, eSpells::Spell_ArcaneDischarge, true, 2000);
                            }

                            l_Lmsl_Itr++;
                        }
                    }

                    for (auto l_Itr : m_MiddleSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            if (l_Msl_Itr % 2 != 0)
                            {
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                            }
                            else
                            {
                                l_Creature->RemoveAura(eSpells::Spell_BlueRuneState);
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_RedRuneState, true);
                                l_Creature->DelayedCastSpell(l_Creature, eSpells::Spell_ArcaneDischarge, true, 2000);
                            }

                            l_Msl_Itr++;
                        }
                    }

                    for (auto l_Itr : m_RightMiddleSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            if (l_Rmsl_Itr % 2 == 0)
                            {
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                            }
                            else
                            {
                                l_Creature->RemoveAura(eSpells::Spell_BlueRuneState);
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_RedRuneState, true);
                                l_Creature->DelayedCastSpell(l_Creature, eSpells::Spell_ArcaneDischarge, true, 2000);
                            }

                            l_Rmsl_Itr++;
                        }
                    }

                    for (auto l_Itr : m_RightSideBunnysGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            if (l_Rsl_Itr % 2 != 0)
                            {
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_BlueRuneState, true);
                            }
                            else
                            {
                                l_Creature->RemoveAura(eSpells::Spell_BlueRuneState);
                                l_Creature->CastSpell(l_Creature, eSpells::Spell_RedRuneState, true);
                                l_Creature->DelayedCastSpell(l_Creature, eSpells::Spell_ArcaneDischarge, true, 2000);
                            }

                            l_Rsl_Itr++;
                        }
                    }

                    m_Events.ScheduleEvent(eEvents::Event_BlueForAll, 3000);
                    m_Events.ScheduleEvent(RAND(eEvents::Event_VerticalConstruction, eEvents::Event_HorizontalConstruction, eEvents::Event_ChessConstruction), 4000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_rune_gauntlet_127397AI(p_Creature);
        }
};

/// Laser - 122272
class npc_laser_122272 : public CreatureScript
{
    public:
        npc_laser_122272() : CreatureScript("npc_laser_122272") { }

        struct npc_laser_122272AI : public ScriptedAI
        {
            npc_laser_122272AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_LaserFieldVisual = 246789,
                Spell_LaserFieldTargeted = 243851,
                Spell_MobileAreaTriggerFirst = 246721,
                Spell_MobileAreaTriggerSecond = 246718,
                Spell_MobileAreaTriggerThird = 246728,
                Spell_MobileAreaTriggerFourth = 246695
            };

            enum eEvents
            {
                Event_SummonFirstAreatrigger = 1,
                Event_SummonSecondAreatrigger = 2,
                Event_SummonThirdAreatrigger = 3,
                Event_SummonFourthAreatrigger = 4,
                Event_SummonFifthAreatrigger = 5
            };

            enum eActions
            {
                Action_SummonFirstAreatrigger = 1,
                Action_SummonSecondAreatrigger = 2,
                Action_SummonThirdAreatrigger = 3,
                Action_SummonFourthAreatrigger = 4,
                Action_SummonFifthAreatrigger = 5
            };

            EventMap m_Events;

            void InitializeAI() override
            {
                if (int32(me->GetPositionX()) == 5548)
                    DoCastAOE(eSpells::Spell_LaserFieldVisual, true);
                else if (int32(me->GetPositionX()) == 5533)
                    DoCastAOE(eSpells::Spell_LaserFieldVisual, true);
                else if (int32(me->GetPositionX()) == 5535)
                    DoCastAOE(eSpells::Spell_LaserFieldVisual, true);
                else if (int32(me->GetPositionX()) == 5534 && int32(me->GetPositionZ()) == -57)
                    DoCastAOE(eSpells::Spell_LaserFieldVisual, true);
                else if (int32(me->GetPositionY()) == 9294 && int32(me->GetPositionZ()) == -57)
                    DoCastAOE(eSpells::Spell_LaserFieldVisual, true);
                else if (int32(me->GetPositionX()) == 5544)
                    me->AI()->DoAction(eActions::Action_SummonFirstAreatrigger);
                else if (int32(me->GetPositionX()) == 5556)
                    me->AI()->DoAction(eActions::Action_SummonSecondAreatrigger);
                else if (int32(me->GetPositionX()) == 5534 && int32(me->GetPositionY()) == 9291 && int32(me->GetPositionZ()) == -70)
                    me->AI()->DoAction(eActions::Action_SummonThirdAreatrigger);
                else if (int32(me->GetPositionY()) == 9313)
                    me->AI()->DoAction(eActions::Action_SummonFourthAreatrigger);
                else if (int32(me->GetPositionX()) == 5510)
                    me->AI()->DoAction(eActions::Action_SummonFifthAreatrigger);
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_SummonFirstAreatrigger:
                {
                    m_Events.ScheduleEvent(eEvents::Event_SummonFirstAreatrigger, 5000);
                    break;
                }
                case eActions::Action_SummonSecondAreatrigger:
                {
                    m_Events.ScheduleEvent(eEvents::Event_SummonSecondAreatrigger, 5000);
                    break;
                }
                case eActions::Action_SummonThirdAreatrigger:
                {
                    m_Events.ScheduleEvent(eEvents::Event_SummonThirdAreatrigger, 5000);
                    break;
                }
                case eActions::Action_SummonFourthAreatrigger:
                {
                    m_Events.ScheduleEvent(eEvents::Event_SummonFourthAreatrigger, 5000);
                    break;
                }
                case eActions::Action_SummonFifthAreatrigger:
                {
                    m_Events.ScheduleEvent(eEvents::Event_SummonFifthAreatrigger, 5000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SummonFirstAreatrigger:
                {
                    DoCast(eSpells::Spell_MobileAreaTriggerFirst, true);
                    m_Events.ScheduleEvent(eEvents::Event_SummonFirstAreatrigger, 15000);
                    break;
                }
                case eEvents::Event_SummonSecondAreatrigger:
                {
                    DoCast(eSpells::Spell_MobileAreaTriggerSecond, true);
                    m_Events.ScheduleEvent(eEvents::Event_SummonSecondAreatrigger, 15000);
                    break;
                }
                case eEvents::Event_SummonThirdAreatrigger:
                {
                    DoCast(eSpells::Spell_MobileAreaTriggerThird, true);
                    m_Events.ScheduleEvent(eEvents::Event_SummonThirdAreatrigger, 15000);
                    break;
                }
                case eEvents::Event_SummonFourthAreatrigger:
                {
                    DoCast(eSpells::Spell_MobileAreaTriggerFirst, true);
                    m_Events.ScheduleEvent(eEvents::Event_SummonFourthAreatrigger, 15000);
                    break;
                }
                case eEvents::Event_SummonFifthAreatrigger:
                {
                    DoCast(eSpells::Spell_MobileAreaTriggerFourth, true);
                    m_Events.ScheduleEvent(eEvents::Event_SummonFifthAreatrigger, 15000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_laser_122272AI(p_Creature);
        }
};

/// Laser Field Complete - 124162
class npc_laser_field_complete_124162 : public CreatureScript
{
    public:
        npc_laser_field_complete_124162() : CreatureScript("npc_laser_field_complete_124162") { }

        struct npc_laser_field_complete_124162AI : public ScriptedAI
        {
            npc_laser_field_complete_124162AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eNpcs
            {
                Npc_GatekeepersImage = 124077
            };

            enum eKillcredits
            {
                Killcredit_BypassTheLaserField = 124162
            };

            enum eObjectives
            {
                Obj_BypassTheLaserField = 290950
            };

            enum eQuests
            {
                Quest_GatekeepersChallengeTenacity = 47689
            };

            enum eActions
            {
                Action_QuoramSummonedAfterLasers = 3
            };

            Position const m_QuoramSpawnPos = { 5536.821f, 9253.372f, -71.70815f, 1.635105f };

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) <= 5.0f && l_Player->HasQuest(eQuests::Quest_GatekeepersChallengeTenacity) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_BypassTheLaserField) == 0)
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_GatekeepersImage, m_QuoramSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(Action_QuoramSummonedAfterLasers);
                    }

                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_BypassTheLaserField);
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_laser_field_complete_124162AI(p_Creature);
        }
};

/// Boulders Event Complete - 124163
class npc_boulders_event_complete_124163 : public CreatureScript
{
    public:
        npc_boulders_event_complete_124163() : CreatureScript("npc_boulders_event_complete_124163") { }

        struct npc_boulders_event_complete_124163AI : public ScriptedAI
        {
            npc_boulders_event_complete_124163AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_LeftBoulder[11] =
            {
                { 5537.458f, 9256.789f, -53.65382f },
                { 5537.17f, 9258.517f, -54.2883f },
                { 5537.22f, 9262.19f, -55.81243f },
                { 5537.042f, 9268.459f, -55.62809f },
                { 5536.613f, 9276.106f, -59.30038f },
                { 5539.695f, 9277.856f, -59.81473f },
                { 5543.077f, 9275.974f, -63.30307f },
                { 5546.089f, 9272.463f, -67.77908f },
                { 5547.019f, 9268.327f, -70.28986f },
                { 5546.984f, 9260.262f, -71.12519f },
                { 5545.215f, 9254.247f, -70.29781f }
            };

            G3D::Vector3 const Path_MiddleBoulder[9] =
            {
                { 5536.241f, 9257.571f, -53.88146f },
                { 5536.103f, 9259.568f, -54.88489f },
                { 5536.142f, 9261.814f, -55.86251f },
                { 5535.946f, 9268.419f, -55.67527f },
                { 5535.627f, 9276.215f, -59.31195f },
                { 5535.159f, 9281.542f, -58.7529f },
                { 5534.644f, 9291.108f, -57.06438f },
                { 5534.135f, 9294.7f, -59.36883f },
                { 5534.602f, 9299.786f, -70.76894f }
            };

            G3D::Vector3 const Path_RightBoulder[11] =
            {
                { 5534.739f, 9256.849f, -53.68667f },
                { 5534.702f, 9258.656f, -54.47717f },
                { 5534.463f, 9261.404f, -55.9291f },
                { 5534.634f, 9267.652f, -55.28732f },
                { 5534.01f, 9275.661f, -59.28616f },
                { 5532.049f, 9277.217f, -59.38699f },
                { 5528.499f, 9276.215f, -62.52857f },
                { 5525.102f, 9271.769f, -67.95901f },
                { 5524.778f, 9267.13f, -70.73954f },
                { 5527.364f, 9259.26f, -71.6653f },
                { 5528.412f, 9254.164f, -71.92934f }
            };

            enum eNpcs
            {
                Npc_BoulderBunny = 120693
            };

            enum eKillcredits
            {
                Killcredit_BypassTheBoulders = 124163
            };

            enum eObjectives
            {
                Obj_BypassTheBoulders = 290951
            };

            enum eQuests
            {
                Quest_GatekeepersChallengeTenacity = 47689
            };

            enum eSpells
            {
                Spell_ArcaneDeathBall = 246752
            };

            enum eEvents
            {
                Event_SummonBoulders = 1
            };

            enum ePoints
            {
                Point_BoulderPathEnd = 3
            };

            Position const m_LeftBoulderSpawnPos = { 5539.413f, 9249.953f, -52.67831f, 2.122551f };
            Position const m_MiddleBoulderSpawnPos = { 5536.688f, 9248.438f, -52.52399f, 1.616046f };
            Position const m_RightBoulderSpawnPos = { 5533.852f, 9249.739f, -52.67831f, 1.108933f };
            EventMap m_Events;

            void InitializeAI() override
            {
                m_Events.ScheduleEvent(eEvents::Event_SummonBoulders, 5000);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SummonBoulders:
                {
                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_BoulderBunny, m_LeftBoulderSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SendPlaySpellVisualKit(85044, 0, 0);
                        }, 500);

                        l_Creature->SetSpeed(MOVE_FLIGHT, 1.0f);
                        l_Creature->SetPhaseMask(0, false);
                        l_Creature->SetInPhase(9540, false, true);
                        l_Creature->SendPlayHoverAnim(true);
                        l_Creature->CastSpell(l_Creature, eSpells::Spell_ArcaneDeathBall, true);
                        l_Creature->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_BoulderPathEnd, Path_LeftBoulder, 11);
                    }

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_BoulderBunny, m_MiddleBoulderSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SendPlaySpellVisualKit(85044, 0, 0);
                        }, 500);

                        l_Creature->SetSpeed(MOVE_FLIGHT, 1.0f);
                        l_Creature->SetPhaseMask(0, false);
                        l_Creature->SetInPhase(9540, false, true);
                        l_Creature->SendPlayHoverAnim(true);
                        l_Creature->CastSpell(l_Creature, eSpells::Spell_ArcaneDeathBall, true);
                        l_Creature->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_BoulderPathEnd, Path_MiddleBoulder, 9);
                    }

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_BoulderBunny, m_RightBoulderSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SendPlaySpellVisualKit(85044, 0, 0);
                        }, 500);

                        l_Creature->SetSpeed(MOVE_FLIGHT, 1.0f);
                        l_Creature->SetPhaseMask(0, false);
                        l_Creature->SetInPhase(9540, false, true);
                        l_Creature->SendPlayHoverAnim(true);
                        l_Creature->CastSpell(l_Creature, eSpells::Spell_ArcaneDeathBall, true);
                        l_Creature->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_BoulderPathEnd, Path_RightBoulder, 11);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SummonBoulders, 10000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_boulders_event_complete_124163AI(p_Creature);
        }
};

/// Vigilant Quoram - 124070
class npc_vigilant_quoram_124070 : public CreatureScript
{
    public:
        npc_vigilant_quoram_124070() : CreatureScript("npc_vigilant_quoram_124070") { }

        struct npc_vigilant_quoram_124070AI : public ScriptedAI
        {
            npc_vigilant_quoram_124070AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eQuests
            {
                Quest_GatekeepersChallengeTenacity = 47689,
                Quest_GatekeepersChallengeCunning = 47685,
                Quest_GatekeepersChallengeMastery = 47687,
                Quest_TheLongestVigil = 47883,
                Quest_TheDefilersLegacy = 47690
            };

            enum eKillcredits
            {
                Killcredit_SpeakToVigilantQuoram = 124809
            };

            enum eConversations
            {
                Conv_ThreeChallengeQuestsAccepted = 5380,
                Conv_GossipSelect = 5378
            };

            enum eActions
            {
                Action_YmeraLeaveConservatory = 2
            };

            enum eNpcs
            {
                Npc_Ymera = 123413
            };

            Position const YmeraSpawnPos = { 5525.587f, 9600.099f, -75.82684f, 4.849638f };

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                uint64 l_PlayerGuid = p_Player->GetGUID();

                p_Player->PlayerTalkClass->SendCloseGossip();
                me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);

                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_GossipSelect, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                me->AddDelayedEvent([this, l_PlayerGuid]() -> void
                {
                    if (Player* l_Player = ObjectAccessor::GetPlayer(*me, l_PlayerGuid))
                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_SpeakToVigilantQuoram);
                    me->DespawnOrUnsummon();
                }, 23000);
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_GatekeepersChallengeCunning:
                case eQuests::Quest_GatekeepersChallengeTenacity:
                case eQuests::Quest_GatekeepersChallengeMastery:
                {
                    if (p_Player->HasQuest(eQuests::Quest_GatekeepersChallengeCunning) &&
                        p_Player->HasQuest(eQuests::Quest_GatekeepersChallengeTenacity) &&
                        p_Player->HasQuest(eQuests::Quest_GatekeepersChallengeMastery))
                    {
                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ThreeChallengeQuestsAccepted, p_Player, nullptr, p_Player->GetPosition()))
                                delete l_Conversation;
                        }

                        p_Player->AddDelayedEvent([p_Player]() -> void
                        {
                            if (Creature* l_Creature = p_Player->FindNearestCreature(eNpcs::Npc_Ymera, 50.0f, true))
                            {
                                l_Creature->AI()->Talk(4, p_Player->GetGUID());
                            }
                        }, 17000);
                    }

                    break;
                }
                case eQuests::Quest_TheDefilersLegacy:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_Ymera, YmeraSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_YmeraLeaveConservatory);
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void sQuestReward(Player* p_Player, Quest const* p_Quest, uint32 /*p_Option*/) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_TheLongestVigil:
                {
                    Talk(0, p_Player->GetGUID());
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_vigilant_quoram_124070AI(p_Creature);
        }
};

/// Archimonde - 124677
class npc_archimonde_124677 : public CreatureScript
{
    public:
        npc_archimonde_124677() : CreatureScript("npc_archimonde_124677") { }

        struct npc_archimonde_124677AI : public ScriptedAI
        {
            npc_archimonde_124677AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eQuests
            {
                Quest_TheDefilersLegacy = 47690
            };

            enum eObjectives
            {
                Obj_ArchimondeLosLineHeard = 2911441,
                Obj_ArchimondeDefeated = 290962
            };

            enum eKillcredits
            {
                Killcredit_ArchimondeLosLineHeard = 2911441,
                Killcredit_SigilPlaced = 2911440,
                Killcredit_ArchimondeDefeated = 124677
            };

            enum eSpells
            {
                Spell_ArcaneVolley = 252314,
                Spell_EldritchCrash = 252312,
                Spell_EnergyBreach = 252315,
                Spell_EredarSpiritDeathStateLarge = 247636,
                Spell_ArcaneTorrent = 246808,
                Spell_EredarSpiritDeathState = 246059
            };

            enum eEvents
            {
                Event_CastArcaneVolley = 1,
                Event_CastEldritchCrash = 2,
                Event_CastEnergyBreach = 3,
                Event_SummonEventBunnys = 4,
                Event_SayPrizeLine = 5,
                Event_CastTransform = 6,
                Event_MoveToSigilPos = 7
            };

            enum eNpcs
            {
                Npc_EventBunnys = 120693
            };

            enum ePoints
            {
                Point_ArchimondeJumpComplete = 1,
                Point_MovingBunnyPathEnd = 4
            };

            Position m_TorrentBunnySpawnPos = { 5893.733f, 9325.046f, -24.48958f, 2.025405f };
            Position m_MovingBunnyFirstSpawnPos = { 5910.116f, 9286.377f, -1.341085f, 1.863468f };
            Position m_MovingBunnySecondSpawnPos = { 5939.869f, 9345.088f, -4.565257f, 2.999205f };
            Position m_MovingBunnyThirdSpawnPos = { 5849.065f, 9306.362f, -5.875118f, 6.077522f };
            EventMap m_Events;
            bool m_SeventyFivePctLine = false;
            bool m_FiftyPctLine = false;
            bool m_ThirtyPctLine = false;
            bool m_ArchimondeDefeated = false;

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) <= 60.0f && l_Player->HasQuest(eQuests::Quest_TheDefilersLegacy) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_ArchimondeLosLineHeard) == 0 && !me->isInCombat())
                {
                    Talk(0, l_Player->GetGUID());
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_ArchimondeLosLineHeard);
                }
            }

            void Reset() override
            {
                me->RemoveFlag(UNIT_FIELD_FLAGS, 33587984);
                m_SeventyFivePctLine = false;
                m_FiftyPctLine = false;
                m_ThirtyPctLine = false;
                m_ArchimondeDefeated = false;
            }

            void EnterCombat(Unit* /*victim*/) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastArcaneVolley, 3000);
                m_Events.ScheduleEvent(eEvents::Event_CastEldritchCrash, 6000);
                m_Events.ScheduleEvent(eEvents::Event_CastEnergyBreach, 9000);
            }

            void DamageTaken(Unit* attacker, uint32& damage, SpellInfo const* /*p_SpellInfo*/) override
            {
                if (me->GetHealthPct() <= 75 && !m_SeventyFivePctLine)
                {
                    Talk(1);
                    m_SeventyFivePctLine = true;
                }
                if (me->GetHealthPct() <= 50 && !m_FiftyPctLine)
                {
                    Talk(2);
                    m_FiftyPctLine = true;
                }
                if (me->GetHealthPct() <= 30 && !m_ThirtyPctLine)
                {
                    Talk(3);
                    m_ThirtyPctLine = true;
                }
                if (me->GetHealthPct() <= 30 && !m_ThirtyPctLine)
                {
                    Talk(3);
                    m_ThirtyPctLine = true;
                }
                if (damage >= me->GetHealth())
                {
                    damage = 0;
                    me->SetHealth(1);

                    if (!m_ArchimondeDefeated)
                    {
                        for (auto l_Itr : me->getThreatManager().getThreatList())
                        {
                            if (Unit* l_Unit = l_Itr->getTarget())
                            {
                                if (Player* l_Player = l_Unit->ToPlayer())
                                {
                                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_ArchimondeDefeated);
                                }
                            }
                        }

                        me->CastStop();
                        me->StopAttack();
                        me->SetFlag(UNIT_FIELD_FLAGS, 34114304);
                        Talk(4);
                        m_Events.Reset();
                        m_ArchimondeDefeated = true;
                        m_Events.ScheduleEvent(eEvents::Event_SummonEventBunnys, 6000);
                    }
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_ArchimondeJumpComplete:
                {
                    me->SendPlaySpellVisualKit(18536, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                if (!UpdateVictim())
                    return;

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastArcaneVolley:
                {
                    DoCast(eSpells::Spell_ArcaneVolley);
                    m_Events.ScheduleEvent(eEvents::Event_CastArcaneVolley, 13000);
                    break;
                }
                case eEvents::Event_CastEldritchCrash:
                {
                    DoCast(eSpells::Spell_EldritchCrash);
                    m_Events.ScheduleEvent(eEvents::Event_CastEldritchCrash, 15000);
                    break;
                }
                case eEvents::Event_CastEnergyBreach:
                {
                    DoCast(eSpells::Spell_EnergyBreach);
                    m_Events.ScheduleEvent(eEvents::Event_CastEnergyBreach, 20000);
                    break;
                }
                case eEvents::Event_SummonEventBunnys:
                {
                    if (Creature* l_TorrentBunny = me->SummonCreature(eNpcs::Npc_EventBunnys, m_TorrentBunnySpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN))
                    {
                        l_TorrentBunny->SetPhaseMask(0, true);
                        l_TorrentBunny->SetInPhase(9544, false, true);
                        l_TorrentBunny->CastSpell(l_TorrentBunny, eSpells::Spell_ArcaneTorrent, true);

                        l_TorrentBunny->AddDelayedEvent([l_TorrentBunny]() -> void
                        {

                            std::list<Player*> l_PlayerList;
                            l_TorrentBunny->GetPlayerListInGrid(l_PlayerList, 100.0f);

                            for (auto l_Player : l_PlayerList)
                            {
                                if (l_Player->GetQuestObjectiveCounter(eObjectives::Obj_ArchimondeDefeated) == 1)
                                {
                                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_SigilPlaced);
                                }
                            }

                            l_TorrentBunny->SendPlaySpellVisualKit(85162, 0, 0);
                            l_TorrentBunny->DespawnOrUnsummon();
                        }, 12000);
                    }

                    if (Creature* l_MovingBunny = me->SummonCreature(eNpcs::Npc_EventBunnys, m_MovingBunnyFirstSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN))
                    {
                        l_MovingBunny->SetPhaseMask(0, true);
                        l_MovingBunny->SetInPhase(9544, false, true);
                        l_MovingBunny->CastSpell(l_MovingBunny, eSpells::Spell_EredarSpiritDeathState, true);
                        l_MovingBunny->SetSpeed(MOVE_FLIGHT, 3.0f);

                        l_MovingBunny->AddDelayedEvent([l_MovingBunny]() -> void
                        {
                            G3D::Vector3 const Path_BunnyPath[5] =
                            {
                                { 5908.773f, 9289.999f, -1.012153f },
                                { 5883.416f, 9296.734f, -24.20833f },
                                { 5873.089f, 9320.859f, -24.50174f },
                                { 5886.412f, 9325.244f, -24.60069f },
                                { 5893.392f, 9325.174f, -30.82698f }
                            };

                            l_MovingBunny->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_MovingBunnyPathEnd, Path_BunnyPath, 5);
                        }, 4000);
                    }

                    if (Creature* l_MovingBunny = me->SummonCreature(eNpcs::Npc_EventBunnys, m_MovingBunnySecondSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN))
                    {
                        l_MovingBunny->SetPhaseMask(0, true);
                        l_MovingBunny->SetInPhase(9544, false, true);
                        l_MovingBunny->CastSpell(l_MovingBunny, eSpells::Spell_EredarSpiritDeathState, true);
                        l_MovingBunny->SetSpeed(MOVE_FLIGHT, 3.0f);

                        l_MovingBunny->AddDelayedEvent([l_MovingBunny]() -> void
                        {
                            G3D::Vector3 const Path_BunnyPath[6] =
                            {
                                { 5939.308f, 9343.301f, -4.701774f },
                                { 5930.892f, 9314.483f, -9.102206f },
                                { 5915.343f, 9300.522f, -11.23923f },
                                { 5897.411f, 9306.331f, -11.68641f },
                                { 5898.615f, 9318.021f, -17.59339f },
                                { 5893.611f, 9324.622f, -26.53725f }
                            };

                            l_MovingBunny->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_MovingBunnyPathEnd, Path_BunnyPath, 6);
                        }, 4000);
                    }

                    if (Creature* l_MovingBunny = me->SummonCreature(eNpcs::Npc_EventBunnys, m_MovingBunnyThirdSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN))
                    {
                        l_MovingBunny->SetPhaseMask(0, true);
                        l_MovingBunny->SetInPhase(9544, false, true);
                        l_MovingBunny->CastSpell(l_MovingBunny, eSpells::Spell_EredarSpiritDeathState, true);
                        l_MovingBunny->SetSpeed(MOVE_FLIGHT, 3.0f);

                        l_MovingBunny->AddDelayedEvent([l_MovingBunny]() -> void
                        {
                            G3D::Vector3 const Path_BunnyPath[6] =
                            {
                                { 5850.484f, 9306.817f, -6.743056f },
                                { 5862.523f, 9296.903f, -5.684233f },
                                { 5887.042f, 9280.009f, -8.632672f },
                                { 5906.002f, 9285.896f, -14.50275f },
                                { 5903.663f, 9310.126f, -17.73487f },
                                { 5893.766f, 9325.055f, -25.77976f }
                            };

                            l_MovingBunny->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_MovingBunnyPathEnd, Path_BunnyPath, 6);
                        }, 4000);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SayPrizeLine, 1000);
                    break;
                }
                case eEvents::Event_SayPrizeLine:
                {
                    Talk(5);
                    me->SetFlag(UNIT_FIELD_FLAGS, 33587984);
                    m_Events.ScheduleEvent(eEvents::Event_CastTransform, 6000);
                    break;
                }
                case eEvents::Event_CastTransform:
                {
                    me->SetVirtualItem(0, 0);
                    DoCast(eSpells::Spell_EredarSpiritDeathStateLarge, true);
                    m_Events.ScheduleEvent(eEvents::Event_MoveToSigilPos, 1000);
                    break;
                }
                case eEvents::Event_MoveToSigilPos:
                {
                    me->GetMotionMaster()->MoveJump(5893.92f, 9325.72f, -21.8206f, 20.0f, 10.0f, 0.0f, ePoints::Point_ArchimondeJumpComplete);
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_archimonde_124677AI(p_Creature);
        }
};

/// Return to Vindicaar  - 125270
class npc_return_to_vindicaar_125270 : public CreatureScript
{
    public:
        npc_return_to_vindicaar_125270() : CreatureScript("npc_return_to_vindicaar_125270") { }

        struct npc_return_to_vindicaar_125270AI : public ScriptedAI
        {
            npc_return_to_vindicaar_125270AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eQuests
            {
                Quest_TheSigilOfAwakening = 48107,
                Quest_ShadowOfTheTriumvirate = 47416,
                Quest_ABeaconInTheDark = 47220
            };

            enum eObjectives
            {
                Obj_ReturnToTheVindicaar = 291536
            };

            enum eKillcredits
            {
                Killcredit_ReturnToTheVindicaar = 125270,
                Killcredit_ReturnToTheVindicaarLast = 120533
            };

            enum eActions
            {
                Action_YmeraReachedVindicaar = 4,
                Action_VelenMoveAfterTeleportOnVindicaar = 25
            };

            enum eNpcs
            {
                Npc_Ymera = 123413,
                Npc_Velen = 128735
            };

            Position const YmeraSpawnPos = { 4602.19f, 9827.55f, 68.062f, 0.6457718f };
            Position const VelenSpawnPos = { 4602.54f, 9826.69f, 68.0632f, 0.1513288f };

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) < 5.0f && l_Player->HasQuest(eQuests::Quest_TheSigilOfAwakening) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_ReturnToTheVindicaar) == 0)
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Ymera, YmeraSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_YmeraReachedVindicaar);
                    }

                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_ReturnToTheVindicaar);
                }

                if (me->GetExactDist2d(l_Player) < 5.0f && l_Player->GetQuestStatus(eQuests::Quest_ShadowOfTheTriumvirate) == QUEST_STATUS_INCOMPLETE)
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Velen, VelenSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenMoveAfterTeleportOnVindicaar);
                    }

                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_ReturnToTheVindicaar);
                }

                if (me->GetExactDist2d(l_Player) < 5.0f && l_Player->GetQuestStatus(eQuests::Quest_ABeaconInTheDark) == QUEST_STATUS_INCOMPLETE)
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_ReturnToTheVindicaarLast);
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_return_to_vindicaar_125270AI(p_Creature);
        }
};

/// Illidan Stormrage - 126408
class npc_illidan_stormrage_126408 : public CreatureScript
{
    public:
        npc_illidan_stormrage_126408() : CreatureScript("npc_illidan_stormrage_126408") { }

        struct npc_illidan_stormrage_126408AI : public ScriptedAI
        {
            npc_illidan_stormrage_126408AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eConversations
            {
                Conv_QuestWhereTheyLeastExpectItAccept = 5884,
                Conv_QuestInvasionPointOffensive = 5885
            };

            enum eQuests
            {
                Quest_WhereTheyLeastExpectIt = 48461,
                Quest_InvasionPointOffensive = 48513
            };

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_WhereTheyLeastExpectIt:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestWhereTheyLeastExpectItAccept, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eQuests::Quest_InvasionPointOffensive:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestInvasionPointOffensive, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_illidan_stormrage_126408AI(p_Creature);
        }
};

/// Alleria Windrunner - 121230
class npc_alleria_windrunner_121230 : public CreatureScript
{
    public:
        npc_alleria_windrunner_121230() : CreatureScript("npc_alleria_windrunner_121230") { }

        struct npc_alleria_windrunner_121230AI : public ScriptedAI
        {
            npc_alleria_windrunner_121230AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_AlleriaWithVereesa[26] =
            {
                { 476.9357f, 1416.478f, 762.7332f },
                { 480.4217f, 1418.384f, 762.2506f },
                { 480.9863f, 1419.149f, 761.8663f },
                { 481.7363f, 1419.649f, 761.6163f },
                { 482.7363f, 1420.399f, 761.3663f },
                { 486.3283f, 1424.452f, 760.0472f },
                { 487.8283f, 1426.202f, 760.0472f },
                { 488.279f, 1426.788f, 759.4353f },
                { 489.029f, 1428.038f, 758.6853f },
                { 491.029f, 1430.788f, 758.1853f },
                { 492.6555f, 1433.517f, 757.8093f },
                { 493.1555f, 1434.517f, 757.5593f },
                { 492.8863f, 1436.988f, 757.4059f },
                { 491.6363f, 1438.488f, 757.6559f },
                { 491.1705f, 1438.896f, 757.5518f },
                { 490.1705f, 1439.396f, 757.5518f },
                { 485.0173f, 1444.23f, 757.6476f },
                { 482.9025f, 1447.457f, 757.5328f },
                { 482.3746f, 1450.64f, 757.8241f },
                { 486.0988f, 1461.113f, 758.1435f },
                { 487.0391f, 1462.516f, 759.0768f },
                { 493.2786f, 1465.61f, 763.8051f },
                { 495.898f, 1467.332f, 766.071f },
                { 497.648f, 1469.332f, 766.321f },
                { 498.4977f, 1469.744f, 766.1761f },
                { 501.7951f, 1471.828f, 765.918f }
            };

            G3D::Vector3 const Path_AlleriaToDefaltPos[3] =
            {
                { 501.2222f, 1473.982f, 766.1965f },
                { 499.9401f, 1478.886f, 766.2402f },
                { 499.4913f, 1483.069f, 766.0507f }
            };

            G3D::Vector3 const Path_VereesaWithAlleria[32] =
            {
                { 474.4583f, 1413.523f, 764.0354f },
                { 476.2083f, 1414.523f, 763.5354f },
                { 477.3785f, 1415.167f, 762.9388f },
                { 478.9193f, 1415.972f, 762.7899f },
                { 481.7112f, 1417.573f, 762.0496f },
                { 482.856f, 1418.495f, 761.6634f },
                { 483.606f, 1419.245f, 761.6634f },
                { 485.4463f, 1420.719f, 760.6311f },
                { 489.3677f, 1425.545f, 759.0976f },
                { 490.0443f, 1426.516f, 758.9124f },
                { 492.7943f, 1430.266f, 758.1624f },
                { 493.0052f, 1430.701f, 757.6777f },
                { 494.993f, 1436.129f, 757.118f },
                { 493.1445f, 1438.636f, 757.3527f },
                { 492.3281f, 1439.826f, 757.2089f },
                { 491.2896f, 1440.715f, 757.5339f },
                { 490.2896f, 1441.465f, 757.5339f },
                { 488.4948f, 1442.54f, 757.4483f },
                { 486.455f, 1445.25f, 757.696f },
                { 485.5503f, 1445.927f, 757.4889f },
                { 484.5771f, 1447.778f, 757.5833f },
                { 483.0434f, 1449.5f, 757.6973f },
                { 484.4219f, 1455.537f, 757.7568f },
                { 486.8286f, 1459.629f, 758.2307f },
                { 487.6215f, 1460.913f, 758.7212f },
                { 491.8246f, 1463.099f, 761.8396f },
                { 494.9921f, 1465.034f, 765.033f },
                { 495.4514f, 1465.141f, 765.1846f },
                { 496.7721f, 1465.772f, 766.2791f },
                { 498.0221f, 1466.272f, 766.2791f },
                { 499.3454f, 1466.953f, 765.9201f },
                { 502.7778f, 1468.426f, 765.918f }
            };

            G3D::Vector3 const Path_VereesaToDefaultPos[4] =
            {
                { 504.9774f, 1467.852f, 766.196f },
                { 508.045f, 1466.68f, 766.2422f },
                { 510.545f, 1466.18f, 766.2422f },
                { 512.4549f, 1465.396f, 766.0504f }
            };

            G3D::Vector3 const Path_AlleriaArrived[6] =
            {
                { 4624.336f, 9835.655f, 71.47112f },
                { 4633.478f, 9834.225f, 71.41147f },
                { 4635.097f, 9833.971f, 71.32906f },
                { 4643.626f, 9832.636f, 71.37483f },
                { 4648.533f, 9831.868f, 71.29181f },
                { 4649.693f, 9831.687f, 71.26814f }
            };

            G3D::Vector3 const Path_AlleriaToConsole[25] =
            {
                { 4649.693f, 9831.687f, 71.33279f },
                { 4656.278f, 9822.58f, 70.31174f },
                { 4662.778f, 9817.33f, 68.56174f },
                { 4670.778f, 9814.33f, 66.81174f },
                { 4679.028f, 9812.58f, 64.81174f },
                { 4684.778f, 9813.33f, 63.56174f },
                { 4690.278f, 9814.08f, 62.31174f },
                { 4697.778f, 9816.58f, 60.56174f },
                { 4703.528f, 9819.58f, 58.81174f },
                { 4707.528f, 9823.08f, 57.56174f },
                { 4712.028f, 9827.33f, 56.31174f },
                { 4714.028f, 9829.83f, 56.06174f },
                { 4713.778f, 9832.83f, 56.06174f },
                { 4711.278f, 9835.58f, 56.31174f },
                { 4708.778f, 9837.58f, 56.31174f },
                { 4706.528f, 9840.08f, 56.31174f },
                { 4705.028f, 9843.33f, 56.31174f },
                { 4705.028f, 9845.58f, 56.31174f },
                { 4705.528f, 9847.08f, 56.56174f },
                { 4706.778f, 9850.33f, 56.56174f },
                { 4708.028f, 9853.33f, 56.56174f },
                { 4711.778f, 9857.83f, 57.06174f },
                { 4721.278f, 9860.08f, 63.56174f },
                { 4722.778f, 9861.08f, 64.81174f },
                { 4728.363f, 9862.473f, 64.29067f }
            };

            G3D::Vector3 const Path_AlleriaWithArkhaanFirst[25] =
            {
                { 5155.467f, 10134.45f, -119.0443f },
                { 5156.217f, 10136.2f, -119.7943f },
                { 5156.967f, 10137.95f, -120.7943f },
                { 5157.717f, 10139.95f, -121.5443f },
                { 5158.467f, 10141.2f, -122.0443f },
                { 5158.467f, 10142.95f, -122.7943f },
                { 5158.467f, 10144.95f, -123.5443f },
                { 5158.467f, 10146.95f, -124.2943f },
                { 5158.467f, 10149.95f, -125.0443f },
                { 5158.467f, 10151.95f, -126.0443f },
                { 5158.519f, 10153.91f, -127.0923f },
                { 5160.379f, 10157.61f, -128.4647f },
                { 5161.129f, 10159.36f, -129.2147f },
                { 5162.629f, 10163.11f, -129.9647f },
                { 5164.129f, 10166.61f, -130.4647f },
                { 5165.289f, 10169.05f, -131.1697f },
                { 5172.098f, 10177.74f, -131.3321f },
                { 5173.559f, 10179.48f, -131.5355f },
                { 5174.505f, 10182.71f, -130.3677f },
                { 5178.505f, 10183.96f, -130.1177f },
                { 5180.414f, 10185.46f, -129.829f },
                { 5182.566f, 10186.61f, -129.0839f },
                { 5186.566f, 10187.86f, -128.8339f },
                { 5190.816f, 10191.86f, -127.5839f },
                { 5191.581f, 10192.47f, -127.748f }
            };

            G3D::Vector3 const Path_AlleriaWithArkhaanSecond[30] =
            {
                { 5200.216f, 10197.74f, -127.729f },
                { 5202.966f, 10199.49f, -126.979f },
                { 5203.966f, 10199.99f, -126.979f },
                { 5205.216f, 10200.99f, -126.729f },
                { 5205.716f, 10201.24f, -126.479f },
                { 5206.966f, 10201.49f, -125.979f },
                { 5210.216f, 10202.49f, -124.979f },
                { 5211.752f, 10202.89f, -124.926f },
                { 5215.881f, 10204.46f, -123.6052f },
                { 5217.952f, 10205.31f, -123.2526f },
                { 5221.206f, 10206.44f, -121.5f },
                { 5224.206f, 10207.69f, -120.5f },
                { 5225.456f, 10208.19f, -120.25f },
                { 5229.956f, 10210.19f, -118.5f },
                { 5232.113f, 10211.25f, -117.8959f },
                { 5234.955f, 10212.54f, -116.6235f },
                { 5237.705f, 10213.79f, -115.6235f },
                { 5239.705f, 10215.04f, -114.8735f },
                { 5240.433f, 10215.28f, -114.662f },
                { 5243.925f, 10216.47f, -114.0658f },
                { 5249.342f, 10218.69f, -112.8745f },
                { 5254.596f, 10223.56f, -111.0656f },
                { 5260.032f, 10223.87f, -109.7816f },
                { 5263.032f, 10223.87f, -109.2816f },
                { 5265.282f, 10224.87f, -108.5316f },
                { 5266.782f, 10225.62f, -108.2816f },
                { 5268.782f, 10226.62f, -108.2816f },
                { 5269.782f, 10227.37f, -108.2816f },
                { 5272.194f, 10228.62f, -108.2147f },
                { 5274.882f, 10230.44f, -107.9964f }
            };

            G3D::Vector3 const Path_AlleriaLeaveIsolon[7] =
            {
                { 5334.354f, 10396.38f, -76.55722f },
                { 5341.354f, 10397.63f, -76.30722f },
                { 5349.354f, 10397.63f, -76.05722f },
                { 5359.604f, 10397.38f, -75.55722f },
                { 5371.854f, 10394.88f, -75.30722f },
                { 5384.104f, 10385.38f, -74.55722f },
                { 5405.028f, 10378.22f, -77.4266f }
            };

            G3D::Vector3 const Path_AlleriaIntoVoidFirst[32] =
            {
                { 5507.811f, 10314.82f, -100.1478f },
                { 5510.811f, 10315.07f, -99.6478f },
                { 5514.061f, 10314.32f, -99.3978f },
                { 5516.811f, 10313.07f, -99.3978f },
                { 5518.851f, 10310.58f, -99.7084f },
                { 5520.575f, 10306.99f, -99.95114f },
                { 5522.575f, 10304.24f, -99.95114f },
                { 5529.393f, 10297.94f, -100.4579f },
                { 5534.137f, 10295.35f, -100.3154f },
                { 5536.137f, 10294.35f, -100.0654f },
                { 5541.643f, 10294.8f, -100.2589f },
                { 5545.667f, 10296.14f, -100.0565f },
                { 5551.809f, 10297.9f, -99.57593f },
                { 5554.026f, 10298.8f, -98.79437f },
                { 5556.526f, 10299.55f, -98.04437f },
                { 5558.276f, 10300.05f, -97.79437f },
                { 5560.647f, 10300.83f, -95.88634f },
                { 5563.848f, 10302.71f, -94.08417f },
                { 5564.098f, 10302.71f, -94.08417f },
                { 5570.098f, 10305.96f, -94.08417f },
                { 5572.761f, 10307.93f, -92.96157f },
                { 5574.511f, 10309.68f, -93.21157f },
                { 5578.511f, 10312.68f, -92.96157f },
                { 5581.446f, 10314.4f, -91.79865f },
                { 5584.202f, 10317.72f, -91.23778f },
                { 5586.202f, 10318.97f, -91.23778f },
                { 5588.952f, 10319.72f, -90.98778f },
                { 5590.675f, 10320.57f, -90.90528f },
                { 5592.754f, 10322.88f, -89.842f },
                { 5594.254f, 10323.88f, -89.342f },
                { 5597.754f, 10327.13f, -86.342f },
                { 5599.757f, 10328.0f, -86.19697f }
            };

            G3D::Vector3 const Path_AlleriaIntoVoidSecond[37] =
            {
                { 5603.039f, 10330.71f, -84.61973f },
                { 5607.789f, 10333.71f, -84.61973f },
                { 5610.539f, 10334.96f, -84.61973f },
                { 5612.789f, 10336.96f, -83.86973f },
                { 5615.789f, 10339.46f, -83.36973f },
                { 5618.672f, 10342.44f, -81.79849f },
                { 5620.422f, 10344.19f, -81.29849f },
                { 5623.172f, 10347.44f, -79.79849f },
                { 5625.172f, 10349.69f, -78.79849f },
                { 5627.782f, 10352.68f, -77.62643f },
                { 5629.327f, 10354.04f, -76.92082f },
                { 5632.691f, 10356.86f, -75.79086f },
                { 5634.964f, 10359.15f, -74.76947f },
                { 5636.464f, 10360.9f, -73.76947f },
                { 5638.214f, 10361.9f, -73.01947f },
                { 5641.714f, 10363.65f, -71.76947f },
                { 5643.584f, 10364.71f, -71.50706f },
                { 5646.587f, 10365.11f, -70.71822f },
                { 5648.587f, 10365.61f, -69.96822f },
                { 5651.337f, 10365.61f, -69.21822f },
                { 5653.337f, 10365.36f, -68.46822f },
                { 5655.214f, 10365.37f, -67.91965f },
                { 5658.101f, 10365.17f, -67.17114f },
                { 5660.101f, 10364.92f, -66.42114f },
                { 5662.101f, 10364.92f, -65.67114f },
                { 5665.994f, 10365.12f, -64.25188f },
                { 5667.744f, 10365.12f, -63.75188f },
                { 5669.244f, 10365.12f, -63.25188f },
                { 5671.244f, 10365.12f, -62.50188f },
                { 5673.244f, 10365.12f, -61.50188f },
                { 5674.762f, 10365.05f, -61.10914f },
                { 5677.108f, 10365.5f, -60.33107f },
                { 5680.608f, 10366.0f, -58.83107f },
                { 5682.358f, 10366.75f, -58.33107f },
                { 5685.108f, 10368.25f, -57.58107f },
                { 5688.958f, 10375.74f, -55.5661f },
                { 5691.963f, 10382.35f, -53.48377f }
            };

            G3D::Vector3 const Path_AlleriaIntoVoidThird[29] =
            {
                { 5697.929f, 10384.09f, -51.31948f },
                { 5700.429f, 10386.34f, -50.56948f },
                { 5701.429f, 10388.09f, -50.06948f },
                { 5702.179f, 10389.84f, -49.31948f },
                { 5703.907f, 10391.84f, -48.33567f },
                { 5705.907f, 10395.34f, -47.08567f },
                { 5708.407f, 10397.34f, -46.33567f },
                { 5710.356f, 10398.59f, -45.91432f },
                { 5715.356f, 10399.09f, -44.91432f },
                { 5718.606f, 10398.09f, -44.66432f },
                { 5726.144f, 10391.58f, -44.73854f },
                { 5728.394f, 10391.83f, -44.73854f },
                { 5733.303f, 10395.2f, -43.50546f },
                { 5735.553f, 10395.2f, -43.00546f },
                { 5737.303f, 10395.2f, -42.75546f },
                { 5740.053f, 10396.7f, -42.25546f },
                { 5741.553f, 10399.2f, -41.50546f },
                { 5741.614f, 10399.4f, -41.31511f },
                { 5742.364f, 10400.65f, -41.06511f },
                { 5742.614f, 10401.4f, -40.56511f },
                { 5742.864f, 10402.9f, -39.81511f },
                { 5743.114f, 10404.65f, -39.06511f },
                { 5744.114f, 10407.15f, -38.81511f },
                { 5745.682f, 10410.04f, -38.62906f },
                { 5748.182f, 10412.29f, -37.87906f },
                { 5750.682f, 10413.54f, -36.87906f },
                { 5752.432f, 10414.04f, -35.62906f },
                { 5754.735f, 10416.13f, -35.14166f },
                { 5757.409f, 10412.89f, -34.92651f }
            };

            G3D::Vector3 const Path_AlleriaIntoVoidFourth[38] =
            {
                { 5758.917f, 10426.26f, -33.79771f },
                { 5765.243f, 10429.93f, -33.27905f },
                { 5768.493f, 10428.93f, -33.27905f },
                { 5776.399f, 10421.23f, -34.58598f },
                { 5779.149f, 10418.73f, -34.83598f },
                { 5781.359f, 10417.71f, -35.1124f },
                { 5784.359f, 10417.46f, -35.6124f },
                { 5785.359f, 10419.71f, -35.3624f },
                { 5781.276f, 10425.46f, -34.48867f },
                { 5777.776f, 10429.96f, -33.73867f },
                { 5773.844f, 10435.21f, -32.61715f },
                { 5772.594f, 10437.71f, -32.36715f },
                { 5771.094f, 10440.21f, -31.61715f },
                { 5769.18f, 10444.16f, -30.03626f },
                { 5767.93f, 10446.41f, -29.28626f },
                { 5767.18f, 10449.16f, -28.28626f },
                { 5766.43f, 10452.16f, -26.53626f },
                { 5765.73f, 10455.48f, -25.44038f },
                { 5766.48f, 10459.98f, -23.19038f },
                { 5767.86f, 10465.65f, -21.52402f },
                { 5769.36f, 10468.9f, -20.52402f },
                { 5771.61f, 10473.4f, -19.77402f },
                { 5773.11f, 10476.15f, -19.02402f },
                { 5775.84f, 10479.16f, -18.16712f },
                { 5777.84f, 10481.16f, -17.66712f },
                { 5780.59f, 10483.66f, -16.66712f },
                { 5782.84f, 10485.66f, -15.66712f },
                { 5785.896f, 10487.96f, -14.95657f },
                { 5788.146f, 10489.96f, -14.20657f },
                { 5790.646f, 10491.96f, -13.45657f },
                { 5792.896f, 10493.71f, -12.70657f },
                { 5794.419f, 10495.03f, -12.25637f },
                { 5797.669f, 10497.53f, -11.50637f },
                { 5799.919f, 10499.28f, -10.75637f },
                { 5801.669f, 10500.53f, -10.25637f },
                { 5803.619f, 10502.16f, -9.530529f },
                { 5805.619f, 10504.16f, -8.780529f },
                { 5808.708f, 10507.25f, -8.277498f }
            };

            G3D::Vector3 const Path_AlleriaToVoidTear[4] =
            {
                { 5810.308f, 10504.08f, -8.383265f },
                { 5811.407f, 10503.41f, -8.664583f },
                { 5813.52f, 10503.59f, -8.309756f },
                { 5815.569f, 10504.19f, -8.006075f }
            };

            G3D::Vector3 const Path_AlleriaToBeacon[9] =
            {
                { 5592.663f, 10614.48f, 5.524477f },
                { 5585.831f, 10606.9f, 5.524477f },
                { 5578.025f, 10598.6f, 5.509833f },
                { 5567.828f, 10589.07f, 5.509833f },
                { 5561.64f, 10583.46f, 5.571845f },
                { 5560.119f, 10581.67f, 5.633857f },
                { 5557.059f, 10578.5f, 7.599421f },
                { 5554.255f, 10575.14f, 8.189348f },
                { 5550.626f, 10570.38f, 7.772648f }
            };

            G3D::Vector3 const Path_AlleriaFromBeacon[19] =
            {
                { 5559.456f, 10582.14f, 5.648564f },
                { 5554.541f, 10574.01f, 8.210606f },
                { 5555.541f, 10575.01f, 7.960606f },
                { 5556.291f, 10575.76f, 7.960606f },
                { 5558.041f, 10577.76f, 7.710606f },
                { 5559.291f, 10581.51f, 6.460606f },
                { 5562.253f, 10593.59f, 5.623944f },
                { 5567.529f, 10605.64f, 6.024477f },
                { 5571.476f, 10613.75f, 5.774477f },
                { 5573.346f, 10623.44f, 5.649477f },
                { 5573.874f, 10640.87f, 7.583524f },
                { 5570.041f, 10649.96f, 7.93118f },
                { 5561.348f, 10655.93f, 7.363835f },
                { 5552.657f, 10657.33f, 7.445561f },
                { 5542.922f, 10657.35f, 6.909896f },
                { 5538.922f, 10657.35f, 6.159896f },
                { 5535.922f, 10657.6f, 5.659896f },
                { 5532.922f, 10657.6f, 5.159896f },
                { 5527.117f, 10657.56f, 3.833384f }
            };

            enum eActions
            {
                Action_AlleriaStartVereesaEvent = 3,
                Action_AlleriaArrived = 31,
                Action_AlleriaStartPathToConsole = 32,
                Action_ArkhaanStartPathToAlleria = 33,
                Action_AlleriaStartFirstPathWithArkhaan = 34,
                Action_AlleriaLeaveIsolon = 35,
                Action_AlleriaMeetOnUmbraHollows = 36,
                Action_AlleriaFirstMoveIntoVoid = 37,
                Action_LocusFirstMoveIntoVoid = 38,
                Action_AlleriaSecondMoveIntoVoid = 39,
                Action_LocusSecondMoveIntoVoid = 40,
                Action_AlleriaThirdMoveIntoVoid = 41,
                Action_LocusThirdMoveIntoVoid = 42,
                Action_AlleriaFourthMoveIntoVoid = 43,
                Action_LocusFourthMoveIntoVoid = 44,
                Action_AlleriaBeforeFight = 50,
                Action_AlleriaPathToBeacon = 51,
                Action_LocusPathToBeacon = 52
            };

            enum eQuests
            {
                Quest_CustomAlleriaAndVereesaEventComplete = 481071,
                Quest_WhispersFromOronaar = 40761,
                Quest_ArkhaansPrayers = 47101,
                Quest_ArkhaansPeril = 47184,
                Quest_ThrowingShade = 47203,
                Quest_SourcesOfDarkness = 47217,
                Quest_AVesselMadeReady = 47219,
                Quest_CustomQuestAlleriaWithGift = 472190,
                Quest_ABeaconInTheDark = 47220
            };

            enum eObjectives
            {
                Obj_MeetAlleriaInUmbraHollows = 290621,
                Obj_DismantledPortalExamined = 290096,
                Obj_ImageOfSaprishExamined = 290652,
                Obj_VoidforgeExamined = 290100,
                Obj_AlleriaAndLocusVisibleFirstEnd = 2901003,
                Obj_AlleriaAndLocusVisibleSecondEnd = 2901004,
                Obj_AlleriaAndLocusVisibleThirdEnd = 2901005,
                Obj_MeetAlleriaAndLocusWalker = 292543,
                Obj_ConversationHeard = 2938851
            };

            enum eKillcredits
            {
                Killcredit_GoWithVelen = 120533,
                Killcredit_MeetAlleriaInUmbraHollows = 123051,
                Killcredit_AlleriaAndLocusVisibleFirst = 2901000,
                Killcredit_AlleriaAndLocusVisibleFirstEnd = 2901003,
                Killcredit_AlleriaAndLocusVisibleSecond = 2901001,
                Killcredit_AlleriaAndLocusVisibleSecondEnd = 2901004,
                Killcredit_AlleriaAndLocusVisibleThird = 2901002,
                Killcredit_AlleriaAndLocusVisibleThirdEnd = 2901005,
                Killcredit_AlleriaAndLocusAfterVoidVisible = 121660,
                Killcredit_MeetAlleriaAndLocusWalker = 121644,
                Killcredit_ConversationHeard = 2938851
            };

            enum eConversations
            {
                Conv_AlleriaAndVereesa = 5412,
                Conv_ArkhaanMoveToMe = 5136,
                Conv_QuestArkhaansPerilRewarded = 5001,
                Conv_AlleriaMeetOnUmbraHollows = 5007,
                Conv_SecondPathInVoid = 5010,
                Conv_ThirdPathInVoid = 5011,
                Conv_FourthPathInVoid = 5012,
                Conv_QuestSourcesOfDarknessAccepted = 5053,
                Conv_AlleriaLosConversation = 5197,
                Conv_QuestABeaconInTheDarkAccepted = 5875,
                Conv_AlleriaPathWithLocus = 5058,
                Conv_AlleriaLastConversation = 5059
            };

            enum ePoints
            {
                Point_AlleriaPathWithVereesaEnd = 1,
                Point_AlleriaPathToDefaltPos = 2,
                Point_VereesaPathWithAlleraEnd = 3,
                Point_VereesaPathToDefaultPos = 4,
                Point_AlleriaArrivedPathEnd = 5,
                Point_AlleriaPathToConsoleEnd = 6,
                Point_FirstPathWithArkhaanEnd = 7,
                Point_JumpEnd = 8,
                PointSecondPathWithArkhaanEnd = 9,
                Point_AlleriaIsolonLeavePathEnd = 10,
                Point_MoveToPortalEnd = 11,
                Point_FirstPathIntoVoidEnd = 12,
                Point_SecondPathIntoVoidEnd = 13,
                Point_ThirdPathIntoVoidEnd = 14,
                Point_FourthPathIntoVoidEnd = 15,
                Point_PathToVoidTearEnd = 16,
                Point_PathToBeaconEnd = 17,
                Point_PathFromBeaconEnd = 18
            };

            enum eEvents
            {
                Event_StartPathWithVereesa = 1,
                Event_StartPathToDefaultPos = 2,
                Event_Despawn = 3,
                Event_Killcredit = 4,
                Event_SaySecondLine = 5,
                Event_StartPathToConsole = 6,
                Event_StartFirstPathWithArkhaan = 7,
                Event_SayThirdLine = 8,
                Event_StartIsolonLeavePath = 9,
                Event_StartThirdPathIntoVoid = 10,
                Event_StartFourthPathIntoVoid = 11,
                Event_StartPathToVoidTear = 12,
                Event_PlayVisualTeleport = 13,
                Event_RewardCustomQuest = 14,
                Event_PathToBeaconConv = 15,
                Event_StartPathToBeacon = 16,
                Event_SetFacingToPlayer = 17,
                Event_StartPathFromBeacon = 18
            };

            enum eNpcs
            {
                Npc_Vereesa = 121179,
                Npc_Arkhaan = 121518,
                Npc_Locus = 121597
            };

            enum eSpells
            {
                Spell_VoidRift = 243062,
                Spell_InvisibilityDetect = 155183,
                Spell_VoidRiftPlayer = 242960,
                Spell_LocusWalkersGift = 251538,
                Spell_LocusWalkersGiftAura = 251561
            };

            ObjectGuid m_SummonerGuid;
            ObjectGuid m_VereesaGuid;
            ObjectGuid m_LocusGuid;
            EventMap m_Events;
            Position const m_VereesaSpawnPos = { 472.538f, 1412.38f, 764.132f, 6.111398f };
            Position const m_ArkhaanSpawnPos = { 5141.595f, 10118.23f, -114.8044f, 0.8315188f };
            Position const m_LocusAfterArkhaanDeadSpawnPos = { 5325.945f, 10384.99f, -77.06825f, 0.984087f };
            Position const m_LocusOnCaveEnterSpawnPos = { 5482.963f, 10340.47f, -100.3663f, 2.26723f };
            Position const m_LocusIntoVoidFirstSpawnPos = { 5500.706f, 10314.21f, -100.4401f, 5.981054f };
            Position const m_LocusIntoVoidSecondSpawnPos = { 5602.174f, 10326.08f, -86.76736f, 0.6139886f };
            Position const m_LocusIntoVoidThirdSpawnPos = { 5693.904f, 10377.63f, -53.40863f, 0.3603252f };
            Position const m_LocusIntoVoidFourthSpawnPos = { 5755.422f, 10412.37f, -35.32883f, 2.078787f };
            Position const m_LocusPathToBeaconSpawnPos = { 5599.364f, 10617.19f, 5.508773f, 2.518756f };

            void InitializeAI() override
            {
                DoCast(eSpells::Spell_InvisibilityDetect, true);
            }

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) < 30.0f && l_Player->HasQuest(eQuests::Quest_ThrowingShade) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_MeetAlleriaInUmbraHollows) == 0 && me->HasInPhaseList(9949) &&
                    !me->isSummon())
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_MeetAlleriaInUmbraHollows);

                    if (Creature* l_Creature = l_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_MoveToPortalEnd, 5483.0f, 10340.2f, -100.4079f);
                        }, 26000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->HandleEmoteCommand(EMOTE_ONESHOT_SPELL_CAST_OMNI);
                            l_Creature->SendPlaySpellVisualKit(82528, 0, 0);
                            l_Creature->DespawnOrUnsummon();
                        }, 29000);
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Locus, m_LocusOnCaveEnterSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SetFacingTo(5.480334f);

                        }, 21000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->HandleEmoteCommand(EMOTE_ONESHOT_SPELL_CAST_OMNI);
                            l_Creature->SendPlaySpellVisualKit(82528, 0, 0);
                            l_Creature->DespawnOrUnsummon();
                        }, 24000);
                    }

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AlleriaMeetOnUmbraHollows, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }

                if (me->GetExactDist2d(l_Player) < 15.0f && l_Player->HasQuest(eQuests::Quest_ThrowingShade) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_DismantledPortalExamined) == 1 &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_AlleriaAndLocusVisibleFirstEnd) == 0 &&
                    me->HasInPhaseList(9981))
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_AlleriaAndLocusVisibleFirstEnd);

                    if (Creature* l_Creature = l_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AlleriaSecondMoveIntoVoid);
                    }
                }

                if (me->GetExactDist2d(l_Player) < 15.0f && l_Player->HasQuest(eQuests::Quest_ThrowingShade) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_ImageOfSaprishExamined) == 1 &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_AlleriaAndLocusVisibleSecondEnd) == 0 &&
                    me->HasInPhaseList(9995))
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_AlleriaAndLocusVisibleSecondEnd);

                    if (Creature* l_Creature = l_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AlleriaThirdMoveIntoVoid);
                    }
                }

                if (me->GetExactDist2d(l_Player) < 15.0f && l_Player->HasQuest(eQuests::Quest_ThrowingShade) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_VoidforgeExamined) == 1 &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_AlleriaAndLocusVisibleThirdEnd) == 0 &&
                    me->HasInPhaseList(10028))
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_AlleriaAndLocusVisibleThirdEnd);

                    if (Creature* l_Creature = l_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AlleriaFourthMoveIntoVoid);
                    }
                }

                if (me->GetExactDist2d(l_Player) < 15.0f && l_Player->HasQuest(eQuests::Quest_ThrowingShade) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_MeetAlleriaAndLocusWalker) == 0 &&
                    me->HasInPhaseList(10031))
                {
                    l_Player->RemoveAura(eSpells::Spell_VoidRiftPlayer);
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_MeetAlleriaAndLocusWalker);

                    Talk(3, l_Player->GetGUID());

                    l_Player->AddDelayedEvent([l_Player]() -> void
                    {
                        if (Creature* l_Creature = l_Player->FindNearestCreature(eNpcs::Npc_Locus, 20.0f, true))
                        {
                            l_Creature->AI()->Talk(0, l_Player->GetGUID());
                        }
                    }, 6000);
                }

                if (me->GetExactDist2d(l_Player) < 15.0f && l_Player->GetQuestStatus(eQuests::Quest_AVesselMadeReady) == QUEST_STATUS_COMPLETE &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_ConversationHeard) == 0 &&
                    me->HasInPhaseList(10430))
                {
                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_ConversationHeard);

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AlleriaLosConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_AlleriaStartVereesaEvent:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathWithVereesa, 2000);
                    break;
                }
                case eActions::Action_AlleriaArrived:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_AlleriaArrivedPathEnd, Path_AlleriaArrived, 6, false);
                    break;
                }
                case eActions::Action_AlleriaStartPathToConsole:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_SaySecondLine, 1000);
                    break;
                }
                case eActions::Action_AlleriaStartFirstPathWithArkhaan:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_StartFirstPathWithArkhaan, 5000);
                    break;
                }
                case eActions::Action_AlleriaLeaveIsolon:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_SayThirdLine, 1000);
                    break;
                }
                case eActions::Action_AlleriaFirstMoveIntoVoid:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Locus, m_LocusIntoVoidFirstSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_LocusFirstMoveIntoVoid);
                        m_LocusGuid = l_Creature->GetGUID();
                    }

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    me->SetAIAnimKitId(955);
                    DoCast(eSpells::Spell_VoidRift, true);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_FirstPathIntoVoidEnd, Path_AlleriaIntoVoidFirst, 32, false);
                    break;
                }
                case eActions::Action_AlleriaSecondMoveIntoVoid:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Locus, m_LocusIntoVoidSecondSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_LocusSecondMoveIntoVoid);
                        m_LocusGuid = l_Creature->GetGUID();
                    }

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_SecondPathInVoid, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    DoCast(eSpells::Spell_VoidRift, true);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_SecondPathIntoVoidEnd, Path_AlleriaIntoVoidSecond, 37, false);
                    break;
                }
                case eActions::Action_AlleriaThirdMoveIntoVoid:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Locus, m_LocusIntoVoidThirdSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_LocusThirdMoveIntoVoid);
                        m_LocusGuid = l_Creature->GetGUID();
                    }

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ThirdPathInVoid, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->SetAIAnimKitId(5772);
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    DoCast(eSpells::Spell_VoidRift, true);
                    m_Events.ScheduleEvent(eEvents::Event_StartThirdPathIntoVoid, 2000);
                    break;
                }
                case eActions::Action_AlleriaFourthMoveIntoVoid:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Locus, m_LocusIntoVoidFourthSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_LocusFourthMoveIntoVoid);
                        m_LocusGuid = l_Creature->GetGUID();
                    }

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_FourthPathInVoid, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->SetAIAnimKitId(5772);
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    DoCast(eSpells::Spell_VoidRift, true);
                    m_Events.ScheduleEvent(eEvents::Event_StartFourthPathIntoVoid, 1000);
                    break;
                }
                case eActions::Action_AlleriaBeforeFight:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathToVoidTear, 16000);
                    break;
                }
                case eActions::Action_AlleriaPathToBeacon:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestABeaconInTheDarkAccepted, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    DoCast(eSpells::Spell_LocusWalkersGiftAura, true);
                    m_Events.ScheduleEvent(eEvents::Event_PathToBeaconConv, 7000);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathToBeacon, 8000);
                    break;
                }
                default:
                    break;
                }
            }

            void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 /*p_Action*/) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();
                p_Player->PlayScene(1887, p_Player);
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_PointId)
                {
                case ePoints::Point_AlleriaPathWithVereesaEnd:
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_VereesaGuid))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SetFacingTo(1.937315f);
                        }, 500);
                    }

                    me->SetFacingTo(5.253441f);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathToDefaultPos, 4000);
                    break;
                }
                case ePoints::Point_AlleriaPathToDefaltPos:
                {
                    me->SetFacingTo(0.7679449f);
                    m_Events.ScheduleEvent(eEvents::Event_Despawn, 2000);
                    break;
                }
                case ePoints::Point_AlleriaArrivedPathEnd:
                {
                    me->SetFacingTo(1.837871f);
                    Talk(0, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_Killcredit, 2000);
                    break;
                }
                case ePoints::Point_AlleriaPathToConsoleEnd:
                {
                    me->SendPlaySpellVisualKit(85596, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_FirstPathWithArkhaanEnd:
                {
                    me->GetMotionMaster()->MoveJump(5197.68f, 10196.1f, -129.032f, 20.0f, 10.0f, 0.0f, ePoints::Point_JumpEnd);
                    break;
                }
                case ePoints::Point_JumpEnd:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::PointSecondPathWithArkhaanEnd, Path_AlleriaWithArkhaanSecond, 30, false);
                    break;
                }
                case ePoints::Point_AlleriaIsolonLeavePathEnd:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_FirstPathIntoVoidEnd:
                {
                    me->SetFacingTo(1.151917f);
                    me->SetAIAnimKitId(5772);

                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_LocusGuid))
                    {
                        l_Creature->DespawnOrUnsummon();
                    }

                    me->DespawnOrUnsummon();
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_AlleriaAndLocusVisibleFirst);
                    break;
                }
                case ePoints::Point_SecondPathIntoVoidEnd:
                {
                    me->SetFacingTo(0.9948376f);
                    me->SetAIAnimKitId(5772);

                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_LocusGuid))
                    {
                        l_Creature->DespawnOrUnsummon();
                    }

                    me->DespawnOrUnsummon();
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_AlleriaAndLocusVisibleSecond);
                    break;
                }
                case ePoints::Point_ThirdPathIntoVoidEnd:
                {
                    me->SetFacingTo(1.169371f);
                    me->SetAIAnimKitId(5772);

                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_LocusGuid))
                    {
                        l_Creature->DespawnOrUnsummon();
                    }

                    me->DespawnOrUnsummon();
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_AlleriaAndLocusVisibleThird);
                    break;
                }
                case ePoints::Point_FourthPathIntoVoidEnd:
                {
                    me->SetFacingTo(5.742593f);

                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_LocusGuid))
                    {
                        l_Creature->DespawnOrUnsummon();
                    }

                    me->DespawnOrUnsummon();
                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_AlleriaAndLocusAfterVoidVisible);
                    break;
                }
                case ePoints::Point_PathToVoidTearEnd:
                {
                    m_Events.ScheduleEvent(eEvents::Event_PlayVisualTeleport, 2000);
                    break;
                }
                case ePoints::Point_PathToBeaconEnd:
                {
                    me->SetFacingTo(5.51524f);
                    m_Events.ScheduleEvent(eEvents::Event_SetFacingToPlayer, 15000);
                    break;
                }
                case ePoints::Point_PathFromBeaconEnd:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_WhispersFromOronaar:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AlleriaStartPathToConsole);
                    }

                    break;
                }
                case eQuests::Quest_ThrowingShade:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AlleriaLeaveIsolon);
                    }

                    break;
                }
                case eQuests::Quest_SourcesOfDarkness:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestSourcesOfDarknessAccepted, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eQuests::Quest_ABeaconInTheDark:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AlleriaPathToBeacon);
                    }

                    if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_Locus, m_LocusPathToBeaconSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_LocusPathToBeacon);
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void sQuestReward(Player* p_Player, Quest const* p_Quest, uint32 /*p_Option*/) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_WhispersFromOronaar:
                {
                    if (p_Player->IsQuestRewarded(eQuests::Quest_ArkhaansPrayers))
                    {
                        if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_Arkhaan, m_ArkhaanSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                        {
                            l_Creature->AI()->DoAction(eActions::Action_ArkhaanStartPathToAlleria);
                        }

                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ArkhaanMoveToMe, p_Player, nullptr, p_Player->GetPosition()))
                                delete l_Conversation;
                        }
                    }

                    break;
                }
                case eQuests::Quest_ArkhaansPrayers:
                {
                    if (p_Player->IsQuestRewarded(eQuests::Quest_WhispersFromOronaar))
                    {
                        if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_Arkhaan, m_ArkhaanSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                        {
                            l_Creature->AI()->DoAction(eActions::Action_ArkhaanStartPathToAlleria);
                        }

                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ArkhaanMoveToMe, p_Player, nullptr, p_Player->GetPosition()))
                                delete l_Conversation;
                        }
                    }

                    break;
                }
                case eQuests::Quest_ArkhaansPeril:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_Locus, m_LocusAfterArkhaanDeadSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SendPlaySpellVisualKit(84009, 0, 0);
                            l_Creature->DespawnOrUnsummon();
                        }, 17000);
                    }

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestArkhaansPerilRewarded, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eQuests::Quest_AVesselMadeReady:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                        l_Creature->SetAIAnimKitId(9729);
                        l_Creature->DelayedCastSpell(l_Creature, eSpells::Spell_LocusWalkersGift, true, 4000);
                        l_Creature->DespawnOrUnsummon(5000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SetAIAnimKitId(0);
                        }, 2000);

                        p_Player->AddDelayedEvent([p_Player]() -> void
                        {
                            if (Quest const* l_Quest = sObjectMgr->GetQuestTemplate(eQuests::Quest_CustomQuestAlleriaWithGift))
                            {
                                p_Player->RewardQuest(l_Quest, 0, nullptr, false);
                            }
                        }, 5000);
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartPathWithVereesa:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Vereesa, m_VereesaSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        m_VereesaGuid = l_Creature->GetGUID();
                        l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_VereesaPathWithAlleraEnd, Path_VereesaWithAlleria, 32, true);
                    }

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AlleriaAndVereesa, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_AlleriaPathWithVereesaEnd, Path_AlleriaWithVereesa, 26, true);
                    break;
                }
                case eEvents::Event_StartPathToDefaultPos:
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_VereesaGuid))
                    {
                        l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_VereesaPathToDefaultPos, Path_VereesaToDefaultPos, 4, true);
                    }

                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_AlleriaPathToDefaltPos, Path_AlleriaToDefaltPos, 3, true);
                    break;
                }
                case eEvents::Event_Despawn:
                {
                    if (Quest const* l_Quest = sObjectMgr->GetQuestTemplate(eQuests::Quest_CustomAlleriaAndVereesaEventComplete))
                    {
                        l_Player->RewardQuest(l_Quest, 0, nullptr, false);
                    }

                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_VereesaGuid))
                    {
                        l_Creature->DespawnOrUnsummon();
                    }

                    me->DespawnOrUnsummon();
                    break;
                }
                case eEvents::Event_Killcredit:
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_GoWithVelen);
                    me->DespawnOrUnsummon();
                    break;
                }
                case eEvents::Event_SaySecondLine:
                {
                    me->SetFacingToObject(l_Player);
                    Talk(1, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_StartPathToConsole, 5000);
                    break;
                }
                case eEvents::Event_StartPathToConsole:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_AlleriaPathToConsoleEnd, Path_AlleriaToConsole, 25, false);
                    break;
                }
                case eEvents::Event_StartFirstPathWithArkhaan:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_FirstPathWithArkhaanEnd, Path_AlleriaWithArkhaanFirst, 25, false);
                    break;
                }
                case eEvents::Event_SayThirdLine:
                {
                    Talk(2, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_StartIsolonLeavePath, 1000);
                    break;
                }
                case eEvents::Event_StartIsolonLeavePath:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_AlleriaIsolonLeavePathEnd, Path_AlleriaLeaveIsolon, 7, false);
                    break;
                }
                case eEvents::Event_StartThirdPathIntoVoid:
                {
                    me->SetAIAnimKitId(0);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_ThirdPathIntoVoidEnd, Path_AlleriaIntoVoidThird, 29, false);
                    break;
                }
                case eEvents::Event_StartFourthPathIntoVoid:
                {
                    me->SetAIAnimKitId(0);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_FourthPathIntoVoidEnd, Path_AlleriaIntoVoidFourth, 38, false);
                    break;
                }
                case eEvents::Event_StartPathToVoidTear:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathToVoidTearEnd, Path_AlleriaToVoidTear, 4, true);
                    break;
                }
                case eEvents::Event_PlayVisualTeleport:
                {
                    me->HandleEmoteCommand(EMOTE_ONESHOT_SPELL_CAST_OMNI);
                    me->SendPlaySpellVisualKit(82528, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                case eEvents::Event_PathToBeaconConv:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AlleriaPathWithLocus, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eEvents::Event_StartPathToBeacon:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathToBeaconEnd, Path_AlleriaToBeacon, 9, true);
                    break;
                }
                case eEvents::Event_SetFacingToPlayer:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AlleriaLastConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->SetFacingToObject(l_Player);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathFromBeacon, 16000);
                    break;
                }
                case eEvents::Event_StartPathFromBeacon:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathFromBeaconEnd, Path_AlleriaFromBeacon, 19, false);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_alleria_windrunner_121230AI(p_Creature);
        }
};

/// High Exarch Turalyon - 124312
class npc_high_exarch_turalyon_124312 : public CreatureScript
{
    public:
        npc_high_exarch_turalyon_124312() : CreatureScript("npc_high_exarch_turalyon_124312") { }

        struct npc_high_exarch_turalyon_124312AI : public ScriptedAI
        {
            npc_high_exarch_turalyon_124312AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_TuralyonToConsole[4] =
            {
                { 4730.479f, 9859.129f, 64.68439f },
                { 4730.229f, 9859.629f, 64.68439f },
                { 4729.126f, 9861.354f, 64.41147f },
                { 4730.94f, 9863.029f, 64.41147f }
            };

            G3D::Vector3 const Path_TuralyonWithVelen[33] =
            {
                { 6181.678f, 9618.539f, -80.70729f },
                { 6177.428f, 9618.289f, -80.70729f },
                { 6174.148f, 9617.867f, -80.95296f },
                { 6171.822f, 9617.822f, -80.63844f },
                { 6169.822f, 9617.822f, -80.63844f },
                { 6168.446f, 9617.466f, -80.8325f },
                { 6165.373f, 9617.135f, -80.63986f },
                { 6163.515f, 9616.571f, -80.54549f },
                { 6161.127f, 9616.075f, -80.5768f },
                { 6158.9f, 9615.838f, -81.35854f },
                { 6157.65f, 9615.588f, -82.10854f },
                { 6155.4f, 9615.338f, -82.60854f },
                { 6153.65f, 9615.088f, -83.10854f },
                { 6153.011f, 9614.756f, -83.66206f },
                { 6152.991f, 9614.73f, -83.32465f },
                { 6151.241f, 9614.73f, -83.57465f },
                { 6149.741f, 9614.73f, -83.57465f },
                { 6144.292f, 9614.026f, -83.88939f },
                { 6142.794f, 9613.977f, -83.70099f },
                { 6140.544f, 9613.977f, -83.70099f },
                { 6139.544f, 9613.977f, -83.70099f },
                { 6138.639f, 9613.58f, -83.50811f },
                { 6137.324f, 9613.436f, -82.44839f },
                { 6135.324f, 9613.436f, -81.69839f },
                { 6133.574f, 9613.436f, -80.69839f },
                { 6132.708f, 9612.992f, -80.54134f },
                { 6130.419f, 9612.633f, -80.23715f },
                { 6128.919f, 9612.633f, -79.98715f },
                { 6126.669f, 9612.133f, -80.48715f },
                { 6123.169f, 9611.883f, -80.23715f },
                { 6119.669f, 9611.633f, -80.23715f },
                { 6118.169f, 9611.383f, -80.23715f },
                { 6116.164f, 9610.88f, -80.36868f }
            };

            G3D::Vector3 const Path_TuralyonPreFight[4] =
            {
                { 6193.296f, 9951.553f, -22.69637f },
                { 6195.546f, 9948.053f, -22.69637f },
                { 6198.046f, 9943.803f, -24.44637f },
                { 6209.154f, 9930.958f, -25.53931f }
            };

            G3D::Vector3 const Path_TuralyonAfterTeleportOnVindicaar[8] =
            {
                { 4603.103f, 9830.152f, 68.59164f },
                { 4610.853f, 9832.402f, 68.84164f },
                { 4618.853f, 9834.902f, 71.59164f },
                { 4622.155f, 9835.484f, 71.62337f },
                { 4624.523f, 9836.107f, 71.70486f },
                { 4634.273f, 9836.857f, 71.45486f },
                { 4641.273f, 9837.607f, 71.70486f },
                { 4645.892f, 9838.229f, 71.23206f }
            };

            enum eQuests
            {
                Quest_StormingTheCitadel = 47892,
                Quest_WeHaveAProblem = 48344,
                Quest_WrathOfTheHighExarch = 47854,
                Quest_ANonProphetOrganization = 47691,
                Quest_FlankingManeuvers = 47853,
                Quest_TalgathsForces = 48345,
                Quest_TheSpeakerListens = 48273,
                Quest_TheSpeakerSeeks = 48277
            };

            enum eConversations
            {
                Conv_QuestStormingTheCitadelAccept = 5621,
                Conv_TuralyonTeleportedToConservatory = 5725,
                Conv_TuralyonLeaveArinorGardensWithVelen = 5433,
                Conv_QuestTheSpeakerListensAccepted = 5606,
                Conv_QuestTheSpeakerSeeksAccepted = 5628
            };

            enum eActions
            {
                Action_TuralyonStartPathToConsole = 1,
                Action_TuralyonTeleportedOnConservatory = 2,
                Action_TuralyonMoveWithVelen = 3,
                Action_VelenStartPathWithTuralyon = 5,
                Action_SorvosMoveWithTuralyon = 6,
                Action_BaraatMoveWithTuralyon = 7,
                Action_TelaamonMoveWithTuralyon = 8,
                Action_TuralyonMoveWithVelenByVelen = 9,
                Action_TuralyonMoveBeforeFight = 10,
                Action_TuralyonMoveAfterTeleportOnVindicaar = 26
            };

            enum ePoints
            {
                Point_TuralyonPathToConsoleEnd = 1,
                Point_TuralyonMoveAfterTeleportEnd = 2,
                Point_TuralyonPathWithVelenEnd = 3,
                Point_PreFightPathEnd = 4,
                Point_PathAfterTeleportOnVindicaarEnd = 5
            };

            enum eEvents
            {
                Event_SayFirstLine = 1,
                Event_StartPathToConsole = 2,
                Event_StartPathAfterTeleport = 3,
                Event_TuralyonTeleportedKillcredit = 4,
                Event_SetFacingToPlayer = 5,
                Event_SetFacingToVelen = 6,
                Event_StartPathWithVelen = 7,
                Event_MoveToPreFightPos = 8,
                Event_StartPathAfterTeleportOnVindicaar = 9
            };

            enum eSpells
            {
                Spell_TeleportVisuals = 253303,
                Spell_SummonTuralyon = 247282
            };

            enum eKillcredits
            {
                Killcredit_TuralyonTeleportedOnConservatory = 2922070
            };

            enum eNpcs
            {
                Npc_Sorvos = 123669,
                Npc_Baraat = 123670,
                Npc_Telaamon = 123671,
                Npc_Velen = 120533
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;
            Position const m_TuralyonMoveAfterTeleportPos = { 5766.289f, 9504.624f, -67.11945f };
            Position const m_VelenSpawnPos = { 6187.046f, 9620.751f, -81.19586f, 3.384232f };
            Position const m_SorvosSpawnPos = { 6178.193f, 9613.498f, -80.85954f, 2.865718f };
            Position const m_BaraatSpawnPos = { 6166.272f, 9621.365f, -80.98371f, 3.778528f };
            Position const m_TelaamonSpawnPos = { 6177.188f, 9625.02f, -81.49755f, 3.6791f };

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_TuralyonStartPathToConsole:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_SayFirstLine, 1000);
                    break;
                }
                case eActions::Action_TuralyonTeleportedOnConservatory:
                {
                    me->AddDelayedEvent([this]() -> void
                    {
                        me->SendPlaySpellVisualKit(84491, 0, 0);
                        me->SendPlaySpellVisualKit(85496, 0, 0);
                    }, 500);

                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterTeleport, 3000);
                    break;
                }
                case eActions::Action_TuralyonMoveWithVelen:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Velen, m_VelenSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenStartPathWithTuralyon);
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Baraat, m_BaraatSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_BaraatMoveWithTuralyon);
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Sorvos, m_SorvosSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_SorvosMoveWithTuralyon);
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Telaamon, m_TelaamonSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TelaamonMoveWithTuralyon);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SetFacingToPlayer, 1000);
                    break;
                }
                case eActions::Action_TuralyonMoveWithVelenByVelen:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Velen, m_VelenSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenStartPathWithTuralyon);
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Baraat, m_BaraatSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_BaraatMoveWithTuralyon);
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Sorvos, m_SorvosSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_SorvosMoveWithTuralyon);
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Telaamon, m_TelaamonSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TelaamonMoveWithTuralyon);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SetFacingToPlayer, 1000);
                    break;
                }
                case eActions::Action_TuralyonMoveBeforeFight:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_MoveToPreFightPos, 1000);
                    break;
                }
                case eActions::Action_TuralyonMoveAfterTeleportOnVindicaar:
                {
                    me->AddDelayedEvent([this]() -> void
                    {
                        me->SendPlaySpellVisualKit(85496, 0, 0);
                    }, 500);

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterTeleportOnVindicaar, 2000);
                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_PointId)
                {
                case ePoints::Point_TuralyonPathToConsoleEnd:
                {
                    me->SetFacingTo(0.186884f);
                    me->DelayedCastSpell(me, eSpells::Spell_TeleportVisuals, true, 2000);
                    me->DespawnOrUnsummon(2000);
                    break;
                }
                case ePoints::Point_TuralyonMoveAfterTeleportEnd:
                {
                    m_Events.ScheduleEvent(eEvents::Event_TuralyonTeleportedKillcredit, 10000);
                    break;
                }
                case ePoints::Point_TuralyonPathWithVelenEnd:
                {
                    me->DespawnOrUnsummon();
                    break;
                }
                case ePoints::Point_PreFightPathEnd:
                {
                    me->SetFacingTo(5.585053f);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 375);
                    break;
                }
                case ePoints::Point_PathAfterTeleportOnVindicaarEnd:
                {
                    me->SetFacingTo(6.126613f);
                    break;
                }
                default:
                    break;
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_StormingTheCitadel:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestStormingTheCitadelAccept, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eQuests::Quest_WeHaveAProblem:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TuralyonStartPathToConsole);
                    }

                    break;
                }
                case eQuests::Quest_WrathOfTheHighExarch:
                case eQuests::Quest_ANonProphetOrganization:
                {
                    if ((p_Player->HasQuest(eQuests::Quest_WrathOfTheHighExarch) && p_Player->HasQuest(eQuests::Quest_ANonProphetOrganization)) ||
                        (p_Player->IsQuestRewarded(eQuests::Quest_WrathOfTheHighExarch) || p_Player->IsQuestRewarded(eQuests::Quest_ANonProphetOrganization)))
                    {
                        p_Player->CastSpell(me->GetPosition(), eSpells::Spell_SummonTuralyon, true);
                    }

                    break;
                }
                case eQuests::Quest_FlankingManeuvers:
                {
                    if (p_Player->HasQuest(eQuests::Quest_TalgathsForces))
                    {
                        if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                        {
                            l_Creature->AI()->DoAction(eActions::Action_TuralyonMoveWithVelen);
                        }
                    }

                    break;
                }
                case eQuests::Quest_TheSpeakerListens:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestTheSpeakerListensAccepted, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eQuests::Quest_TheSpeakerSeeks:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestTheSpeakerSeeksAccepted, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SayFirstLine:
                {
                    Talk(0, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_StartPathToConsole, 5000);
                    break;
                }
                case eEvents::Event_StartPathToConsole:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_TuralyonPathToConsoleEnd, Path_TuralyonToConsole, 4, true);
                    break;
                }
                case eEvents::Event_StartPathAfterTeleport:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TuralyonTeleportedToConservatory, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_TuralyonMoveAfterTeleportEnd, m_TuralyonMoveAfterTeleportPos, true);
                    break;
                }
                case eEvents::Event_TuralyonTeleportedKillcredit:
                {
                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_TuralyonTeleportedOnConservatory);
                    me->DespawnOrUnsummon();
                    break;
                }
                case eEvents::Event_SetFacingToPlayer:
                {
                    me->SetFacingToObject(l_Player);

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TuralyonLeaveArinorGardensWithVelen, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SetFacingToVelen, 10000);
                    break;
                }
                case eEvents::Event_SetFacingToVelen:
                {
                    me->SetFacingTo(0.4830516f);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathWithVelen, 6000);
                    break;
                }
                case eEvents::Event_StartPathWithVelen:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_TuralyonPathWithVelenEnd, Path_TuralyonWithVelen, 33, true);
                    break;
                }
                case eEvents::Event_MoveToPreFightPos:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PreFightPathEnd, Path_TuralyonPreFight, 4, true);
                    break;
                }
                case eEvents::Event_StartPathAfterTeleportOnVindicaar:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterTeleportOnVindicaarEnd, Path_TuralyonAfterTeleportOnVindicaar, 8, true);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_high_exarch_turalyon_124312AI(p_Creature);
        }
};

/// High Exarch Turalyon - 124477
class npc_high_exarch_turalyon_124477 : public CreatureScript
{
    public:
        npc_high_exarch_turalyon_124477() : CreatureScript("npc_high_exarch_turalyon_124477") { }

        struct npc_high_exarch_turalyon_124477AI : public ScriptedAI
        {
            npc_high_exarch_turalyon_124477AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_SummonTuralyonAura = 247282,
                Spell_CrashOfLight = 240893,
                Spell_Consecration = 251549,
                Spell_CrusaderStrike = 241011,
                Spell_AvengingWrath = 252856
            };

            enum eEvents
            {
                Event_CastCrashOfLight = 1,
                Event_CastConsecration = 2,
                Event_CastCrusaderStrike = 3,
                Event_CastAvengingWrath = 4
            };

            enum eConversations
            {
                Conv_TuralyonLeaveCamp = 5803,
                Conv_TuralyonToFarAwayFromCamp = 5804,
                Conv_TuralyonNearFelSpreader = 5805,
                Conv_TuralyonNearVelenPlace = 5809,
                Conv_TuralyonFoundVelen = 5432
            };

            enum ePoints
            {
                Point_StartPointEnd = 1,
                Point_Path_ToVelenEnd = 2
            };

            enum eNpcs
            {
                Npc_Velen = 120533
            };

            enum eActions
            {
                Action_VelenFound = 4
            };

            enum eKillcredits
            {
                Killcredit_FoundVelen = 120533,
                Killcredit_EntranceMarker = 124485
            };

            ObjectGuid m_SummonerGuid;
            ObjectGuid m_VelenGuid;
            EventMap m_Events;
            Position const m_FirstConvPos = { 5782.979492f, 9537.349609f, -73.708168f };
            Position const m_SecondConvPos = { 5898.572754f, 9656.468750f, -81.653320f };
            Position const m_ThirdConvPos = { 6093.416016f, 9607.584961f, -79.354294f };
            Position const m_FourthConvPos = { 6170.180664f, 9618.101563f, -80.906097f };
            Position const m_FifthConvPos = { 5984.005859f, 9688.035156f, -85.584618f };
            Position const m_PathStartPointPos = { 6163.49f, 9618.7f, -80.64454f };
            Position const m_VelenSpawnPos = { 6190.637f, 9623.664f, -81.26509f, 4.926011f };
            bool m_FirstConvHeard = false;
            bool m_SecondConvHeard = false;
            bool m_ThirdConvHeard = false;
            bool m_FourthConvHeard = false;
            bool m_FifthConvHeard = false;
            bool m_CanCastCrashOfLight = true;
            bool m_VelenEventIncomplete = false;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->GetMotionMaster()->MoveFollow(p_Summoner, 3.0f, 70.0f);
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void EnterCombat(Unit* victim) override
            {
                me->Dismount();
                m_Events.ScheduleEvent(eEvents::Event_CastConsecration, 3000);
                m_Events.ScheduleEvent(eEvents::Event_CastCrusaderStrike, 6000);
                m_Events.ScheduleEvent(eEvents::Event_CastAvengingWrath, 9000);
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_PointId)
                {
                case ePoints::Point_StartPointEnd:
                {
                    me->SetFacingTo(0.08726646f);

                    me->AddDelayedEvent([this]() -> void
                    {
                        G3D::Vector3 const Path_TuralyonToVelen[8] =
                        {
                            { 6164.849f, 9618.705f, -80.57001f },
                            { 6166.849f, 9618.705f, -80.57001f },
                            { 6170.099f, 9618.705f, -80.57001f },
                            { 6171.349f, 9618.705f, -80.57001f },
                            { 6174.099f, 9618.705f, -80.82001f },
                            { 6176.599f, 9618.705f, -80.82001f },
                            { 6181.599f, 9618.705f, -80.82001f },
                            { 6183.708f, 9618.71f, -80.99547f }
                        };

                        me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_Path_ToVelenEnd, Path_TuralyonToVelen, 8, true);
                    }, 2000);

                    break;
                }
                case ePoints::Point_Path_ToVelenEnd:
                {
                    uint64 l_PlayerGuid = m_SummonerGuid;

                    me->SetFacingTo(0.4712389f);

                    me->AddDelayedEvent([this, l_PlayerGuid]() -> void
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_VelenGuid))
                        {
                            l_Creature->DespawnOrUnsummon();
                        }

                        if (Player* l_Pl = ObjectAccessor::GetPlayer(*me, l_PlayerGuid))
                        {
                            l_Pl->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_EntranceMarker);
                            l_Pl->RemoveAura(eSpells::Spell_SummonTuralyonAura);
                        }

                        me->DespawnOrUnsummon();
                    }, 17000);

                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !l_Player->IsInWorld() || !l_Player->HasAura(eSpells::Spell_SummonTuralyonAura) ||
                    (me->GetAreaId() != 8884 && me->GetAreaId() != 8882))
                {
                    me->DespawnOrUnsummon();
                    return;
                }

                if (m_FourthConvHeard)
                    return;

                if (l_Player->IsMounted() && !me->isInCombat())
                    me->Mount(79732);
                else
                    me->Dismount();

                if (me->GetExactDist2d(&m_FirstConvPos) < 30.0f && !m_FirstConvHeard && me->GetAreaId() == 8884)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TuralyonLeaveCamp, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_FirstConvHeard = true;
                }

                if (me->GetExactDist2d(&m_SecondConvPos) < 50.0f && !m_SecondConvHeard)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TuralyonToFarAwayFromCamp, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_SecondConvHeard = true;
                }

                if (me->GetExactDist2d(&m_ThirdConvPos) < 10.0f && !m_ThirdConvHeard)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TuralyonNearVelenPlace, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_ThirdConvHeard = true;
                }

                if (me->GetExactDist2d(&m_FourthConvPos) < 10.0f && !m_FourthConvHeard)
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_FoundVelen);
                    m_FourthConvHeard = true;

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Velen, m_VelenSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenFound);
                        m_VelenGuid = l_Creature->GetGUID();
                    }

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TuralyonFoundVelen, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->GetMotionMaster()->Clear(true);
                    me->GetMotionMaster()->MoveIdle();
                    me->GetMotionMaster()->MovePoint(ePoints::Point_StartPointEnd, m_PathStartPointPos, false);
                    return;
                }

                if (me->GetExactDist2d(&m_FifthConvPos) < 45.0f && !m_FifthConvHeard)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TuralyonNearFelSpreader, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_FifthConvHeard = true;
                }

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastConsecration:
                {
                    DoCast(eSpells::Spell_Consecration);
                    m_Events.ScheduleEvent(eEvents::Event_CastConsecration, urand(10000, 20000));
                    break;
                }
                case eEvents::Event_CastCrusaderStrike:
                {
                    DoCastVictim(eSpells::Spell_CrusaderStrike);
                    m_Events.ScheduleEvent(eEvents::Event_CastCrusaderStrike, urand(5000, 15000));
                    break;
                }
                case eEvents::Event_CastAvengingWrath:
                {
                    DoCast(eSpells::Spell_AvengingWrath);
                    m_Events.ScheduleEvent(eEvents::Event_CastAvengingWrath, urand(20000, 30000));
                    break;
                }
                default:
                    break;
                }

                if (!l_Player->isInCombat() && !me->getVictim())
                {
                    m_Events.Reset();
                    me->CombatStop();
                    me->GetMotionMaster()->MoveFollow(l_Player, 3.0f, 70.0f);
                    m_CanCastCrashOfLight = true;
                    me->SetReactState(ReactStates::REACT_DEFENSIVE);
                    return;
                }

                if (Unit* l_Target = l_Player->GetSelectedUnit())
                {
                    if (m_CanCastCrashOfLight)
                    {
                        DoCast(l_Target, eSpells::Spell_CrashOfLight, false);
                        m_CanCastCrashOfLight = false;
                    }

                    me->CombatStart(l_Target);
                    AttackStart(l_Target, true);
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_high_exarch_turalyon_124477AI(p_Creature);
        }
};

/// Fel Spreader - 124463
class npc_fel_spreader_124463 : public CreatureScript
{
    public:
        npc_fel_spreader_124463() : CreatureScript("npc_fel_spreader_124463") { }

        struct npc_fel_spreader_124463AI : public ScriptedAI
        {
            npc_fel_spreader_124463AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_Destroying = 248308
            };

            enum eKillcredits
            {
                Killcredit_DisruptLegionForces = 124463
            };

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = p_Caster->ToPlayer())
                {
                    if (p_Spell->Id == eSpells::Spell_Destroying)
                    {
                        me->AddToHideList(l_Player->GetGUID(), 360000);
                        me->DestroyForPlayer(l_Player);
                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_DisruptLegionForces);
                    }
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_fel_spreader_124463AI(p_Creature);
        }
};

/// Soul Harvester - 125010
class npc_soul_harvester_125010 : public CreatureScript
{
    public:
        npc_soul_harvester_125010() : CreatureScript("npc_soul_harvester_125010") { }

        struct npc_soul_harvester_125010AI : public ScriptedAI
        {
            npc_soul_harvester_125010AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_Destroying = 248314
            };

            enum eKillcredits
            {
                Killcredit_DisruptLegionForces = 125010
            };

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = p_Caster->ToPlayer())
                {
                    if (p_Spell->Id == eSpells::Spell_Destroying)
                    {
                        me->AddToHideList(l_Player->GetGUID(), 360000);
                        me->DestroyForPlayer(l_Player);
                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_DisruptLegionForces);
                    }
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_soul_harvester_125010AI(p_Creature);
        }
};

/// Demonfly Nest - 125006
class npc_demonfly_nest_125006 : public CreatureScript
{
    public:
        npc_demonfly_nest_125006() : CreatureScript("npc_demonfly_nest_125006") { }

        struct npc_demonfly_nest_125006AI : public ScriptedAI
        {
            npc_demonfly_nest_125006AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_Destroying = 248311
            };

            enum eKillcredits
            {
                Killcredit_DisruptLegionForces = 125006
            };

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = p_Caster->ToPlayer())
                {
                    if (p_Spell->Id == eSpells::Spell_Destroying && !me->isSummon())
                    {
                        me->DestroyForPlayer(l_Player);

                        if (Creature* l_Creature = l_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 360000, 0, l_Player->GetGUID()))
                        {
                            l_Creature->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_SPELLCLICK);
                            l_Player->DelayedCastSpell(l_Creature, eSpells::Spell_Destroying, true, 1000);

                            l_Creature->AddDelayedEvent([l_Creature]() -> void
                            {
                                l_Creature->SetDisplayId(79974);
                            }, 2000);
                        }

                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_DisruptLegionForces);
                    }
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_demonfly_nest_125006AI(p_Creature);
        }
};

/// Talgath - 125233
class npc_talgath_125233 : public CreatureScript
{
    public:
        npc_talgath_125233() : CreatureScript("npc_talgath_125233") { }

        struct npc_talgath_125233AI : public ScriptedAI
        {
            npc_talgath_125233AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_TalgathBeforeFight[3] =
            {
                { 6258.932f, 9886.279f, -24.8499f },
                { 6239.182f, 9906.529f, -24.8499f },
                { 6235.13f, 9909.958f, -25.08226f }
            };

            enum ePoints
            {
                Point_PreFightPathEnd = 1
            };

            enum eActions
            {
                Action_TalgathMoveBeforeFight = 14
            };

            enum eEvents
            {
                Event_StartPreFightPath = 1
            };

            enum eSpells
            {
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_PreFightPathEnd:
                {
                    me->SetFacingTo(2.303835f);
                    break;
                }
                default:
                    break;
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_TalgathMoveBeforeFight:
                {
                    m_Events.ScheduleEvent(eEvents::Event_StartPreFightPath, 1000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartPreFightPath:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PreFightPathEnd, Path_TalgathBeforeFight, 3, true);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_talgath_125233AI(p_Creature);
        }
};

/// Prophet Velen - 125239
class npc_prophet_velen_125239 : public CreatureScript
{
    public:
        npc_prophet_velen_125239() : CreatureScript("npc_prophet_velen_125239") { }

        struct npc_prophet_velen_125239AI : public ScriptedAI
        {
            npc_prophet_velen_125239AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eActions
            {
                Action_TuralyonSayFirstLine = 1,
                Action_TalgathSayFirstLine = 2,
                Action_BaraatStartPathToTalgath = 3,
                Action_TelaamonStartPathToTalgath = 4,
                Action_SorvosStartPathToTalgath = 5,
                Action_TuralyonStartPathToTalgath = 6,
                Action_VelenStartFight = 16
            };

            enum eEvents
            {
                Event_StartAttackTalgath = 1,
                Event_CastSmite = 2,
                Event_CastLightsVengeance = 3,
                Event_CastCircleOfLight = 4,
                Event_VisualKit = 5,
                Event_ShackleTalgath = 6,
                Event_KillTalgath = 7,
                Event_Killcredit = 8
            };

            enum ePoints
            {
                Point_MoveToTalgathEnd = 1
            };

            enum eNpcs
            {
                Npc_BaraatTheLongshot = 125237,
                Npc_GrandVindicatorSorvos = 125235,
                Npc_BlademasterTelaamon = 125236,
                Npc_Turalyon = 125238,
                Npc_Talgath = 127085
            };

            enum eSpells
            {
                Spell_ThreatReduction = 99203,
                Spell_Smite = 197428,
                Spell_LightsVengeance = 251079,
                Spell_CircleOfLight = 251076,
                Spell_PlayerFelBlast = 248624,
                Spell_FelBlast = 248626,
                Spell_Shackle = 248627,
                Spell_FinalPrayer = 248628
            };

            enum eKillcredits
            {
                Killcredit_TalgathDefeated = 125233
            };

            enum eQuests
            {
                Quest_AcrossTheUniverse = 47856
            };

            std::vector<ObjectGuid> m_FightPartyGuids;
            ObjectGuid m_SummonerGuid;
            ObjectGuid m_TalgathGuid;
            EventMap m_Events;
            Position const m_TuralyonSpawnPos = { 6209.154f, 9930.958f, -25.51628f, 5.580019f };
            Position const m_BaraatSpawnPos = { 6215.542f, 9937.2f, -25.62933f, 5.42375f };
            Position const m_SorvosSpawnPos = { 6219.426f, 9939.207f, -25.62752f, 5.040601f };
            Position const m_TelaamonSpawnPos = { 6206.883f, 9926.991f, -25.51535f, 5.849791f };
            Position const m_TalgathSpawnPos = { 6235.13f, 9909.958f, -25.19158f, 2.305567f };
            bool m_TalgathDefeatedEvent = false;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_VelenStartFight:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_GrandVindicatorSorvos, m_SorvosSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        m_FightPartyGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_BlademasterTelaamon, m_TelaamonSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        m_FightPartyGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_BaraatTheLongshot, m_BaraatSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        m_FightPartyGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Turalyon, m_TuralyonSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TuralyonSayFirstLine);
                        m_FightPartyGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Talgath, m_TalgathSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TalgathSayFirstLine);
                        m_TalgathGuid = l_Creature->GetGUID();
                    }

                    DoCast(eSpells::Spell_ThreatReduction, true);
                    m_Events.ScheduleEvent(eEvents::Event_StartAttackTalgath, 11000);
                    break;
                }
                default:
                    break;
                }
            }

            void EnterCombat(Unit* victim) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastSmite, 3000);
                m_Events.ScheduleEvent(eEvents::Event_CastLightsVengeance, 11000);
                m_Events.ScheduleEvent(eEvents::Event_CastCircleOfLight, 23000);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !l_Player->IsInWorld() || !l_Player->HasQuest(eQuests::Quest_AcrossTheUniverse))
                    return;

                if (l_Player->HasAura(eSpells::Spell_PlayerFelBlast) && !m_TalgathDefeatedEvent)
                {
                    for (auto l_Itr : m_FightPartyGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            if (l_Creature->GetEntry() == eNpcs::Npc_BaraatTheLongshot)
                            {
                                l_Creature->AI()->DoAction(eActions::Action_BaraatStartPathToTalgath);
                            }
                            else if (l_Creature->GetEntry() == eNpcs::Npc_BlademasterTelaamon)
                            {
                                l_Creature->AI()->DoAction(eActions::Action_TelaamonStartPathToTalgath);
                            }
                            else if (l_Creature->GetEntry() == eNpcs::Npc_GrandVindicatorSorvos)
                            {
                                l_Creature->AI()->DoAction(eActions::Action_SorvosStartPathToTalgath);
                            }
                            else if (l_Creature->GetEntry() == eNpcs::Npc_Turalyon)
                            {
                                l_Creature->AI()->DoAction(eActions::Action_TuralyonStartPathToTalgath);
                            }
                        }
                    }

                    me->CastStop();
                    me->StopAttack();
                    me->DeleteThreatList();
                    me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_NPC);
                    DoCast(eSpells::Spell_FelBlast, true);
                    m_Events.Reset();
                    m_Events.ScheduleEvent(eEvents::Event_VisualKit, 5000);
                    m_TalgathDefeatedEvent = true;
                }

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartAttackTalgath:
                {
                    if (Creature* l_Talgath = ObjectAccessor::GetCreature(*me, m_TalgathGuid))
                    {
                        for (auto l_Itr : m_FightPartyGuids)
                        {
                            if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                            {
                                if (l_Creature->GetEntry() == eNpcs::Npc_BaraatTheLongshot)
                                    l_Talgath->AI()->AttackStart(l_Creature, true);

                                l_Creature->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_NPC);
                                l_Creature->AI()->AttackStart(l_Talgath, true);
                            }
                        }

                        me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_NPC);
                        AttackStart(l_Talgath, true);
                        Talk(0, l_Player->GetGUID());
                    }

                    break;
                }
                case eEvents::Event_CastSmite:
                {
                    DoCastVictim(eSpells::Spell_Smite);
                    m_Events.ScheduleEvent(eEvents::Event_CastSmite, 5000);
                    break;
                }
                case eEvents::Event_CastLightsVengeance:
                {
                    DoCast(eSpells::Spell_LightsVengeance);
                    m_Events.ScheduleEvent(eEvents::Event_CastLightsVengeance, urand(15000, 20000));
                    break;
                }
                case eEvents::Event_CastCircleOfLight:
                {
                    DoCast(eSpells::Spell_CircleOfLight, true);
                    m_Events.ScheduleEvent(eEvents::Event_CastCircleOfLight, urand(15000, 20000));
                    break;
                }
                case eEvents::Event_VisualKit:
                {
                    me->SendPlaySpellVisualKit(84486, 0, 0);
                    me->RemoveAllAuras();
                    m_Events.ScheduleEvent(eEvents::Event_ShackleTalgath, 2000);
                    break;
                }
                case eEvents::Event_ShackleTalgath:
                {
                    if (Creature* l_Talgath = ObjectAccessor::GetCreature(*me, m_TalgathGuid))
                    {
                        DoCast(l_Talgath, eSpells::Spell_Shackle, true);
                    }

                    me->SetWalk(false);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_MoveToTalgathEnd, 6233.72f, 9912.25f, -25.07319f);
                    Talk(1, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_KillTalgath, 29000);
                    break;
                }
                case eEvents::Event_KillTalgath:
                {
                    if (Creature* l_Talgath = ObjectAccessor::GetCreature(*me, m_TalgathGuid))
                    {
                        DoCast(l_Talgath, eSpells::Spell_FinalPrayer);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_Killcredit, 10000);
                    break;
                }
                case eEvents::Event_Killcredit:
                {
                    for (auto l_Itr : m_FightPartyGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->DespawnOrUnsummon();
                        }
                    }

                    if (Creature* l_Talgath = ObjectAccessor::GetCreature(*me, m_TalgathGuid))
                    {
                        l_Talgath->DespawnOrUnsummon();
                    }

                    me->DespawnOrUnsummon();
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_TalgathDefeated);

                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_prophet_velen_125239AI(p_Creature);
        }
};

/// Grand Vindicator Sorvos - 125235
class npc_grand_vindicator_sorvos_125235 : public CreatureScript
{
    public:
        npc_grand_vindicator_sorvos_125235() : CreatureScript("npc_grand_vindicator_sorvos_125235") { }

        struct npc_grand_vindicator_sorvos_125235AI : public ScriptedAI
        {
            npc_grand_vindicator_sorvos_125235AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eActions
            {
                Action_SorvosStartPathToTalgath = 5
            };

            enum eEvents
            {
                Event_CastHandOfReckoning = 1,
                Event_CastConsecration = 2,
                Event_CastFistOfTheVindicator = 3,
                Event_CastRighteousThunder = 4,
                Event_MoveToTalgath = 5
            };

            enum eSpells
            {
                Spell_HandOfReckoning = 247956,
                Spell_Consecration = 184047,
                Spell_FistOfTheVindicator = 252885,
                Spell_RighteousThunder = 242548,
                Spell_FelBlast = 248626
            };

            enum ePoints
            {
                Point_MoveToTalgathEnd = 1
            };

            EventMap m_Events;

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_MoveToTalgathEnd:
                {
                    me->SetFacingTo(5.8294f);
                    break;
                }
                default:
                    break;
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 333);
            }

            void EnterCombat(Unit* victim) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastHandOfReckoning, 3000);
                m_Events.ScheduleEvent(eEvents::Event_CastConsecration, 4000);
                m_Events.ScheduleEvent(eEvents::Event_CastFistOfTheVindicator, 6000);
                m_Events.ScheduleEvent(eEvents::Event_CastRighteousThunder, 9000);
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_SorvosStartPathToTalgath:
                {
                    me->CastStop();
                    me->StopAttack();
                    me->DeleteThreatList();
                    me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_NPC);
                    DoCast(eSpells::Spell_FelBlast, true);
                    m_Events.Reset();
                    m_Events.ScheduleEvent(eEvents::Event_MoveToTalgath, 21000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastHandOfReckoning:
                {
                    DoCastVictim(eSpells::Spell_HandOfReckoning);
                    m_Events.ScheduleEvent(eEvents::Event_CastHandOfReckoning, urand(8000, 10000));
                    break;
                }
                case eEvents::Event_CastConsecration:
                {
                    DoCast(eSpells::Spell_Consecration);
                    m_Events.ScheduleEvent(eEvents::Event_CastConsecration, urand(20000, 25000));
                    break;
                }
                case eEvents::Event_CastFistOfTheVindicator:
                {
                    DoCast(eSpells::Spell_FistOfTheVindicator, true);
                    m_Events.ScheduleEvent(eEvents::Event_CastFistOfTheVindicator, urand(20000, 25000));
                    break;
                }
                case eEvents::Event_CastRighteousThunder:
                {
                    DoCast(eSpells::Spell_RighteousThunder, true);
                    m_Events.ScheduleEvent(eEvents::Event_CastRighteousThunder, urand(25000, 30000));
                    break;
                }
                case eEvents::Event_MoveToTalgath:
                {
                    me->SetWalk(false);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_MoveToTalgathEnd, 6226.06f, 9914.77f, -25.04813f);
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_grand_vindicator_sorvos_125235AI(p_Creature);
        }
};

/// Blademaster Telaamon - 125236
class npc_blademaster_telaamon_125236 : public CreatureScript
{
    public:
        npc_blademaster_telaamon_125236() : CreatureScript("npc_blademaster_telaamon_125236") { }

        struct npc_blademaster_telaamon_125236AI : public ScriptedAI
        {
            npc_blademaster_telaamon_125236AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eActions
            {
                Action_TelaamonStartPathToTalgath = 4
            };

            enum eEvents
            {
                Event_CastBlazingDivide = 1,
                Event_CastRighteousBlade = 2,
                Event_MoveToTalgath = 3
            };

            enum eSpells
            {
                Spell_ThreatReduction = 99203,
                Spell_BlazingDivide = 242358,
                Spell_RighteousBlade = 251628,
                Spell_FelBlast = 248626
            };

            enum ePoints
            {
                Point_MoveToTalgathEnd = 1
            };

            EventMap m_Events;

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_MoveToTalgathEnd:
                {
                    me->SetFacingTo(4.782202f);
                    break;
                }
                default:
                    break;
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                DoCast(eSpells::Spell_ThreatReduction, true);
                me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 375);
            }

            void EnterCombat(Unit* victim) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastBlazingDivide, 3000);
                m_Events.ScheduleEvent(eEvents::Event_CastRighteousBlade, 8000);
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_TelaamonStartPathToTalgath:
                {
                    me->CastStop();
                    me->StopAttack();
                    me->DeleteThreatList();
                    me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_NPC);
                    DoCast(eSpells::Spell_FelBlast, true);
                    m_Events.Reset();
                    m_Events.ScheduleEvent(eEvents::Event_MoveToTalgath, 21000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastBlazingDivide:
                {
                    DoCast(eSpells::Spell_BlazingDivide);
                    m_Events.ScheduleEvent(eEvents::Event_CastBlazingDivide, urand(4000, 7000));
                    break;
                }
                case eEvents::Event_CastRighteousBlade:
                {
                    DoCastVictim(eSpells::Spell_RighteousBlade);
                    m_Events.ScheduleEvent(eEvents::Event_CastRighteousBlade, urand(5000, 8000));
                    break;
                }
                case eEvents::Event_MoveToTalgath:
                {
                    me->SetWalk(false);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_MoveToTalgathEnd, 6234.42f, 9921.2f, -25.05311f);
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_blademaster_telaamon_125236AI(p_Creature);
        }
};

/// Baraat the Longshot - 125237
class npc_baraat_the_longshot_125237 : public CreatureScript
{
    public:
        npc_baraat_the_longshot_125237() : CreatureScript("npc_baraat_the_longshot_125237") { }

        struct npc_baraat_the_longshot_125237AI : public ScriptedAI
        {
            npc_baraat_the_longshot_125237AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eActions
            {
                Action_BaraatStartPathToTalgath = 3
            };

            enum eEvents
            {
                Event_CastShoot = 1,
                Event_CastDivineBarrage = 2,
                Event_CastDivineBolt = 3,
                Event_MoveToTalgath = 4
            };

            enum eSpells
            {
                Spell_ThreatReduction = 99203,
                Spell_Shoot = 245328,
                Spell_DivineBarrage = 251591,
                Spell_DivineBolt = 251614,
                Spell_FelBlast = 248626
            };

            enum ePoints
            {
                Point_MoveToTalgathEnd = 1
            };

            EventMap m_Events;

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_MoveToTalgathEnd:
                {
                    me->SetFacingTo(5.026548f);
                    break;
                }
                default:
                    break;
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                SetCombatMovement(false);
                DoCast(eSpells::Spell_ThreatReduction, true);
                me->SetUInt32Value(UNIT_FIELD_BYTES_2, 2);
                me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 376);
            }

            void EnterCombat(Unit* victim) override
            {
                DoCast(eSpells::Spell_Shoot, victim);
                m_Events.ScheduleEvent(eEvents::Event_CastShoot, 1000);
                m_Events.ScheduleEvent(eEvents::Event_CastDivineBarrage, 8000);
                m_Events.ScheduleEvent(eEvents::Event_CastDivineBolt, 14000);
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_BaraatStartPathToTalgath:
                {
                    me->CastStop();
                    me->StopAttack();
                    me->DeleteThreatList();
                    me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_NPC);
                    DoCast(eSpells::Spell_FelBlast, true);
                    m_Events.Reset();
                    m_Events.ScheduleEvent(eEvents::Event_MoveToTalgath, 21000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastShoot:
                {
                    DoCastVictim(eSpells::Spell_Shoot);
                    m_Events.ScheduleEvent(eEvents::Event_CastShoot, urand(1000, 2000));
                    break;
                }
                case eEvents::Event_CastDivineBarrage:
                {
                    DoCast(eSpells::Spell_DivineBarrage);
                    m_Events.ScheduleEvent(eEvents::Event_CastDivineBarrage, urand(10000, 15000));
                    break;
                }
                case eEvents::Event_CastDivineBolt:
                {
                    DoCastVictim(eSpells::Spell_DivineBolt);
                    m_Events.ScheduleEvent(eEvents::Event_CastDivineBolt, urand(20000, 25000));
                    break;
                }
                case eEvents::Event_MoveToTalgath:
                {
                    me->SetWalk(false);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_MoveToTalgathEnd, 6232.31f, 9920.11f, -25.05055f);
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_baraat_the_longshot_125237AI(p_Creature);
        }
};

/// High Exarch Turalyon - 125238
class npc_high_exarch_turalyon_125238 : public CreatureScript
{
    public:
        npc_high_exarch_turalyon_125238() : CreatureScript("npc_high_exarch_turalyon_125238") { }

        struct npc_high_exarch_turalyon_125238AI : public ScriptedAI
        {
            npc_high_exarch_turalyon_125238AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_TuralyonAfterFight[24] =
            {
                { 6243.75f, 9919.904f, -24.73347f },
                { 6246.5f, 9924.154f, -24.73347f },
                { 6250.5f, 9931.654f, -24.73347f },
                { 6255.0f, 9939.154f, -24.73347f },
                { 6260.5f, 9949.404f, -26.23347f },
                { 6267.25f, 9962.404f, -26.23347f },
                { 6269.0f, 9973.654f, -26.23347f },
                { 6267.25f, 9982.904f, -24.48347f },
                { 6254.75f, 9996.654f, -15.73347f },
                { 6249.25f, 10004.65f, -15.73347f },
                { 6246.0f, 10009.4f, -15.73347f },
                { 6242.5f, 10016.15f, -15.73347f },
                { 6240.25f, 10025.65f, -15.23347f },
                { 6237.75f, 10044.9f, -15.23347f },
                { 6237.25f, 10060.4f, -15.23347f },
                { 6244.25f, 10069.65f, -15.23347f },
                { 6246.5f, 10071.4f, -12.98347f },
                { 6250.75f, 10073.65f, -12.98347f },
                { 6262.75f, 10083.4f, -14.98347f },
                { 6275.0f, 10089.4f, -16.23347f },
                { 6284.75f, 10091.4f, -16.23347f },
                { 6295.75f, 10096.9f, -16.23347f },
                { 6303.25f, 10102.65f, -16.23347f },
                { 6308.811f, 10111.65f, -16.51042f }
            };

            enum eActions
            {
                Action_TuralyonSayFirstLine = 1,
                Action_TuralyonStartPathToTalgath = 6,
                Action_TuralyonMoveAfterFight = 18
            };

            enum eEvents
            {
                Event_CastConsecration = 1,
                Event_CastCrusaderStrike = 2,
                Event_CastAvengingWrath = 3,
                Event_CastBladeOfTheHighExarch = 4,
                Event_MoveToTalgath = 5,
                Event_StartPathAfterFight = 6
            };

            enum eSpells
            {
                Spell_ThreatReduction = 99203,
                Spell_CrashOfLight = 240893,
                Spell_Consecration = 251549,
                Spell_CrusaderStrike = 241011,
                Spell_AvengingWrath = 252856,
                Spell_BladeOfTheHighExarch = 251150,
                Spell_FelBlast = 248626
            };

            enum ePoints
            {
                Point_MoveToTalgathEnd = 1,
                Point_PathAfterFightEnd = 2
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_MoveToTalgathEnd:
                {
                    me->SetFacingTo(5.794493f);
                    break;
                }
                case ePoints::Point_PathAfterFightEnd:
                {
                    me->SendPlaySpellVisualKit(85644, 0, 0);
                    me->SendPlaySpellVisualKit(85596, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void EnterCombat(Unit* victim) override
            {
                DoCastVictim(eSpells::Spell_CrashOfLight);
                m_Events.ScheduleEvent(eEvents::Event_CastConsecration, 1000);
                m_Events.ScheduleEvent(eEvents::Event_CastCrusaderStrike, 8000);
                m_Events.ScheduleEvent(eEvents::Event_CastAvengingWrath, 14000);
                m_Events.ScheduleEvent(eEvents::Event_CastBladeOfTheHighExarch, 14000);
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_TuralyonSayFirstLine:
                {
                    uint64 l_PlayerGuid = m_SummonerGuid;

                    me->AddDelayedEvent([this, l_PlayerGuid]() -> void
                    {
                        if (Player* l_Player = ObjectAccessor::GetPlayer(*me, l_PlayerGuid))
                            Talk(0, l_PlayerGuid);
                    }, 7000);

                    DoCast(eSpells::Spell_ThreatReduction, true);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 375);
                    break;
                }
                case eActions::Action_TuralyonStartPathToTalgath:
                {
                    me->CastStop();
                    me->StopAttack();
                    me->DeleteThreatList();
                    me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_NPC);
                    DoCast(eSpells::Spell_FelBlast, true);
                    m_Events.Reset();
                    m_Events.ScheduleEvent(eEvents::Event_MoveToTalgath, 21000);
                    break;
                }
                case eActions::Action_TuralyonMoveAfterFight:
                {
                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterFight, 8000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastConsecration:
                {
                    DoCast(eSpells::Spell_Consecration);
                    m_Events.ScheduleEvent(eEvents::Event_CastConsecration, 30000);
                    break;
                }
                case eEvents::Event_CastCrusaderStrike:
                {
                    DoCastVictim(eSpells::Spell_CrusaderStrike);
                    m_Events.ScheduleEvent(eEvents::Event_CastCrusaderStrike, urand(10000, 15000));
                    break;
                }
                case eEvents::Event_CastAvengingWrath:
                {
                    DoCast(eSpells::Spell_AvengingWrath);
                    m_Events.ScheduleEvent(eEvents::Event_CastAvengingWrath, 20000);
                    break;
                }
                case eEvents::Event_CastBladeOfTheHighExarch:
                {
                    DoCast(eSpells::Spell_BladeOfTheHighExarch);
                    m_Events.ScheduleEvent(eEvents::Event_CastBladeOfTheHighExarch, urand(20000, 25000));
                    break;
                }
                case eEvents::Event_MoveToTalgath:
                {
                    me->SetWalk(false);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_MoveToTalgathEnd, 6232.19f, 9910.66f, -25.07329f);
                    break;
                }
                case eEvents::Event_StartPathAfterFight:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterFightEnd, Path_TuralyonAfterFight, 24, true);
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_high_exarch_turalyon_125238AI(p_Creature);
        }
};

/// Talgath - 127085
class npc_talgath_127085 : public CreatureScript
{
    public:
        npc_talgath_127085() : CreatureScript("npc_talgath_127085") { }

        struct npc_talgath_127085AI : public ScriptedAI
        {
            npc_talgath_127085AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eActions
            {
                Action_TalgathSayFirstLine = 2
            };

            enum eEvents
            {
                Event_CastCrossStrike = 1,
                Event_CastFelShiv = 2,
                Event_CastOverwhelmingAssault = 3,
                Event_VisualShield = 4,
                Event_StartPath = 5,
                Event_StartConversation = 6,
                Event_SayFourthLine = 7,
                Event_SayFifthLine = 8
            };

            enum eSpells
            {
                Spell_CrossStrike = 252329,
                Spell_FelShiv = 252330,
                Spell_OverwhelmingAssault = 252331,
                Spell_FelBlast = 248624,
                Spell_FelShield = 248623
            };

            enum eConversations
            {
                Conv_EightyFivePctConversation = 5449,
                Conv_FiftyFivePctConversation = 5450,
                Conv_ThirtyFivePctConversation = 5451,
                Conv_CrestOfChowledgeConversation = 5463
            };

            enum ePoints
            {
                Point_TalgathMoveEnd = 1
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;
            bool m_EightyFivePctConv = false;
            bool m_FiftyFivePctConv = false;
            bool m_ThirtyFivePctConv = false;
            bool m_TalgathDefeated = false;

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_TalgathMoveEnd:
                {
                    me->SetFacingTo(5.532694f);
                    break;
                }
                default:
                    break;
                }
            }

            void DamageTaken(Unit* attacker, uint32& damage, SpellInfo const* /*p_SpellInfo*/) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                if (me->GetHealthPct() <= 85 && !m_EightyFivePctConv)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_EightyFivePctConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_EightyFivePctConv = true;
                }

                if (me->GetHealthPct() <= 55 && !m_FiftyFivePctConv)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_FiftyFivePctConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_FiftyFivePctConv = true;
                }

                if (me->GetHealthPct() <= 35 && !m_ThirtyFivePctConv)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ThirtyFivePctConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_ThirtyFivePctConv = true;
                }

                if (damage >= me->GetHealth())
                {
                    damage = 0;
                    me->SetHealth(1);

                    if (!m_TalgathDefeated)
                    {
                        me->CastStop();
                        me->StopAttack();
                        me->DeleteThreatList();
                        me->SetFlag(UNIT_FIELD_FLAGS, 33536);
                        Talk(1, l_Player->GetGUID());
                        me->RemoveAllAuras();
                        DoCast(eSpells::Spell_FelBlast, true);
                        m_Events.Reset();
                        m_TalgathDefeated = true;
                        m_Events.ScheduleEvent(eEvents::Event_VisualShield, 1000);
                    }
                }
            }

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void EnterCombat(Unit* victim) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastCrossStrike, 5000);
                m_Events.ScheduleEvent(eEvents::Event_CastFelShiv, 12000);
                m_Events.ScheduleEvent(eEvents::Event_CastOverwhelmingAssault, 26000);
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_TalgathSayFirstLine:
                {
                    uint64 l_PlayerGuid = m_SummonerGuid;

                    me->AddDelayedEvent([this, l_PlayerGuid]() -> void
                    {
                        if (Player* l_Player = ObjectAccessor::GetPlayer(*me, l_PlayerGuid))
                            Talk(0, l_PlayerGuid);
                    }, 2000);

                    me->AddDelayedEvent([this]() -> void
                    {
                        me->RemoveFlag(UNIT_FIELD_FLAGS, 33024);
                        me->SetFlag(UNIT_FIELD_FLAGS, 32768);
                        me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 505);
                    }, 6000);

                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastCrossStrike:
                {
                    DoCastVictim(eSpells::Spell_CrossStrike);
                    m_Events.ScheduleEvent(eEvents::Event_CastCrossStrike, urand(10000, 15000));
                    break;
                }
                case eEvents::Event_CastFelShiv:
                {
                    DoCastVictim(eSpells::Spell_FelShiv);
                    m_Events.ScheduleEvent(eEvents::Event_CastFelShiv, urand(5000, 10000));
                    break;
                }
                case eEvents::Event_CastOverwhelmingAssault:
                {
                    DoCastVictim(eSpells::Spell_OverwhelmingAssault);
                    m_Events.ScheduleEvent(eEvents::Event_CastOverwhelmingAssault, urand(10000, 15000));
                    break;
                }
                case eEvents::Event_VisualShield:
                {
                    me->SendPlaySpellVisualKit(64902, 0, 0);
                    DoCast(eSpells::Spell_FelShield, true);
                    m_Events.ScheduleEvent(eEvents::Event_StartPath, 3000);
                    break;
                }
                case eEvents::Event_StartPath:
                {
                    Talk(2, l_Player->GetGUID());
                    me->SetWalk(false);
                    me->SetSpeed(MOVE_RUN, 0.7f);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_TalgathMoveEnd, 6238.803f, 9906.669f, -25.0484f);
                    m_Events.ScheduleEvent(eEvents::Event_StartConversation, 7000);
                    break;
                }
                case eEvents::Event_StartConversation:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_CrestOfChowledgeConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SayFourthLine, 30000);
                    break;
                }
                case eEvents::Event_SayFourthLine:
                {
                    Talk(3, l_Player->GetGUID());
                    me->SetAIAnimKitId(13634);
                    m_Events.ScheduleEvent(eEvents::Event_SayFifthLine, 3000);
                    break;
                }
                case eEvents::Event_SayFifthLine:
                {
                    Talk(4, l_Player->GetGUID());
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_talgath_127085AI(p_Creature);
        }
};

/// Prophet Velen - 128735
class npc_prophet_velen_128735 : public CreatureScript
{
    public:
        npc_prophet_velen_128735() : CreatureScript("npc_prophet_velen_128735") { }

        struct npc_prophet_velen_128735AI : public ScriptedAI
        {
            npc_prophet_velen_128735AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_VelenAfterTeleportOnVindicaar[8] =
            {
                { 4604.19f, 9827.611f, 68.59331f },
                { 4610.44f, 9830.611f, 68.84331f },
                { 4617.94f, 9833.111f, 71.34331f },
                { 4622.84f, 9833.531f, 71.62341f },
                { 4624.584f, 9833.986f, 71.69349f },
                { 4633.834f, 9834.736f, 71.69349f },
                { 4642.334f, 9835.486f, 71.69349f },
                { 4647.829f, 9835.941f, 71.26357f }
            };

            enum eActions
            {
                Action_VelenMoveAfterTeleportOnVindicaar = 25,
                Action_TuralyonMoveAfterTeleportOnVindicaar = 26,
                Action_BaraatMoveAfterTeleportOnVindicaar = 27,
                Action_SorvosMoveAfterTeleportOnVindicaar = 28,
                Action_TelaamonMoveAfterTeleportOnVindicaar = 29,
                Action_VelenGoingToSearchCrest = 30,
                Action_AlleriaArrived = 31
            };

            enum eEvents
            {
                Event_StartPathAfterTeleportOnVindicaar = 1,
                Event_DespawnArmy = 2,
                Event_SayFirstLine = 3,
                Event_SaySecondLine = 4,
                Event_SetFacing = 5,
                Event_SummonAlleria = 6,
                Event_SetDefaultFacing = 7
            };

            enum ePoints
            {
                Point_PathAfterTeleportOnVindicaarEnd = 1
            };

            enum eKillcredits
            {
                Killcredit_VelenArrivedOnVindicaar = 2915070
            };

            enum eNpcs
            {
                Npc_Turalyon = 124312,
                Npc_Baraat = 123670,
                Npc_Sorvos = 123669,
                Npc_Telaamon = 123671,
                Npc_Alleria = 121230
            };

            enum eConversations
            {
                Conv_QuestShadowOfTheTriumvirateRewarded = 5740
            };

            enum eQuests
            {
                Quest_ShadowOfTheTriumvirate = 47416,
                Quest_TheSeatOfTheTriumvirate = 47238
            };

            Position const m_TuralyonSpawnPos = { 4601.55f, 9829.32f, 68.0599f, 6.126613f };
            Position const m_BaraatSpawnPos = { 4602.02f, 9841.35f, 68.0763f, 1.576816f };
            Position const m_SorvosSpawnPos = { 4600.28f, 9834.67f, 68.0601f, 2.114374f };
            Position const m_TelaamonSpawnPos = { 4600.06f, 9837.08f, 68.0632f, 2.681287f };
            Position const m_AlleriaSpawnPos = { 4623.235f, 9835.828f, 71.70805f, 6.127662f };

            std::vector<ObjectGuid> m_ArmyOfTheLightGuids;
            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_VelenMoveAfterTeleportOnVindicaar:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Turalyon, m_TuralyonSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TuralyonMoveAfterTeleportOnVindicaar);
                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Baraat, m_BaraatSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_BaraatMoveAfterTeleportOnVindicaar);
                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Sorvos, m_SorvosSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_SorvosMoveAfterTeleportOnVindicaar);
                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Telaamon, m_TelaamonSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_TelaamonMoveAfterTeleportOnVindicaar);
                        m_ArmyOfTheLightGuids.push_back(l_Creature->GetGUID());
                    }

                    me->AddDelayedEvent([this]() -> void
                    {
                        me->SendPlaySpellVisualKit(85496, 0, 0);
                    }, 500);

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathAfterTeleportOnVindicaar, 2000);
                    break;
                }
                case eActions::Action_VelenGoingToSearchCrest:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);
                    m_Events.ScheduleEvent(eEvents::Event_SayFirstLine, 1000);
                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_PointId)
                {
                case ePoints::Point_PathAfterTeleportOnVindicaarEnd:
                {
                    m_Events.ScheduleEvent(eEvents::Event_DespawnArmy, 2000);
                    break;
                }
                default:
                    break;
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_TheSeatOfTheTriumvirate:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenGoingToSearchCrest);
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void sQuestReward(Player* p_Player, Quest const* p_Quest, uint32 /*p_Option*/) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_ShadowOfTheTriumvirate:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestShadowOfTheTriumvirateRewarded, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartPathAfterTeleportOnVindicaar:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathAfterTeleportOnVindicaarEnd, Path_VelenAfterTeleportOnVindicaar, 8, true);
                    break;
                }
                case eEvents::Event_DespawnArmy:
                {
                    for (auto l_Itr : m_ArmyOfTheLightGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->DespawnOrUnsummon();
                        }
                    }

                    me->DespawnOrUnsummon();
                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_VelenArrivedOnVindicaar);
                    break;
                }
                case eEvents::Event_SayFirstLine:
                {
                    Talk(0, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_SaySecondLine, 5000);
                    break;
                }
                case eEvents::Event_SaySecondLine:
                {
                    Talk(1, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_SetFacing, 2000);
                    break;
                }
                case eEvents::Event_SetFacing:
                {
                    me->SetFacingTo(3.787364f);
                    m_Events.ScheduleEvent(eEvents::Event_SummonAlleria, 1000);
                    break;
                }
                case eEvents::Event_SummonAlleria:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Alleria, m_AlleriaSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AlleriaArrived);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SetDefaultFacing, 2000);
                    break;
                }
                case eEvents::Event_SetDefaultFacing:
                {
                    me->SetFacingTo(5.131268f);
                    me->DespawnOrUnsummon(6000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_prophet_velen_128735AI(p_Creature);
        }
};

/// Investigate the Ruins of Oronaar  - 126368
class npc_investigate_the_ruins_of_oronaar_126368 : public CreatureScript
{
    public:
        npc_investigate_the_ruins_of_oronaar_126368() : CreatureScript("npc_investigate_the_ruins_of_oronaar_126368") { }

        struct npc_investigate_the_ruins_of_oronaar_126368AI : public ScriptedAI
        {
            npc_investigate_the_ruins_of_oronaar_126368AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eQuests
            {
                Quest_WhispersFromOronaar = 40761
            };

            enum eObjectives
            {
                Obj_InvestigateTheRuinsOfOronaar = 290492
            };

            enum eKillcredits
            {
                Killcredit_InvestigateTheRuinsOfOronaar = 126368
            };

            enum eConversations
            {
                Conv_RuinsOfOronaarInvestigated = 5753
            };

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) < 20.0f && l_Player->HasQuest(eQuests::Quest_WhispersFromOronaar) &&
                    l_Player->GetQuestObjectiveCounter(eObjectives::Obj_InvestigateTheRuinsOfOronaar) == 0 && l_Player->GetAreaId() == 8702)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_RuinsOfOronaarInvestigated, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_InvestigateTheRuinsOfOronaar);
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_investigate_the_ruins_of_oronaar_126368AI(p_Creature);
        }
};

/// Arkhaan - 121518
class npc_arkhaan_121518 : public CreatureScript
{
    public:
        npc_arkhaan_121518() : CreatureScript("npc_arkhaan_121518") { }

        struct npc_arkhaan_121518AI : public ScriptedAI
        {
            npc_arkhaan_121518AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_ArkhaanToAlleria[3] =
            {
                { 5143.664f, 10120.76f, -114.9806f },
                { 5149.233f, 10126.79f, -116.6568f },
                { 5151.409f, 10129.17f, -117.1994f }
            };

            G3D::Vector3 const Path_ArkhaanWithAlleriaFirst[29] =
            {
                { 5153.486f, 10131.42f, -117.7916f },
                { 5155.736f, 10133.42f, -118.5416f },
                { 5158.736f, 10135.92f, -120.0416f },
                { 5158.736f, 10137.92f, -121.0416f },
                { 5158.986f, 10139.92f, -121.7916f },
                { 5159.236f, 10141.92f, -122.5416f },
                { 5159.486f, 10144.67f, -123.0416f },
                { 5159.736f, 10146.67f, -124.0416f },
                { 5159.736f, 10148.67f, -124.7916f },
                { 5159.986f, 10150.67f, -125.5416f },
                { 5160.236f, 10152.67f, -126.5416f },
                { 5160.486f, 10154.67f, -127.2916f },
                { 5160.563f, 10156.66f, -128.4673f },
                { 5161.317f, 10158.7f, -128.8446f },
                { 5161.817f, 10160.45f, -129.3446f },
                { 5162.567f, 10164.45f, -130.0946f },
                { 5163.817f, 10169.2f, -130.5946f },
                { 5164.047f, 10170.2f, -131.0716f },
                { 5172.144f, 10180.64f, -131.1507f },
                { 5173.593f, 10181.78f, -130.6283f },
                { 5174.343f, 10183.03f, -131.1283f },
                { 5177.593f, 10187.03f, -130.6283f },
                { 5178.343f, 10187.53f, -130.8783f },
                { 5179.709f, 10187.56f, -130.84172f },
                { 5184.194f, 10190.26f, -129.5512f },
                { 5186.694f, 10191.51f, -129.0512f },
                { 5188.944f, 10193.01f, -128.3012f },
                { 5190.194f, 10193.51f, -128.0512f },
                { 5191.073f, 10194.17f, -128.1697f }
            };

            G3D::Vector3 const Path_ArkhaanWithAlleriaSecond[36] =
            {
                { 5198.937f, 10199.69f, -127.5134f },
                { 5200.187f, 10200.44f, -127.2634f },
                { 5202.187f, 10201.19f, -126.7634f },
                { 5204.937f, 10202.44f, -126.2634f },
                { 5206.437f, 10202.94f, -125.5134f },
                { 5207.437f, 10203.19f, -125.5134f },
                { 5208.437f, 10203.44f, -125.2634f },
                { 5209.937f, 10203.94f, -124.7634f },
                { 5211.187f, 10204.44f, -124.5134f },
                { 5213.687f, 10205.19f, -124.0134f },
                { 5216.687f, 10206.19f, -123.2634f },
                { 5217.323f, 10206.47f, -123.1699f },
                { 5218.357f, 10206.91f, -122.6087f },
                { 5219.916f, 10207.54f, -121.7342f },
                { 5220.263f, 10207.81f, -121.3093f },
                { 5221.513f, 10208.31f, -120.8093f },
                { 5223.513f, 10209.06f, -120.3093f },
                { 5224.513f, 10209.31f, -120.0593f },
                { 5229.513f, 10211.31f, -118.3093f },
                { 5233.513f, 10212.56f, -117.0593f },
                { 5234.763f, 10213.06f, -116.5593f },
                { 5235.252f, 10213.35f, -116.437f },
                { 5237.679f, 10214.27f, -115.4806f },
                { 5239.679f, 10215.02f, -114.9806f },
                { 5240.543f, 10215.53f, -114.5518f },
                { 5244.035f, 10217.02f, -113.7195f },
                { 5247.785f, 10218.52f, -112.9695f },
                { 5249.535f, 10219.02f, -112.7195f },
                { 5258.519f, 10223.15f, -110.3865f },
                { 5259.792f, 10223.5f, -109.9454f },
                { 5263.292f, 10224.25f, -109.1954f },
                { 5265.292f, 10224.75f, -108.4454f },
                { 5266.361f, 10225.03f, -108.4178f },
                { 5268.918f, 10225.54f, -108.4256f },
                { 5274.338f, 10226.73f, -108.4006f },
                { 5276.742f, 10227.15f, -108.335f }
            };

            enum eActions
            {
                Action_ArkhaanStartPathToAlleria = 33,
                Action_AlleriaStartFirstPathWithArkhaan = 34,
                Action_ArkhaanStartFirstPathWithAlleria = 35
            };

            enum eQuests
            {
                Quest_CustomArkhaanMoveComplete = 471010,
                Quest_ArkhaansPlan = 47183
            };

            enum eObjectives
            {
                Obj_FollowArkhaan = 290067
            };

            enum eKillcredits
            {
                Killcredit_FollowArkhaan = 121518
            };

            enum ePoints
            {
                Point_PathToAlleriaEnd = 1,
                Point_FirstPathWithAlleriaEnd = 2,
                Point_JumpEnd = 3,
                Point_SecondPathWithAlleriaEnd = 4
            };

            enum eEvents
            {
                Event_StartPathToAlleria = 1,
                Event_RewardCustomQuest = 2,
                Event_StartFirstPathWithAlleria = 3,
                Event_StartFirstPathConversation = 4,
                Event_KillcreditFollowArkhaan = 5
            };

            enum eNpcs
            {
                Npc_Alleria = 121230
            };

            enum eConversations
            {
                Conv_ArkhaanFirstPathConversation = 4996
            };

            enum eSpells
            {
                Spell_CoverSpellArkhaansPlan = 242719
            };

            ObjectGuid m_SummonerGuid;
            ObjectGuid m_AlleriaGuid;
            EventMap m_Events;
            Position const m_AlleriaFirstSpawnPos = { 5153.915f, 10131.49f, -117.9963f, 3.84623f };

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_ArkhaanStartPathToAlleria:
                {
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);
                    m_Events.ScheduleEvent(eEvents::Event_StartPathToAlleria, 1000);
                    break;
                }
                case eActions::Action_ArkhaanStartFirstPathWithAlleria:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Alleria, m_AlleriaFirstSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AlleriaStartFirstPathWithArkhaan);
                        m_AlleriaGuid = l_Creature->GetGUID();
                    }

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);
                    m_Events.ScheduleEvent(eEvents::Event_StartFirstPathWithAlleria, 3000);
                    break;
                }
                default:
                    break;
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_ArkhaansPlan:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_ArkhaanStartFirstPathWithAlleria);
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_PointId)
                {
                case ePoints::Point_PathToAlleriaEnd:
                {
                    m_Events.ScheduleEvent(eEvents::Event_RewardCustomQuest, 10000);
                    break;
                }
                case ePoints::Point_FirstPathWithAlleriaEnd:
                {
                    me->GetMotionMaster()->MoveJump(5196.55f, 10198.4f, -128.857f, 20.0f, 10.0f, 0.0f, ePoints::Point_JumpEnd);
                    break;
                }
                case ePoints::Point_JumpEnd:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_SecondPathWithAlleriaEnd, Path_ArkhaanWithAlleriaSecond, 36, false);
                    break;
                }
                case ePoints::Point_SecondPathWithAlleriaEnd:
                {
                    Talk(0, l_Player->GetGUID());
                    me->SetAIAnimKitId(13094);
                    m_Events.ScheduleEvent(eEvents::Event_KillcreditFollowArkhaan, 2000);
                    break;
                }
                default:
                    break;
                }
            }

            void sGossipHello(Player* p_Player) override
            {
                if (p_Player->GetQuestObjectiveCounter(eObjectives::Obj_FollowArkhaan) == 1)
                {
                    p_Player->PrepareGossipMenu(me, 21058);
                    p_Player->SendPreparedGossip(me);
                }
            }

            void sGossipSelect(Player* p_Player, uint32 p_Sender, uint32 p_Action) override
            {
                if (p_Sender == 21075)
                {
                    p_Player->PlayerTalkClass->SendCloseGossip();
                    p_Player->CastSpell(p_Player, eSpells::Spell_CoverSpellArkhaansPlan, true);
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartPathToAlleria:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathToAlleriaEnd, Path_ArkhaanToAlleria, 3, true);
                    break;
                }
                case eEvents::Event_RewardCustomQuest:
                {
                    if (Quest const* l_Quest = sObjectMgr->GetQuestTemplate(eQuests::Quest_CustomArkhaanMoveComplete))
                    {
                        l_Player->RewardQuest(l_Quest, 0, nullptr, false);
                    }

                    me->DespawnOrUnsummon();
                    break;
                }
                case eEvents::Event_StartFirstPathWithAlleria:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_FirstPathWithAlleriaEnd, Path_ArkhaanWithAlleriaFirst, 29, false);
                    m_Events.ScheduleEvent(eEvents::Event_StartFirstPathConversation, 1000);
                    break;
                }
                case eEvents::Event_StartFirstPathConversation:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ArkhaanFirstPathConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eEvents::Event_KillcreditFollowArkhaan:
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AlleriaGuid))
                    {
                        l_Creature->DespawnOrUnsummon();
                    }

                    me->DespawnOrUnsummon();
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_FollowArkhaan);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_arkhaan_121518AI(p_Creature);
        }
};

/// Void Manifestation - 121539
class npc_void_manifestation_121539 : public CreatureScript
{
    public:
        npc_void_manifestation_121539() : CreatureScript("npc_void_manifestation_121539") { }

        struct npc_void_manifestation_121539AI : public ScriptedAI
        {
            npc_void_manifestation_121539AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_DispelManifestation = 242689
            };

            enum eKillcredits
            {
                Killcredit_VoidManifestationsCleansed = 121539
            };

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = p_Caster->ToPlayer())
                {
                    if (p_Spell->Id == eSpells::Spell_DispelManifestation)
                    {
                        me->AddToHideList(l_Player->GetGUID(), 360000);
                        me->DestroyForPlayer(l_Player);
                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_VoidManifestationsCleansed);
                    }
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_void_manifestation_121539AI(p_Creature);
        }
};

/// Arkhaan - 121556
class npc_arkhaan_121556 : public CreatureScript
{
    public:
        npc_arkhaan_121556() : CreatureScript("npc_arkhaan_121556") { }

        struct npc_arkhaan_121556AI : public ScriptedAI
        {
            npc_arkhaan_121556AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_ArkhaanEscortFirst[16] =
            {
                { 5281.915f, 10230.59f, -107.4821f },
                { 5287.415f, 10234.09f, -106.4821f },
                { 5293.915f, 10237.34f, -106.9821f },
                { 5295.915f, 10241.84f, -106.9821f },
                { 5296.665f, 10250.34f, -106.9821f },
                { 5294.665f, 10255.59f, -106.4821f },
                { 5286.665f, 10266.34f, -105.9821f },
                { 5280.665f, 10270.09f, -105.2321f },
                { 5272.415f, 10271.59f, -104.9821f },
                { 5264.915f, 10277.59f, -105.2321f },
                { 5262.915f, 10279.59f, -105.2321f },
                { 5257.915f, 10285.09f, -105.4821f },
                { 5254.415f, 10288.34f, -105.9821f },
                { 5249.415f, 10294.84f, -105.9821f },
                { 5245.665f, 10303.34f, -105.2321f },
                { 5242.588f, 10310.02f, -104.6791f }
            };

            G3D::Vector3 const Path_ArkhaanEscortSecond[21] =
            {
                { 5240.451f, 10313.19f, -104.2507f },
                { 5237.201f, 10316.69f, -104.2507f },
                { 5234.201f, 10320.19f, -104.5007f },
                { 5232.951f, 10324.69f, -104.5007f },
                { 5231.201f, 10330.19f, -104.0007f },
                { 5225.701f, 10340.19f, -102.7507f },
                { 5223.451f, 10344.69f, -102.0007f },
                { 5219.951f, 10349.69f, -101.2507f },
                { 5216.951f, 10353.94f, -100.7507f },
                { 5216.201f, 10359.94f, -100.2507f },
                { 5214.951f, 10365.94f, -99.75069f },
                { 5215.451f, 10371.44f, -99.00069f },
                { 5215.201f, 10377.44f, -98.25069f },
                { 5214.701f, 10382.19f, -97.75069f },
                { 5214.201f, 10388.69f, -97.00069f },
                { 5214.201f, 10392.94f, -96.50069f },
                { 5212.451f, 10400.44f, -96.00069f },
                { 5210.701f, 10405.69f, -96.00069f },
                { 5206.201f, 10410.94f, -96.00069f },
                { 5201.701f, 10413.44f, -95.25069f },
                { 5198.315f, 10414.86f, -94.82228f }
            };

            G3D::Vector3 const Path_ArkhaanEscortThird[10] =
            {
                { 5201.721f, 10413.68f, -94.92804f },
                { 5213.471f, 10408.68f, -95.17804f },
                { 5221.471f, 10406.68f, -94.17804f },
                { 5229.221f, 10405.43f, -92.67804f },
                { 5237.971f, 10406.43f, -90.67804f },
                { 5258.971f, 10407.93f, -86.17804f },
                { 5269.971f, 10408.43f, -84.17804f },
                { 5282.221f, 10407.93f, -82.92804f },
                { 5293.221f, 10406.68f, -82.67804f },
                { 5303.126f, 10402.5f, -77.5338f }
            };

            G3D::Vector3 const Path_ArkhaanEscortFourth[7] =
            {
                { 5304.685f, 10401.96f, -77.27527f },
                { 5308.435f, 10400.21f, -77.27527f },
                { 5309.435f, 10399.71f, -77.02527f },
                { 5312.935f, 10398.21f, -77.02527f },
                { 5316.935f, 10396.46f, -77.02527f },
                { 5319.744f, 10394.92f, -77.01674f },
                { 5329.346f, 10389.77f, -76.8108f }
            };

            enum eKillcredits
            {
                Killcredit_EscortArkhaanToIsolon = 121555,
                Killcredit_PortalOpened = 2936360
            };

            enum ePoints
            {
                Point_FirstEscortPathEnd = 1,
                Point_SecondEscortPathEnd = 2,
                Point_ThirdEscortPathEnd = 3,
                Point_FourthEscortPathEnd = 4,
                Point_DarklostKrokulPathEnd = 5
            };

            enum eEvents
            {
                Event_StartFirstEscortPath = 1,
                Event_StartSecondEscortPath = 2,
                Event_StartThirdEscortPath = 3,
                Event_StartFourthEscortPath = 4,
                Event_PingAlleria = 5,
                Event_OpenportalKillcredit = 6,
                Event_VisualKit = 7
            };

            enum eNpcs
            {
                Npc_DarklostKrokul = 121563,
                Npc_Voidling = 122946,
                Npc_VoidSiphoner = 119761,
                Npc_TargetBunny = 120693
            };

            enum eConversations
            {
                Conv_FirstEscortPath = 4997,
                Conv_SecondEscortPath = 4998,
                Conv_ThirdEscortPath = 4999,
                Conv_ArkhaanMoveIntoVoid = 5000
            };

            enum eSpells
            {
                Spell_ArkhaanSummon = 242716,
                Spell_VoidBeam = 245175,
                Spell_PingAlleria = 242829
            };

            std::vector<ObjectGuid> m_WaveCreatureGuids;
            ObjectGuid m_SummonerGuid;
            EventMap m_Events;
            Position const m_FirstWaveDarklostKrokulFirstSpawnpos = { 5248.656f, 10269.85f, -100.9043f, 1.135434f };
            Position const m_FirstWaveDarklostKrokulSecondSpawnpos = { 5210.803f, 10294.94f, -102.5998f, 0.1653878f };
            Position const m_FirstWaveDarklostKrokulThirdSpawnpos = { 5224.163f, 10305.69f, -93.40614f, 0.4049486f };
            Position const m_SecondWaveDarklostKrokulSpawnpos = { 5219.557f, 10410.02f, -94.6241f, 2.433384f };
            Position const m_SecondWaveVoidlingFirstSpawnpos = { 5208.223f, 10397.36f, -96.70847f, 2.085419f };
            Position const m_SecondWaveVoidlingSecondSpawnpos = { 5219.262f, 10423.48f, -93.22787f, 3.302019f };
            Position const m_SecondWaveVoidlingThirdSpawnpos = { 5216.033f, 10402.12f, -95.49863f, 2.085419f };
            Position const m_SecondWaveVoidlingFourthSpawnpos = { 5223.105f, 10418.25f, -93.42471f, 2.085419f };
            Position const m_ThirdWaveVoidSiphonerSpawnpos = { 5308.063f, 10400.68f, -77.3036f, 2.723945f };
            Position const m_ThirdWaveDarklostKrokulFirstSpawnpos = { 5300.378f, 10381.82f, -80.08264f, 2.132002f };
            Position const m_ThirdWaveDarklostKrokulSecondSpawnpos = { 5302.37f, 10393.9f, -64.5988f, 5.934119f };
            Position const m_ThirdWaveDarklostKrokulThirdSpawnpos = { 5311.44f, 10406.7f, -62.6883f, 1.029744f };
            Position const m_ThirdWaveDarklostKrokulFourthSpawnpos = { 5321.874f, 10415.66f, -79.58897f, 3.262161f };
            Position const m_TargetBunnySpawnPos = { 5333.549f, 10387.46f, -74.30183f, 2.500049f };

            uint8 m_FirstWaveCreaturesDied = 0;
            uint8 m_SecondWaveCreaturesDied = 0;
            uint8 m_ThirdWaveCreaturesDied = 0;
            bool m_FirstWaveStarted = false;
            bool m_SecondWaveStarted = false;
            bool m_ThirdWaveStarted = false;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->AddPlayerInPersonnalVisibilityList(p_Summoner->GetGUID());
                m_SummonerGuid = p_Summoner->GetGUID();
                m_Events.ScheduleEvent(eEvents::Event_StartFirstEscortPath, 1000);
            }

            void JustSummoned(Creature* p_Summon) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                p_Summon->SetGuidValue(UNIT_FIELD_DEMON_CREATOR, l_Player->GetGUID());
                l_Player->UpdateObjectVisibility();
                m_WaveCreatureGuids.push_back(p_Summon->GetGUID());
            }

            void SummonedCreatureDies(Creature* /*p_Summon*/, Unit* /*p_Killer*/) override
            {
                if (m_FirstWaveStarted)
                {
                    m_FirstWaveCreaturesDied++;

                    if (m_FirstWaveCreaturesDied == 3)
                    {
                        m_FirstWaveStarted = false;
                        m_Events.ScheduleEvent(eEvents::Event_StartSecondEscortPath, 2000);
                    }
                }

                if (m_SecondWaveStarted)
                {
                    m_SecondWaveCreaturesDied++;

                    if (m_SecondWaveCreaturesDied == 5)
                    {
                        m_SecondWaveStarted = false;
                        m_Events.ScheduleEvent(eEvents::Event_StartThirdEscortPath, 2000);
                    }
                }

                if (m_ThirdWaveStarted)
                {
                    m_ThirdWaveCreaturesDied++;

                    if (m_ThirdWaveCreaturesDied == 5)
                    {
                        m_ThirdWaveStarted = false;
                        m_Events.ScheduleEvent(eEvents::Event_StartFourthEscortPath, 2000);
                    }
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_PointId)
                {
                case ePoints::Point_FirstEscortPathEnd:
                {
                    uint64 l_PlayerGuid = m_SummonerGuid;

                    Talk(0, l_Player->GetGUID());
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 431);

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_DarklostKrokul, m_FirstWaveDarklostKrokulFirstSpawnpos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MoveJump(5247.09f, 10277.4f, -104.393f, 10.0f, 10.0f, 0.0f);
                        }, 2000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            G3D::Vector3 const Path_DarklostKrokul[15] =
                            {
                                { 5246.754f, 10279.54f, -104.6871f },
                                { 5245.504f, 10281.54f, -104.9371f },
                                { 5245.254f, 10282.04f, -105.1871f },
                                { 5243.754f, 10283.79f, -104.6871f },
                                { 5242.504f, 10284.79f, -105.1871f },
                                { 5243.504f, 10286.29f, -105.6871f },
                                { 5242.254f, 10286.54f, -105.1871f },
                                { 5238.918f, 10288.17f, -105.4812f },
                                { 5236.173f, 10291.1f, -105.4812f },
                                { 5234.964f, 10294.44f, -104.6638f },
                                { 5234.964f, 10295.19f, -103.9138f },
                                { 5234.714f, 10295.44f, -103.6638f },
                                { 5234.464f, 10296.44f, -102.9138f },
                                { 5233.964f, 10298.44f, -102.1638f },
                                { 5233.326f, 10299.35f, -102.1892f }
                            };

                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_DarklostKrokulPathEnd, Path_DarklostKrokul, 15, false);
                        }, 3000);

                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                                l_Creature->AI()->AttackStart(l_Pl, true);
                        }, 6000);
                    }

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_DarklostKrokul, m_FirstWaveDarklostKrokulSecondSpawnpos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MoveJump(5223.2f, 10297.1f, -105.568f, 10.0f, 10.0f, 0.0f);
                        }, 2000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            G3D::Vector3 const Path_DarklostKrokul[11] =
                            {
                                { 5225.32f, 10297.74f, -104.9582f },
                                { 5227.32f, 10297.74f, -104.7082f },
                                { 5228.82f, 10298.74f, -103.9582f },
                                { 5229.57f, 10298.49f, -103.2082f },
                                { 5230.82f, 10299.24f, -102.4582f },
                                { 5233.57f, 10300.99f, -102.2082f },
                                { 5236.07f, 10302.99f, -101.4582f },
                                { 5236.57f, 10303.49f, -101.9582f },
                                { 5238.82f, 10305.49f, -102.2082f },
                                { 5239.82f, 10306.74f, -103.4582f },
                                { 5240.44f, 10308.37f, -104.3484f }
                            };

                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_DarklostKrokulPathEnd, Path_DarklostKrokul, 11, false);
                        }, 5000);

                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                                l_Creature->AI()->AttackStart(l_Pl, true);
                        }, 6000);
                    }

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_DarklostKrokul, m_FirstWaveDarklostKrokulThirdSpawnpos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->SetAIAnimKitId(13050);
                        l_Creature->SetUInt32Value(UNIT_FIELD_BYTES_1, 50331648);
                        l_Creature->SetPlayerHoverAnim(true);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SetPlayerHoverAnim(false);
                            l_Creature->SetAIAnimKitId(0);
                            l_Creature->SetUInt32Value(UNIT_FIELD_BYTES_1, 0);
                            l_Creature->GetMotionMaster()->MoveJump(5220.65f, 10303.1f, -103.388f, 10.0f, 10.0f, 0.0f);
                        }, 1000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            G3D::Vector3 const Path_DarklostKrokul[10] =
                            {
                                { 5222.192f, 10303.62f, -103.2918f },
                                { 5223.192f, 10303.87f, -102.7918f },
                                { 5225.692f, 10304.37f, -102.7918f },
                                { 5226.192f, 10304.37f, -102.7918f },
                                { 5227.942f, 10305.12f, -103.2918f },
                                { 5228.442f, 10304.62f, -103.0418f },
                                { 5230.192f, 10307.12f, -103.2918f },
                                { 5232.192f, 10309.37f, -103.5418f },
                                { 5233.442f, 10309.87f, -103.5418f },
                                { 5238.735f, 10311.13f, -104.1956f }
                            };

                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_DarklostKrokulPathEnd, Path_DarklostKrokul, 10, false);
                        }, 2000);

                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                                l_Creature->AI()->AttackStart(l_Pl, true);
                        }, 3000);
                    }

                    m_FirstWaveStarted = true;
                    break;
                }
                case ePoints::Point_SecondEscortPathEnd:
                {
                    uint64 l_PlayerGuid = m_SummonerGuid;

                    Talk(1, l_Player->GetGUID());
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 431);

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_DarklostKrokul, m_SecondWaveDarklostKrokulSpawnpos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SendPlaySpellVisualKit(82522, 0, 0);
                        }, 500);

                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                                l_Creature->AI()->AttackStart(l_Pl, true);
                        }, 1000);
                    }

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_Voidling, m_SecondWaveVoidlingFirstSpawnpos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SendPlaySpellVisualKit(82522, 0, 0);
                        }, 500);

                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                                l_Creature->AI()->AttackStart(l_Pl, true);
                        }, 1000);
                    }

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_Voidling, m_SecondWaveVoidlingSecondSpawnpos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SendPlaySpellVisualKit(82522, 0, 0);
                        }, 500);

                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                                l_Creature->AI()->AttackStart(l_Pl, true);
                        }, 1000);
                    }

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_Voidling, m_SecondWaveVoidlingThirdSpawnpos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SendPlaySpellVisualKit(82522, 0, 0);
                        }, 500);

                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                                l_Creature->AI()->AttackStart(l_Pl, true);
                        }, 1000);
                    }

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_Voidling, m_SecondWaveVoidlingFourthSpawnpos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SendPlaySpellVisualKit(82522, 0, 0);
                        }, 500);

                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                                l_Creature->AI()->AttackStart(l_Pl, true);
                        }, 1000);
                    }

                    m_SecondWaveStarted = true;
                    break;
                }
                case ePoints::Point_ThirdEscortPathEnd:
                {
                    uint64 l_PlayerGuid = m_SummonerGuid;

                    Talk(2, l_Player->GetGUID());
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 431);

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_VoidSiphoner, m_ThirdWaveVoidSiphonerSpawnpos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            l_Creature->SendPlaySpellVisualKit(82524, 0, 0);

                            if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                                l_Creature->AI()->AttackStart(l_Pl, true);
                        }, 500);
                    }

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_DarklostKrokul, m_ThirdWaveDarklostKrokulFirstSpawnpos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MoveJump(5298.26f, 10390.9f, -73.6273f, 10.0f, 10.0f, 0.0f);
                        }, 1000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MoveJump(5300.83f, 10398.7f, -78.1573f, 10.0f, 10.0f, 0.0f);
                        }, 3000);

                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                                l_Creature->AI()->AttackStart(l_Pl, true);
                        }, 4000);
                    }

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_DarklostKrokul, m_ThirdWaveDarklostKrokulSecondSpawnpos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->SetAIAnimKitId(13324);
                        l_Creature->SetUInt32Value(UNIT_FIELD_BYTES_1, 50331648);
                        l_Creature->SetPlayerHoverAnim(true);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SetPlayerHoverAnim(false);
                            l_Creature->SetAIAnimKitId(0);
                            l_Creature->SetUInt32Value(UNIT_FIELD_BYTES_1, 0);
                            l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_DarklostKrokulPathEnd, 5303.7f, 10393.5f, -72.0866f);
                        }, 3000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->PlayOneShotAnimKitId(1402);
                            l_Creature->GetMotionMaster()->MoveJump(5303.32f, 10396.7f, -77.6526f, 10.0f, 10.0f, 0.0f);
                        }, 4000);

                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                                l_Creature->AI()->AttackStart(l_Pl, true);
                        }, 5000);
                    }

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_DarklostKrokul, m_ThirdWaveDarklostKrokulThirdSpawnpos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->SetAIAnimKitId(13324);
                        l_Creature->SetUInt32Value(UNIT_FIELD_BYTES_1, 50331648);
                        l_Creature->SetPlayerHoverAnim(true);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->SetPlayerHoverAnim(false);
                            l_Creature->SetAIAnimKitId(0);
                            l_Creature->SetUInt32Value(UNIT_FIELD_BYTES_1, 0);
                            l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_DarklostKrokulPathEnd, 5312.55f, 10406.4f, -69.7806f);
                        }, 2000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->PlayOneShotAnimKitId(1402);
                            l_Creature->GetMotionMaster()->MoveJump(5311.44f, 10403.7f, -77.1993f, 10.0f, 10.0f, 0.0f);
                        }, 3000);

                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                                l_Creature->AI()->AttackStart(l_Pl, true);
                        }, 4000);
                    }

                    if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_DarklostKrokul, m_ThirdWaveDarklostKrokulFourthSpawnpos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 10000, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MoveJump(5311.66f, 10413.9f, -72.438f, 10.0f, 10.0f, 0.0f);
                        }, 4000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MoveJump(5307.69f, 10408.5f, -77.2146f, 10.0f, 10.0f, 0.0f);
                        }, 8000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_DarklostKrokulPathEnd, 5303.46f, 10405.92f, -77.95328f);
                        }, 9000);

                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                                l_Creature->AI()->AttackStart(l_Pl, true);
                        }, 10000);
                    }

                    m_ThirdWaveStarted = true;
                    break;
                }
                case ePoints::Point_FourthEscortPathEnd:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_TargetBunny, m_TargetBunnySpawnPos, TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 15000, 0, l_Player->GetGUID()))
                    {
                        DoCast(l_Creature, eSpells::Spell_VoidBeam, true);
                    }

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ArkhaanMoveIntoVoid, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_EscortArkhaanToIsolon);
                    m_Events.ScheduleEvent(eEvents::Event_PingAlleria, 3000);
                    m_Events.ScheduleEvent(eEvents::Event_OpenportalKillcredit, 9000);
                    m_Events.ScheduleEvent(eEvents::Event_VisualKit, 10000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !l_Player->IsInWorld() || !l_Player->HasAura(eSpells::Spell_ArkhaanSummon) ||
                    (l_Player->GetAreaId() != 9198 && l_Player->GetAreaId() != 8706) || l_Player->isDead())
                {
                    for (auto l_Itr : m_WaveCreatureGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->DespawnOrUnsummon();
                        }
                    }

                    me->DespawnOrUnsummon();
                    return;
                }

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartFirstEscortPath:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_FirstEscortPath, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_FirstEscortPathEnd, Path_ArkhaanEscortFirst, 16, false);
                    break;
                }
                case eEvents::Event_StartSecondEscortPath:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_SecondEscortPath, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_SecondEscortPathEnd, Path_ArkhaanEscortSecond, 21, false);
                    break;
                }
                case eEvents::Event_StartThirdEscortPath:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ThirdEscortPath, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_ThirdEscortPathEnd, Path_ArkhaanEscortThird, 10, false);
                    break;
                }
                case eEvents::Event_StartFourthEscortPath:
                {
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_FourthEscortPathEnd, Path_ArkhaanEscortFourth, 7, false);
                    break;
                }
                case eEvents::Event_OpenportalKillcredit:
                {
                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_PortalOpened);
                    break;
                }
                case eEvents::Event_PingAlleria:
                {
                    l_Player->CastSpell(l_Player, eSpells::Spell_PingAlleria, true);
                    break;
                }
                case eEvents::Event_VisualKit:
                {
                    me->SendPlaySpellVisualKit(82528, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_arkhaan_121556AI(p_Creature);
        }
};

/// Alleria Windrunner - 121559
class npc_alleria_windrunner_121559 : public CreatureScript
{
    public:
        npc_alleria_windrunner_121559() : CreatureScript("npc_alleria_windrunner_121559") { }

        struct npc_alleria_windrunner_121559AI : public ScriptedAI
        {
            npc_alleria_windrunner_121559AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_AlleriaSummon = 242718,
                Spell_Shoot = 243386,
                Spell_ShadowFlurry = 243389,
                Spell_VoidArrow = 243388,
                Spell_PingAlleria = 242829
            };

            enum eEvents
            {
                Event_CastShoot = 1,
                Event_CastShadowFlurry = 2,
                Event_CastVoidArrow = 3,
                Event_ConversationEndKillcredit = 4
            };

            enum ePoints
            {
                Point_MoveToArkhaanEnd = 1
            };

            enum eKillcredits
            {
                Killcredit_AlleriasConversationEnd = 2936361
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;
            bool FollowComplete = false;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
                me->AddPlayerInPersonnalVisibilityList(p_Summoner->GetGUID());
            }

            void EnterCombat(Unit* victim) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastShoot, 1000);
                m_Events.ScheduleEvent(eEvents::Event_CastShadowFlurry, urand(10000, 15000));
                m_Events.ScheduleEvent(eEvents::Event_CastVoidArrow, urand(10000, 15000));
            }

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = p_Caster->ToPlayer())
                {
                    if (p_Spell->Id == eSpells::Spell_PingAlleria && l_Player->GetGUID() == m_SummonerGuid)
                    {
                        FollowComplete = true;
                        me->GetMotionMaster()->Clear();
                        me->GetMotionMaster()->MoveIdle();
                        me->GetMotionMaster()->MovePoint(ePoints::Point_MoveToArkhaanEnd, 5329.182f, 10394.55f, -76.74453f);
                    }
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_PointId)
                {
                case ePoints::Point_MoveToArkhaanEnd:
                {
                    me->SetFacingTo(5.410521f);
                    m_Events.ScheduleEvent(eEvents::Event_ConversationEndKillcredit, 15000);
                    break;
                }
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !l_Player->IsInWorld() || !l_Player->HasAura(eSpells::Spell_AlleriaSummon) ||
                    (l_Player->GetAreaId() != 9198 && l_Player->GetAreaId() != 8706) || l_Player->isDead())
                {
                    me->DespawnOrUnsummon();
                    return;
                }

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                m_Events.Update(p_Diff);

                if (l_Player->isInCombat() && l_Player->getVictim())
                {
                    me->Attack(l_Player->getVictim(), false);
                }

                if (!l_Player->isInCombat() && !FollowComplete)
                {
                    me->CombatStop(true);
                    m_Events.Reset();
                    me->GetMotionMaster()->MoveFollow(l_Player, 3.0f, 90.0f);
                    return;
                }

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastShoot:
                {
                    DoCastVictim(eSpells::Spell_Shoot);
                    m_Events.ScheduleEvent(eEvents::Event_CastShoot, urand(1000, 2000));
                    break;
                }
                case eEvents::Event_CastShadowFlurry:
                {
                    DoCast(eSpells::Spell_ShadowFlurry);
                    m_Events.ScheduleEvent(eEvents::Event_CastShadowFlurry, urand(15000, 30000));
                    break;
                }
                case eEvents::Event_CastVoidArrow:
                {
                    DoCastVictim(eSpells::Spell_VoidArrow);
                    m_Events.ScheduleEvent(eEvents::Event_CastVoidArrow, urand(15000, 20000));
                    break;
                }
                case eEvents::Event_ConversationEndKillcredit:
                {
                    l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_AlleriasConversationEnd);
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_alleria_windrunner_121559AI(p_Creature);
        }
};

/// Arkhaan - 121546
class npc_arkhaan_121546 : public CreatureScript
{
    public:
        npc_arkhaan_121546() : CreatureScript("npc_arkhaan_121546") { }

        struct npc_arkhaan_121546AI : public ScriptedAI
        {
            npc_arkhaan_121546AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eEvents
            {
                Event_NezharStartCast = 1,
                Event_CurseEnd = 2,
                Event_SayFirstLine = 3,
                Event_DespawnNezhar = 4,
                Event_SetFacing = 5,
                Event_AttackPlayer = 6,
                Event_CastDarkPalmStrike = 7,
                Event_CastDarkBolt = 8,
                Event_Transform = 9
            };

            enum eNpcs
            {
                Npc_Alleria = 121960,
                Npc_Nezhar = 121590,
                Npc_VoidTear = 121595
            };

            enum eConversations
            {
                Conv_CursePray = 5155,
                Conv_AggroConversation = 5156,
                Conv_EightyPctConversation = 5157,
                Conv_FiftyFifePctConversation = 5159,
                Conv_TwentyFivePctConversation = 5158
            };

            enum eSpells
            {
                Spell_VoidInfusion = 242848,
                Spell_DarkPalmStrike = 252414,
                Spell_DarkBolt = 252438,
                Spell_VoidCrazed = 242853
            };

            enum eActions
            {
                Action_AlleriaSayFirstLine = 1,
                Action_AlleriaSaySecondLine = 2
            };

            enum eQuests
            {
                Quest_ArkhaansPeril = 47184
            };

            enum eKillcredits
            {
                Killcredit_DealWithArkhaan = 121546
            };

            ObjectGuid m_SummonerGuid;
            ObjectGuid m_AlleriaGuid;
            ObjectGuid m_NezharGuid;
            EventMap m_Events;
            Position const m_AlleriaSpawnPos = { 5329.182f, 10394.55f, -76.66119f, 5.273507f };
            Position const m_NezharSpawnPos = { 5354.174f, 10375.26f, -71.94821f, 2.634552f };
            Position const m_VoidTearSpawnPos = { 5333.305f, 10387.63f, -76.68386f, 2.443122f };
            bool m_CurseEventStart = false;
            bool m_EightyPctConversationComplete = false;
            bool m_FiftyFifePctConversationComplete = false;
            bool m_TwentyFivePctConversationComplete = false;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->SetAIAnimKitId(9729);
                m_SummonerGuid = p_Summoner->GetGUID();

                if (Creature* l_Creature = p_Summoner->SummonCreature(eNpcs::Npc_Alleria, m_AlleriaSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Summoner->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_AlleriaSayFirstLine);
                    m_AlleriaGuid = l_Creature->GetGUID();
                }

                if (Creature* l_Creature = p_Summoner->SummonCreature(eNpcs::Npc_Nezhar, m_NezharSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Summoner->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_AlleriaSayFirstLine);
                    m_NezharGuid = l_Creature->GetGUID();
                }

                if (Creature* l_Creature = p_Summoner->SummonCreature(eNpcs::Npc_VoidTear, m_VoidTearSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Summoner->GetGUID()))
                {
                    l_Creature->AddDelayedEvent([l_Creature]() -> void
                    {
                        l_Creature->SetAIAnimKitId(13326);
                        l_Creature->DespawnOrUnsummon(2000);
                    }, 2000);
                }
            }

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(l_Player) < 10.0f && !m_CurseEventStart)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_CursePray, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_CurseEventStart = true;
                    m_Events.ScheduleEvent(eEvents::Event_NezharStartCast, 5000);
                }
            }

            void EnterCombat(Unit* victim) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastDarkPalmStrike, 4000);
                m_Events.ScheduleEvent(eEvents::Event_CastDarkBolt, urand(6000, 10000));
            }

            void DamageTaken(Unit* attacker, uint32& damage, SpellInfo const* /*p_SpellInfo*/) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                if (me->GetHealthPct() <= 80 && !m_EightyPctConversationComplete)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_EightyPctConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_EightyPctConversationComplete = true;
                }

                if (me->GetHealthPct() <= 55 && !m_FiftyFifePctConversationComplete)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_FiftyFifePctConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->SetControlled(true, UNIT_STATE_ROOT);
                    me->SetAIAnimKitId(644);
                    m_Events.Reset();
                    m_Events.ScheduleEvent(eEvents::Event_Transform, 5000);
                    m_FiftyFifePctConversationComplete = true;
                }

                if (me->GetHealthPct() <= 25 && !m_TwentyFivePctConversationComplete)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TwentyFivePctConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_TwentyFivePctConversationComplete = true;
                }
            }

            void JustDied(Unit* /*killer*/) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AlleriaGuid))
                {
                    l_Creature->AI()->DoAction(eActions::Action_AlleriaSaySecondLine);
                }

                l_Player->KilledMonsterCredit(eKillcredits::Killcredit_DealWithArkhaan);
                Talk(2, l_Player->GetGUID());
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !l_Player->IsInWorld() || !l_Player->HasQuest(eQuests::Quest_ArkhaansPeril) || l_Player->isDead())
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AlleriaGuid))
                    {
                        l_Creature->DespawnOrUnsummon();
                    }

                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_NezharGuid))
                    {
                        l_Creature->DespawnOrUnsummon();
                    }

                    me->DespawnOrUnsummon();
                    return;
                }

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_NezharStartCast:
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_NezharGuid))
                    {
                        l_Creature->CastSpell(me, eSpells::Spell_VoidInfusion, true);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_CurseEnd, 5000);
                    break;
                }
                case eEvents::Event_CurseEnd:
                {
                    me->RemoveAllAuras();
                    me->SetAIAnimKitId(0);
                    m_Events.ScheduleEvent(eEvents::Event_SayFirstLine, 3000);
                    break;
                }
                case eEvents::Event_SayFirstLine:
                {
                    Talk(0, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_DespawnNezhar, 1000);
                    break;
                }
                case eEvents::Event_DespawnNezhar:
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_NezharGuid))
                    {
                        l_Creature->SendPlaySpellVisualKit(70360, 0, 0);
                        l_Creature->DespawnOrUnsummon();
                    }

                    m_Events.ScheduleEvent(eEvents::Event_SetFacing, 2000);
                    break;
                }
                case eEvents::Event_SetFacing:
                {
                    me->SetFacingTo(2.635447f);
                    Talk(1, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_AttackPlayer, 5000);
                    break;
                }
                case eEvents::Event_AttackPlayer:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AggroConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_PC);
                    AttackStart(l_Player, true);

                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AlleriaGuid))
                    {
                        l_Creature->AI()->AttackStart(me, false);
                    }

                    break;
                }
                case eEvents::Event_CastDarkPalmStrike:
                {
                    DoCast(eSpells::Spell_DarkPalmStrike);
                    m_Events.ScheduleEvent(eEvents::Event_CastDarkPalmStrike, urand(10000, 15000));
                    break;
                }
                case eEvents::Event_CastDarkBolt:
                {
                    DoCastVictim(eSpells::Spell_DarkBolt);
                    m_Events.ScheduleEvent(eEvents::Event_CastDarkBolt, urand(5000, 15000));
                    break;
                }
                case eEvents::Event_Transform:
                {
                    me->SetAIAnimKitId(0);
                    DoCast(eSpells::Spell_VoidCrazed, true);
                    me->SendPlaySpellVisualKit(52904, 0, 0);
                    me->SetControlled(false, UNIT_STATE_ROOT);
                    m_Events.ScheduleEvent(eEvents::Event_CastDarkPalmStrike, 4000);
                    m_Events.ScheduleEvent(eEvents::Event_CastDarkBolt, urand(6000, 10000));
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_arkhaan_121546AI(p_Creature);
        }
};

/// Alleria Windrunner - 121960
class npc_alleria_windrunner_121960 : public CreatureScript
{
    public:
        npc_alleria_windrunner_121960() : CreatureScript("npc_alleria_windrunner_121960") { }

        struct npc_alleria_windrunner_121960AI : public ScriptedAI
        {
            npc_alleria_windrunner_121960AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_ThreatReduction = 99203,
                Spell_Shoot = 243386,
                Spell_VoidArrow = 243388,
                Spell_ShadowFlurry = 243389,
                Spell_CrossingOver = 245213
            };

            enum eEvents
            {
                Event_PlayVisual = 1,
                Event_CastShoot = 2,
                Event_CastVoidArrow = 3,
                Event_SaySecondLine = 4,
                Event_PlayerLeaveVoid = 5
            };

            enum eActions
            {
                Action_AlleriaSayFirstLine = 1,
                Action_AlleriaSaySecondLine = 2
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                DoCast(eSpells::Spell_ThreatReduction, true);
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void EnterCombat(Unit* victim) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastShoot, 1000);
                m_Events.ScheduleEvent(eEvents::Event_CastVoidArrow, urand(5000, 10000));
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_AlleriaSayFirstLine:
                {
                    m_Events.ScheduleEvent(eEvents::Event_PlayVisual, 2000);
                    break;
                }
                case eActions::Action_AlleriaSaySecondLine:
                {
                    me->CastStop();
                    m_Events.Reset();
                    m_Events.ScheduleEvent(eEvents::Event_SaySecondLine, 3000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_PlayVisual:
                {
                    me->SendPlaySpellVisualKit(84076, 0, 0);
                    Talk(0, l_Player->GetGUID());
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 376);
                    break;
                }
                case eEvents::Event_CastShoot:
                {
                    DoCastVictim(eSpells::Spell_Shoot);
                    m_Events.ScheduleEvent(eEvents::Event_CastShoot, urand(1000, 2000));
                    break;
                }
                case eEvents::Event_CastVoidArrow:
                {
                    DoCastVictim(eSpells::Spell_VoidArrow);
                    m_Events.ScheduleEvent(eEvents::Event_CastVoidArrow, urand(20000, 30000));
                    break;
                }
                case eEvents::Event_SaySecondLine:
                {
                    Talk(1, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_PlayerLeaveVoid, 7000);
                    break;
                }
                case eEvents::Event_PlayerLeaveVoid:
                {
                    Talk(2, l_Player->GetGUID());
                    l_Player->CastSpell(l_Player, eSpells::Spell_CrossingOver, true);
                    me->DespawnOrUnsummon(3000);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_alleria_windrunner_121960AI(p_Creature);
        }
};

/// Locus-Walker - 121597
class npc_locus_walker_121597 : public CreatureScript
{
    public:
        npc_locus_walker_121597() : CreatureScript("npc_locus_walker_121597") { }

        struct npc_locus_walker_121597AI : public ScriptedAI
        {
            npc_locus_walker_121597AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            G3D::Vector3 const Path_LocusIntoVoidFirst[27] =
            {
                { 5514.139f, 10314.67f, -99.36885f },
                { 5517.389f, 10312.17f, -99.61885f },
                { 5519.389f, 10309.17f, -99.61885f },
                { 5522.964f, 10303.19f, -100.4529f },
                { 5533.009f, 10292.92f, -100.8101f },
                { 5538.79f, 10290.93f, -100.4998f },
                { 5546.532f, 10293.37f, -100.3481f },
                { 5551.126f, 10295.18f, -99.67084f },
                { 5556.634f, 10297.09f, -98.95593f },
                { 5558.85f, 10298.51f, -97.76929f },
                { 5560.1f, 10299.01f, -96.76929f },
                { 5561.85f, 10300.01f, -95.26929f },
                { 5562.6f, 10300.51f, -94.76929f },
                { 5568.335f, 10303.25f, -94.66962f },
                { 5572.437f, 10305.15f, -94.00362f },
                { 5575.408f, 10307.48f, -93.79981f },
                { 5578.961f, 10309.09f, -93.4182f },
                { 5582.461f, 10309.84f, -93.4182f },
                { 5586.461f, 10312.84f, -92.6682f },
                { 5588.187f, 10314.35f, -92.55364f },
                { 5590.946f, 10317.13f, -91.50364f },
                { 5591.696f, 10318.13f, -91.50364f },
                { 5593.696f, 10320.88f, -90.50364f },
                { 5596.196f, 10322.38f, -90.00364f },
                { 5597.608f, 10323.2f, -89.92982f },
                { 5599.753f, 10324.78f, -87.77503f },
                { 5602.174f, 10326.08f, -86.88551f }
            };

            G3D::Vector3 const Path_LocusIntoVoidSecond[34] =
            {
                { 5605.782f, 10328.6f, -85.50899f },
                { 5610.032f, 10331.35f, -85.75899f },
                { 5612.282f, 10333.1f, -85.25899f },
                { 5615.032f, 10335.6f, -84.00899f },
                { 5617.032f, 10337.85f, -83.25899f },
                { 5619.032f, 10340.1f, -82.50899f },
                { 5622.391f, 10343.61f, -81.33395f },
                { 5625.411f, 10348.03f, -79.54733f },
                { 5627.228f, 10350.27f, -78.20538f },
                { 5630.288f, 10353.85f, -76.77786f },
                { 5634.063f, 10357.68f, -75.04452f },
                { 5636.063f, 10359.68f, -74.29452f },
                { 5640.063f, 10362.93f, -72.54452f },
                { 5644.227f, 10365.87f, -71.04465f },
                { 5647.3f, 10366.06f, -70.06074f },
                { 5650.3f, 10366.06f, -69.31074f },
                { 5652.3f, 10366.31f, -68.56074f },
                { 5654.3f, 10366.31f, -67.81074f },
                { 5657.072f, 10366.41f, -67.27903f },
                { 5659.193f, 10366.43f, -66.72117f },
                { 5661.193f, 10366.18f, -65.97117f },
                { 5664.943f, 10365.93f, -64.72117f },
                { 5667.047f, 10365.92f, -64.3014f },
                { 5669.014f, 10365.64f, -63.21181f },
                { 5671.014f, 10365.64f, -62.46181f },
                { 5673.014f, 10365.39f, -61.46181f },
                { 5675.316f, 10364.9f, -60.79957f },
                { 5677.63f, 10365.07f, -59.72042f },
                { 5679.63f, 10365.07f, -58.97042f },
                { 5681.63f, 10365.32f, -58.22042f },
                { 5683.63f, 10365.32f, -57.72042f },
                { 5687.226f, 10366.54f, -56.66224f },
                { 5690.182f, 10369.6f, -55.80138f },
                { 5693.904f, 10377.63f, -53.45838f }
            };

            G3D::Vector3 const Path_LocusIntoVoidThird[25] =
            {
                { 5699.801f, 10383.28f, -51.76153f },
                { 5701.051f, 10384.78f, -51.01153f },
                { 5702.301f, 10387.03f, -50.01153f },
                { 5703.051f, 10390.03f, -49.01153f },
                { 5703.96f, 10392.01f, -48.56819f },
                { 5705.46f, 10394.26f, -47.56819f },
                { 5706.71f, 10395.76f, -46.81819f },
                { 5713.182f, 10398.86f, -45.42284f },
                { 5716.932f, 10398.86f, -44.67284f },
                { 5723.567f, 10392.62f, -44.98115f },
                { 5727.067f, 10391.37f, -44.73115f },
                { 5727.817f, 10391.87f, -44.23115f },
                { 5730.317f, 10393.62f, -44.23115f },
                { 5731.657f, 10394.21f, -43.79166f },
                { 5733.157f, 10395.21f, -43.54166f },
                { 5735.907f, 10395.46f, -43.04166f },
                { 5738.657f, 10395.71f, -42.54166f },
                { 5740.654f, 10398.22f, -41.62902f },
                { 5741.654f, 10399.72f, -41.37902f },
                { 5743.154f, 10403.22f, -39.87902f },
                { 5744.154f, 10406.22f, -38.87902f },
                { 5749.176f, 10413.42f, -37.60112f },
                { 5750.426f, 10414.92f, -36.60112f },
                { 5754.47f, 10414.04f, -35.2977f },
                { 5755.422f, 10412.37f, -35.49847f }
            };

            G3D::Vector3 const Path_LocusIntoVoidFourth[38] =
            {
                { 5756.979f, 10425.49f, -33.81825f },
                { 5761.652f, 10428.6f, -33.30537f },
                { 5764.902f, 10430.1f, -33.30537f },
                { 5767.652f, 10429.6f, -33.30537f },
                { 5774.333f, 10423.76f, -34.15215f },
                { 5775.833f, 10422.26f, -34.40215f },
                { 5784.292f, 10418.09f, -35.51328f },
                { 5783.536f, 10423.02f, -34.78846f },
                { 5781.536f, 10425.77f, -34.53846f },
                { 5778.036f, 10429.27f, -33.78846f },
                { 5775.205f, 10432.38f, -33.20971f },
                { 5773.955f, 10434.63f, -32.70971f },
                { 5772.455f, 10437.88f, -32.20971f },
                { 5769.406f, 10443.99f, -30.08074f },
                { 5767.906f, 10447.49f, -29.08074f },
                { 5766.656f, 10450.49f, -27.58074f },
                { 5766.12f, 10455.02f, -25.52032f },
                { 5766.87f, 10458.77f, -23.52032f },
                { 5767.62f, 10462.77f, -22.27032f },
                { 5768.57f, 10465.33f, -21.45266f },
                { 5770.32f, 10469.83f, -20.20266f },
                { 5772.32f, 10473.83f, -19.45266f },
                { 5774.416f, 10477.07f, -18.75925f },
                { 5776.416f, 10479.07f, -18.00925f },
                { 5778.666f, 10480.82f, -17.50925f },
                { 5781.893f, 10483.35f, -16.3228f },
                { 5784.393f, 10484.6f, -15.8228f },
                { 5786.643f, 10486.1f, -15.0728f },
                { 5789.393f, 10487.6f, -14.5728f },
                { 5794.251f, 10491.4f, -13.22443f },
                { 5796.501f, 10492.9f, -12.47443f },
                { 5799.001f, 10494.9f, -11.72443f },
                { 5800.501f, 10496.15f, -11.22443f },
                { 5801.78f, 10497.23f, -10.69521f },
                { 5804.78f, 10499.48f, -9.945213f },
                { 5807.28f, 10501.48f, -9.445213f },
                { 5809.53f, 10503.23f, -8.695213f },
                { 5811.729f, 10505.55f, -8.119478f }
            };

            G3D::Vector3 const Path_LocusPathToBeacon[11] =
            {
                { 5597.557f, 10615.29f, 5.808292f },
                { 5593.25f, 10609.9f, 5.524477f },
                { 5587.866f, 10603.77f, 5.524477f },
                { 5581.018f, 10595.96f, 5.509833f },
                { 5570.635f, 10586.25f, 5.509833f },
                { 5568.785f, 10583.42f, 5.653469f },
                { 5567.035f, 10580.42f, 5.653469f },
                { 5564.265f, 10578.57f, 5.797105f },
                { 5560.874f, 10575.36f, 7.658865f },
                { 5555.642f, 10570.18f, 7.927637f },
                { 5553.867f, 10568.56f, 7.818405f }
            };

            enum eActions
            {
                Action_LocusFirstMoveIntoVoid = 38,
                Action_LocusSecondMoveIntoVoid = 40,
                Action_LocusThirdMoveIntoVoid = 42,
                Action_LocusFourthMoveIntoVoid = 44,
                Action_LocusBeforeFight = 45,
                Action_AlleriaBeforeFight = 50,
                Action_LocusPathToBeacon = 52
            };

            enum ePoints
            {
                Point_LocusFirstPathIntoVoidEnd = 1,
                Point_LocusSecondPathIntoVoidEnd = 2,
                Point_LocusThirdPathIntoVoidEnd = 3,
                Point_LocusFourthPathIntoVoidEnd = 4,
                Point_MoveToPortalEnd = 5,
                Point_PathToBeaconEnd = 6
            };

            enum eEvents
            {
                Event_StartQuestAVesselMadeReadyAcceptedConversation = 1,
                Event_SummonPortal = 2,
                Event_SetFacinToPortal = 3,
                Event_KillcreditPortalVisible = 4,
                Event_MoveToPortal = 5,
                Event_PlayVisualTeleport = 6,
                Event_StartPathToBeacon = 7,
                Event_SaySecondLine = 8,
                Event_VisualKit = 9
            };

            enum eSpells
            {
                Spell_VoidRift = 243062
            };

            enum eQuests
            {
                Quest_AVesselMadeReady = 47219
            };

            enum eKillcredits
            {
                Killcredit_VoidTearSummoned = 2938850
            };

            enum eNpcs
            {
                Npc_Alleria = 121230,
                Npc_VoidTear = 128882
            };

            enum eConversations
            {
                Conv_QuestAVesselMadeReadyAccepted = 5055
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;
            Position const m_AlleriaNearPortalSpawnPos = { 5808.708f, 10507.25f, -8.185278f, 5.742593f };
            Position const m_VoidTearSpawnPos = { 5818.197f, 10504.89f, -7.531621f, 2.881907f };

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_LocusFirstMoveIntoVoid:
                {
                    DoCast(eSpells::Spell_VoidRift, true);
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_LocusFirstPathIntoVoidEnd, Path_LocusIntoVoidFirst, 27, false);
                    break;
                }
                case eActions::Action_LocusSecondMoveIntoVoid:
                {
                    DoCast(eSpells::Spell_VoidRift, true);
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_LocusSecondPathIntoVoidEnd, Path_LocusIntoVoidSecond, 34, false);
                    break;
                }
                case eActions::Action_LocusThirdMoveIntoVoid:
                {
                    DoCast(eSpells::Spell_VoidRift, true);
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_LocusThirdPathIntoVoidEnd, Path_LocusIntoVoidThird, 25, false);
                    break;
                }
                case eActions::Action_LocusFourthMoveIntoVoid:
                {
                    DoCast(eSpells::Spell_VoidRift, true);
                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_LocusFourthPathIntoVoidEnd, Path_LocusIntoVoidFourth, 38, false);
                    break;
                }
                case eActions::Action_LocusBeforeFight:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Alleria, m_AlleriaNearPortalSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AlleriaBeforeFight);
                    }

                    me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 2);
                    m_Events.ScheduleEvent(eEvents::Event_StartQuestAVesselMadeReadyAcceptedConversation, 2000);
                    m_Events.ScheduleEvent(eEvents::Event_SummonPortal, 12500);
                    m_Events.ScheduleEvent(eEvents::Event_SetFacinToPortal, 13000);
                    m_Events.ScheduleEvent(eEvents::Event_KillcreditPortalVisible, 15000);
                    m_Events.ScheduleEvent(eEvents::Event_MoveToPortal, 24000);
                    break;
                }
                case eActions::Action_LocusPathToBeacon:
                {
                    m_Events.ScheduleEvent(eEvents::Event_StartPathToBeacon, 8000);
                    break;
                }
                default:
                    break;
                }
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_AVesselMadeReady:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_LocusBeforeFight);
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_PointId)
                {
                case ePoints::Point_LocusFirstPathIntoVoidEnd:
                {
                    me->SetFacingTo(1.22173f);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 27);
                    break;
                }
                case ePoints::Point_LocusSecondPathIntoVoidEnd:
                {
                    me->SetFacingTo(0.9424778f);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 27);
                    break;
                }
                case ePoints::Point_LocusThirdPathIntoVoidEnd:
                {
                    me->SetFacingTo(2.078787f);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 27);
                    break;
                }
                case ePoints::Point_LocusFourthPathIntoVoidEnd:
                {
                    me->SetFacingTo(2.659904f);
                    break;
                }
                case ePoints::Point_MoveToPortalEnd:
                {
                    m_Events.ScheduleEvent(eEvents::Event_PlayVisualTeleport, 2000);
                    break;
                }
                case ePoints::Point_PathToBeaconEnd:
                {
                    me->SetFacingTo(2.478368f);
                    m_Events.ScheduleEvent(eEvents::Event_SaySecondLine, 10000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_StartQuestAVesselMadeReadyAcceptedConversation:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestAVesselMadeReadyAccepted, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eEvents::Event_SummonPortal:
                {
                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_VoidTear, m_VoidTearSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_SPELLCLICK);
                        l_Creature->SetAIAnimKitId(12994);
                        l_Creature->DespawnOrUnsummon(3000);
                    }

                    break;
                }
                case eEvents::Event_SetFacinToPortal:
                {
                    me->SetFacingTo(6.178465f);
                    break;
                }
                case eEvents::Event_KillcreditPortalVisible:
                {
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_VoidTearSummoned);
                    break;
                }
                case eEvents::Event_MoveToPortal:
                {
                    me->SetWalk(true);
                    me->GetMotionMaster()->MovePoint(ePoints::Point_MoveToPortalEnd, 5816.26f, 10505.2f, -7.819674f);
                    break;
                }
                case eEvents::Event_PlayVisualTeleport:
                {
                    me->HandleEmoteCommand(EMOTE_ONESHOT_SPELL_CAST_OMNI);
                    me->SendPlaySpellVisualKit(82528, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                case eEvents::Event_StartPathToBeacon:
                {
                    me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_PathToBeaconEnd, Path_LocusPathToBeacon, 11, true);
                    break;
                }
                case eEvents::Event_SaySecondLine:
                {
                    Talk(1, l_Player->GetGUID());
                    m_Events.ScheduleEvent(eEvents::Event_PlayVisualTeleport, 5000);
                    break;
                }
                case eEvents::Event_VisualKit:
                {
                    me->SendPlaySpellVisualKit(82528, 0, 0);
                    me->DespawnOrUnsummon(0);
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_locus_walker_121597AI(p_Creature);
        }
};

/// Void Harvester - 121676
class npc_void_harvester_121676 : public CreatureScript
{
    public:
        npc_void_harvester_121676() : CreatureScript("npc_void_harvester_121676") { }

        struct npc_void_harvester_121676AI : public ScriptedAI
        {
            npc_void_harvester_121676AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_DispelAction = 245455
            };

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = p_Caster->ToPlayer())
                {
                    if (p_Spell->Id == eSpells::Spell_DispelAction)
                    {
                        me->AddToHideList(l_Player->GetGUID(), 360000);
                        me->DestroyForPlayer(l_Player);

                        if (Creature* l_Creature = l_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 360000, 0, l_Player->GetGUID()))
                        {
                            l_Creature->SetDisplayId(78937);
                            l_Creature->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_SPELLCLICK);
                        }
                    }
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_void_harvester_121676AI(p_Creature);
        }
};

/// Alleria Windrunner - 121773
class npc_alleria_windrunner_121773 : public CreatureScript
{
    public:
        npc_alleria_windrunner_121773() : CreatureScript("npc_alleria_windrunner_121773") { }

        struct npc_alleria_windrunner_121773AI : public ScriptedAI
        {
            npc_alleria_windrunner_121773AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eActions
            {
                Action_AlleriaFightWIthNhal = 1,
                Action_LocusMoveToEventPos = 2,
                Action_NhalRise = 3,
                Action_AlleriaFree = 4,
                Action_AlleriaEndEvent = 5,
                Action_LocusStartEndEvent = 6
            };

            enum eNpcs
            {
                Npc_Locus = 121772,
                Npc_AbyssCaller = 121761,
                Npc_Nhal = 121663
            };

            enum eSpells
            {
                Spell_VoidConsumption = 250790,
                Spell_AlleriaBreaksFree = 250791,
                Spell_WindrunnersResolve = 250792
            };

            enum ePoints
            {
                Point_MoveToEventPosEnd = 1
            };

            enum eEvents
            {
                Event_NhalDefeatedConversation = 1,
                Event_PlayVisualTeleport = 2
            };

            enum eConversations
            {
                Conv_NhalRised = 5751,
                Conv_NhalDefeated = 5196
            };

            enum eQuests
            {
                Quest_AVesselMadeReady = 47219
            };

            std::array<Position, 3> m_AbyssalsSpawnPos =
            { {
                { 5626.692f, 10672.92f, 5.384493f, 0.2562142f },
                { 5665.643f, 10681.81f, 5.509071f, 3.388091f },
                { 5649.143f, 10657.57f, 5.05454f, 1.756904f }
            } };

            std::vector<ObjectGuid> m_EventNpcGuids;
            ObjectGuid m_SummonerGuid;
            ObjectGuid m_LocusGuid;
            ObjectGuid m_NhalGuid;
            EventMap m_Events;
            Position const m_LocusSpawnPos = { 5649.68f, 10625.32f, 5.861607f, 1.851328f };
            Position const m_NhalSpawnPos = { 5645.054f, 10678.33f, 4.89122f, 4.825548f };
            uint8 m_AbyssalsDied = 0;


            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->SetUInt32Value(UNIT_FIELD_BYTES_2, 2);
                me->SetReactState(ReactStates::REACT_PASSIVE);
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_AlleriaFightWIthNhal:
                {
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 376);

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Nhal, m_NhalSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        l_Creature->AI()->SetGUID(me->GetGUID());
                        m_NhalGuid = l_Creature->GetGUID();
                        m_EventNpcGuids.push_back(l_Creature->GetGUID());
                    }

                    if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Locus, m_LocusSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                    {
                        m_LocusGuid = l_Creature->GetGUID();
                        m_EventNpcGuids.push_back(l_Creature->GetGUID());
                    }

                    for (auto l_Itr : m_AbyssalsSpawnPos)
                    {
                        if (Creature* l_Creature = me->SummonCreature(eNpcs::Npc_AbyssCaller, l_Itr, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                        {
                            l_Creature->SetGuidValue(UNIT_FIELD_DEMON_CREATOR, l_Player->GetGUID());
                            l_Player->UpdateObjectVisibility();

                            if (Creature* l_Nhal = ObjectAccessor::GetCreature(*me, m_NhalGuid))
                            {
                                l_Creature->CastSpell(l_Nhal, eSpells::Spell_VoidConsumption, true);
                                m_EventNpcGuids.push_back(l_Creature->GetGUID());
                            }
                        }
                    }

                    break;
                }
                case eActions::Action_AlleriaFree:
                {
                    me->RemoveAllAuras();
                    DoCast(eSpells::Spell_AlleriaBreaksFree);

                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_NhalGuid))
                    {
                        me->DelayedCastSpell(l_Creature, eSpells::Spell_WindrunnersResolve, false, 2000);
                    }

                    break;
                }
                case eActions::Action_AlleriaEndEvent:
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_LocusGuid))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_LocusStartEndEvent);
                    }

                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
                    me->SetUInt32Value(UNIT_FIELD_BYTES_1, 8);
                    m_Events.ScheduleEvent(eEvents::Event_NhalDefeatedConversation, 4000);
                    break;
                }
                default:
                    break;
                }
            }

            void SummonedCreatureDies(Creature* p_Summon, Unit* /*p_Killer*/) override
            {
                if (p_Summon->GetEntry() == eNpcs::Npc_AbyssCaller)
                {
                    m_AbyssalsDied++;

                    if (m_AbyssalsDied == 3)
                    {
                        me->GetMotionMaster()->MovePoint(ePoints::Point_MoveToEventPosEnd, 5647.68f, 10647.5f, 5.238743f);

                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_LocusGuid))
                        {
                            l_Creature->AI()->DoAction(eActions::Action_LocusMoveToEventPos);
                        }
                    }
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_PointId)
                {
                case ePoints::Point_MoveToEventPosEnd:
                {
                    me->SetFacingTo(1.64061f);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 376);

                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_NhalGuid))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_NhalRise);
                    }

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_NhalRised, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player || !l_Player->IsInWorld() || !l_Player->HasQuest(eQuests::Quest_AVesselMadeReady) ||
                    l_Player->isDead())
                {
                    for (auto l_Itr : m_EventNpcGuids)
                    {
                        if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, l_Itr))
                        {
                            l_Creature->DespawnOrUnsummon();
                        }
                    }

                    me->DespawnOrUnsummon();
                    return;
                }

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_NhalDefeatedConversation:
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_NhalDefeated, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_Events.ScheduleEvent(eEvents::Event_PlayVisualTeleport, 12000);
                    break;
                }
                case eEvents::Event_PlayVisualTeleport:
                {
                    me->SendPlaySpellVisualKit(82528, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_alleria_windrunner_121773AI(p_Creature);
        }
};

/// Locus-Walker - 121772
class npc_locus_walker_121772 : public CreatureScript
{
    public:
        npc_locus_walker_121772() : CreatureScript("npc_locus_walker_121772") { }

        struct npc_locus_walker_121772AI : public ScriptedAI
        {
            npc_locus_walker_121772AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eActions
            {
                Action_LocusMoveToEventPos = 2,
                Action_LocusStartEndEvent = 6
            };

            enum ePoints
            {
                Point_MoveToEventPosEnd = 1,
                Point_MoveToAlleriaEnd = 2
            };

            enum eEvents
            {
                Event_SetFacingToAlleria = 1,
                Event_MoveToAlleria = 2,
                Event_VisualTeleport = 3
            };

            ObjectGuid m_SummonerGuid;
            EventMap m_Events;


            void IsSummonedBy(Unit* p_Summoner) override
            {
                me->SetReactState(ReactStates::REACT_PASSIVE);
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_LocusMoveToEventPos:
                {
                    me->GetMotionMaster()->MovePoint(ePoints::Point_MoveToEventPosEnd, 5637.42f, 10648.3f, 4.988743f);
                    break;
                }
                case eActions::Action_LocusStartEndEvent:
                {
                    m_Events.ScheduleEvent(eEvents::Event_SetFacingToAlleria, 2000);
                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_PointId)
                {
                case ePoints::Point_MoveToEventPosEnd:
                {
                    me->SetFacingTo(1.605703f);
                    break;
                }
                case ePoints::Point_MoveToAlleriaEnd:
                {
                    m_Events.ScheduleEvent(eEvents::Event_VisualTeleport, 9000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SetFacingToAlleria:
                {
                    me->SetFacingTo(6.205391f);
                    m_Events.ScheduleEvent(eEvents::Event_MoveToAlleria, 6000);
                    break;
                }
                case eEvents::Event_MoveToAlleria:
                {
                    me->GetMotionMaster()->MovePoint(ePoints::Point_MoveToAlleriaEnd, 5645.687f, 10647.66f, 5.190175f, false);
                    break;
                }
                case eEvents::Event_VisualTeleport:
                {
                    me->SendPlaySpellVisualKit(82528, 0, 0);
                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_locus_walker_121772AI(p_Creature);
        }
};

/// Nhalathoth - 121663
class npc_nhalathoth_121663 : public CreatureScript
{
    public:
        npc_nhalathoth_121663() : CreatureScript("npc_nhalathoth_121663") { }

        struct npc_nhalathoth_121663AI : public ScriptedAI
        {
            npc_nhalathoth_121663AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eActions
            {
                Action_NhalRise = 3,
                Action_AlleriaFree = 4,
                Action_AlleriaEndEvent = 5
            };

            enum eEvents
            {
                Event_SetCombatFlags = 1,
                Event_StartCasts = 2,
                Event_StunEmotion = 3,
                Event_CastDarkVolley = 4,
                Event_CastVoidHowl = 5,
                Event_DarkGrasp = 6
            };

            enum eSpells
            {
                Spell_VoidRelease = 254744,
                Spell_PeriodicVoidMissileFirst = 254746,
                Spell_PeriodicVoidMissileSecond = 254745,
                Spell_VoidConsumption = 243212,
                Spell_DarkVolley = 252372,
                Spell_VoidHowl = 252347,
                Spell_DarkGrasp = 252360,
                Spell_WindrunnersResolve = 250794,
                Spell_ShadowDomeState = 243207
            };

            enum eKillcredits
            {
                Killcredit_DefeatNhalathoth = 121663
            };

            enum eConversations
            {
                Conv_NhalCall = 5193,
                Conv_SeventyPctConversation = 5194,
                Conv_FiftyPctConversation = 5747,
                Conv_TwentyFivePctConversation = 5195
            };

            ObjectGuid m_SummonerGuid;
            ObjectGuid m_AlleriaGuid;
            EventMap m_Events;
            bool m_SeventyPctConvComplete = false;
            bool m_FiftyPctConvComplete = false;
            bool m_TwentyFivePctConvComplete = false;
            bool m_TenPctEventComplete = false;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                DoCast(eSpells::Spell_ShadowDomeState, true);
                SetCombatMovement(false);
                me->SetAIAnimKitId(3041);
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_NhalRise:
                {
                    me->RemoveAllAuras();
                    me->SetAIAnimKitId(0);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 27);
                    me->SetFlag(UNIT_FIELD_FLAGS, 33024);
                    m_Events.ScheduleEvent(eEvents::Event_SetCombatFlags, 3000);
                    break;
                }
                default:
                    break;
                }
            }

            void SetGUID(uint64 p_Guid, int32 p_ID = 0) override
            {
                m_AlleriaGuid = p_Guid;
            }

            void EnterCombat(Unit* victim) override
            {
                m_Events.ScheduleEvent(eEvents::Event_StartCasts, 5000);
                m_Events.ScheduleEvent(eEvents::Event_CastDarkVolley, urand(10000, 15000));
                m_Events.ScheduleEvent(eEvents::Event_CastVoidHowl, 22000);
                m_Events.ScheduleEvent(eEvents::Event_DarkGrasp, 30000);
            }

            void DamageTaken(Unit* attacker, uint32& damage, SpellInfo const* /*p_SpellInfo*/) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                if (me->GetHealthPct() <= 70 && !m_SeventyPctConvComplete)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_SeventyPctConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_SeventyPctConvComplete = true;
                }

                if (me->GetHealthPct() <= 50 && !m_FiftyPctConvComplete)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_FiftyPctConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_FiftyPctConvComplete = true;
                }

                if (me->GetHealthPct() <= 25 && !m_TwentyFivePctConvComplete)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_TwentyFivePctConversation, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    m_TwentyFivePctConvComplete = true;
                }

                if (me->GetHealthPct() <= 10 && !m_TenPctEventComplete)
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AlleriaGuid))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AlleriaFree);
                    }

                    m_Events.ScheduleEvent(eEvents::Event_StunEmotion, 1000);
                    m_TenPctEventComplete = true;
                }
            }

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                if (p_Spell->Id == eSpells::Spell_WindrunnersResolve)
                {
                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AlleriaGuid))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AlleriaEndEvent);
                    }

                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_DefeatNhalathoth);
                    me->DespawnOrUnsummon();
                }
            }

            void JustDied(Unit* /*killer*/) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AlleriaGuid))
                {
                    l_Creature->AI()->DoAction(eActions::Action_AlleriaEndEvent);
                }

                l_Player->KilledMonsterCredit(eKillcredits::Killcredit_DefeatNhalathoth);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SetCombatFlags:
                {
                    me->RemoveFlag(UNIT_FIELD_FLAGS, 33587456);
                    me->SetFlag(UNIT_FIELD_FLAGS, 32768);
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
                    break;
                }
                case eEvents::Event_StartCasts:
                {
                    DoCast(eSpells::Spell_VoidRelease, true);
                    DoCast(eSpells::Spell_PeriodicVoidMissileFirst, true);
                    DoCast(eSpells::Spell_PeriodicVoidMissileSecond, true);

                    if (Creature* l_Creature = ObjectAccessor::GetCreature(*me, m_AlleriaGuid))
                    {
                        me->SetFacingToObject(l_Creature);
                        DoCast(l_Creature, eSpells::Spell_VoidConsumption);
                    }

                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_NhalCall, l_Player, nullptr, l_Player->GetPosition()))
                            delete l_Conversation;
                    }

                    break;
                }
                case eEvents::Event_StunEmotion:
                {
                    m_Events.Reset();
                    me->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 64);
                    break;
                }
                case eEvents::Event_CastDarkVolley:
                {
                    DoCast(eSpells::Spell_DarkVolley);
                    m_Events.ScheduleEvent(eEvents::Event_CastDarkVolley, urand(15000, 20000));
                    break;
                }
                case eEvents::Event_CastVoidHowl:
                {
                    DoCast(eSpells::Spell_VoidHowl);
                    m_Events.ScheduleEvent(eEvents::Event_CastVoidHowl, 18000);
                    break;
                }
                case eEvents::Event_DarkGrasp:
                {
                    DoCastVictim(eSpells::Spell_DarkGrasp);
                    m_Events.ScheduleEvent(eEvents::Event_DarkGrasp, urand(10000, 20000));
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_nhalathoth_121663AI(p_Creature);
        }
};

/// Frenzied Plaguewing - 122833
class npc_frenzied_plaguewing_122833 : public CreatureScript
{
    public:
        npc_frenzied_plaguewing_122833() : CreatureScript("npc_frenzied_plaguewing_122833") { }

        struct npc_frenzied_plaguewing_122833AI : public ScriptedAI
        {
            npc_frenzied_plaguewing_122833AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum ePoints
            {
                Point_MoveEnd = 1
            };

            bool m_CanSummonCreature = true;

            void Reset() override
            {
                me->SetReactState(ReactStates::REACT_PASSIVE);

                if (!me->isSummon())
                {
                    me->AddDelayedEvent([this]() -> void
                    {
                        Position l_MovePos = me->GetPosition();
                        l_MovePos.m_positionX = l_MovePos.GetPositionX() + (std::cos(l_MovePos.m_orientation - (M_PI / 2)) * 0) + (std::cos(l_MovePos.m_orientation) * 200);
                        l_MovePos.m_positionY = l_MovePos.GetPositionY() + (std::sin(l_MovePos.m_orientation - (M_PI / 2)) * 0) + (std::sin(l_MovePos.m_orientation) * 200);
                        l_MovePos.m_positionZ = l_MovePos.GetPositionZ() + 0;

                        me->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_MoveEnd, l_MovePos);
                    }, urand(1000, 3000));
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                if (p_PointId == ePoints::Point_MoveEnd && m_CanSummonCreature)
                {
                    if (Creature* l_Creature = me->SummonCreature(me->GetEntry(), me->GetHomePosition(), TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 5000))
                    {
                        m_CanSummonCreature = false;

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            Position l_MovePos = l_Creature->GetPosition();
                            l_MovePos.m_positionX = l_MovePos.GetPositionX() + (std::cos(l_MovePos.m_orientation - (M_PI / 2)) * 0) + (std::cos(l_MovePos.m_orientation) * 200);
                            l_MovePos.m_positionY = l_MovePos.GetPositionY() + (std::sin(l_MovePos.m_orientation - (M_PI / 2)) * 0) + (std::sin(l_MovePos.m_orientation) * 200);
                            l_MovePos.m_positionZ = l_MovePos.GetPositionZ() + 0;

                            l_Creature->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_MoveEnd, l_MovePos);
                        }, urand(1000, 3000));
                    }

                    me->DespawnOrUnsummon();
                }
            }

            void JustDied(Unit* killer) override
            {
                if (!m_CanSummonCreature)
                    return;

                if (Creature* l_Creature = me->SummonCreature(me->GetEntry(), me->GetHomePosition(), TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 5000))
                {
                    m_CanSummonCreature = false;

                    l_Creature->AddDelayedEvent([l_Creature]() -> void
                    {
                        Position l_MovePos = l_Creature->GetPosition();
                        l_MovePos.m_positionX = l_MovePos.GetPositionX() + (std::cos(l_MovePos.m_orientation - (M_PI / 2)) * 0) + (std::cos(l_MovePos.m_orientation) * 200);
                        l_MovePos.m_positionY = l_MovePos.GetPositionY() + (std::sin(l_MovePos.m_orientation - (M_PI / 2)) * 0) + (std::sin(l_MovePos.m_orientation) * 200);
                        l_MovePos.m_positionZ = l_MovePos.GetPositionZ() + 0;

                        l_Creature->GetMotionMaster()->MoveSmoothFlyPath(ePoints::Point_MoveEnd, l_MovePos);
                    }, urand(1000, 3000));
                }

                killer->UpdateObjectVisibility();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_frenzied_plaguewing_122833AI(p_Creature);
        }
};

/// Wild Cragscaler - 123074
class npc_wild_cragscaler_123074 : public CreatureScript
{
    public:
        npc_wild_cragscaler_123074() : CreatureScript("npc_wild_cragscaler_123074") { }

        struct npc_wild_cragscaler_123074AI : public ScriptedAI
        {
            npc_wild_cragscaler_123074AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_RoundUp = 245298
            };

            void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override
            {
                if (Player* l_Player = p_Caster->ToPlayer())
                {
                    if (p_Spell->Id == eSpells::Spell_RoundUp)
                    {
                        me->AddToHideList(p_Caster->GetGUID(), 360000);
                        me->DestroyForPlayer(l_Player);
                    }
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_wild_cragscaler_123074AI(p_Creature);
        }
};

/// Wild Cragscaler - 123089
class npc_wild_cragscaler_123089 : public CreatureScript
{
    public:
        npc_wild_cragscaler_123089() : CreatureScript("npc_wild_cragscaler_123089") { }

        struct npc_wild_cragscaler_123089AI : public ScriptedAI
        {
            npc_wild_cragscaler_123089AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_RoundUp = 245305
            };

            enum eKillcredits
            {
                Killcredit_WildCragscalerRescued = 123089
            };

            enum eQuests
            {
                Quest_AnArgusRoper = 47967
            };

            ObjectGuid m_SummonerGuid;
            Position const m_RescuePos = { 1117.317993f, 1379.759521f, 489.744354f };
            bool m_Rescued = false;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                uint64 l_MeGuid = me->GetGUID();
                p_Summoner->AddDelayedEvent([p_Summoner, l_MeGuid]() -> void
                {
                    if (Unit* l_Me = Unit::GetUnit(*p_Summoner, l_MeGuid))
                        l_Me->AddAura(eSpells::Spell_RoundUp, p_Summoner);
                }, 500);

                me->SetReactState(ReactStates::REACT_PASSIVE);
                m_SummonerGuid = p_Summoner->GetGUID();
                p_Summoner->SetInPhase(47967, true, true);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                if (me->GetExactDist2d(&m_RescuePos) < 15.0f && !m_Rescued)
                {
                    if (Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid))
                    {
                        l_Player->KilledMonsterCredit(eKillcredits::Killcredit_WildCragscalerRescued);
                        m_Rescued = true;

                        if (l_Player->GetQuestStatus(eQuests::Quest_AnArgusRoper) == QUEST_STATUS_COMPLETE)
                        {
                            l_Player->SetInPhase(47967, true, false);
                        }
                    }

                    me->DespawnOrUnsummon();
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_wild_cragscaler_123089AI(p_Creature);
        }
};

/// Cragscaler Steed - 126843
class npc_cragscaler_steed_126843 : public CreatureScript
{
    public:
        npc_cragscaler_steed_126843() : CreatureScript("npc_cragscaler_steed_126843") { }

        struct npc_cragscaler_steed_126843AI : public VehicleAI
        {
            npc_cragscaler_steed_126843AI(Creature* p_Creature) : VehicleAI(p_Creature) { }

            enum eSpells
            {
                Spell_RideVehicle = 46598
            };

            Position const m_ArrivingPos = { 979.861694f, 1668.165894f, 525.634216f };
            bool m_Arrived = false;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                p_Summoner->CastSpell(me, eSpells::Spell_RideVehicle, true);
                me->AddUnitMovementFlag(MovementFlags::MOVEMENTFLAG_FORWARD);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                if (me->GetExactDist2d(&m_ArrivingPos) < 10.0f && !m_Arrived)
                {
                    if (me->GetVehicleKit())
                    {
                        me->GetVehicleKit()->RemoveAllPassengers();
                    }

                    m_Arrived = true;
                    me->DespawnOrUnsummon();
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_cragscaler_steed_126843AI(p_Creature);
        }
};

/// Lightforged Warframe - 126143
class npc_lightforged_warframe_126143 : public CreatureScript
{
    public:
        npc_lightforged_warframe_126143() : CreatureScript("npc_lightforged_warframe_126143") { }

        struct npc_lightforged_warframe_126143AI : public VehicleAI
        {
            npc_lightforged_warframe_126143AI(Creature* p_Creature) : VehicleAI(p_Creature) { }

            enum eSpells
            {
                Spell_LightforgedWarframeActivated = 250437,
                Spell_HolyFadeInWithLightBeam = 248895,
                Spell_RideVehicle = 46598
            };

            enum eConversations
            {
                Conversation_WarframeSummoned = 6204
            };

            void IsSummonedBy(Unit* p_Summoner) override
            {
                DoCast(eSpells::Spell_LightforgedWarframeActivated, true);
                DoCast(eSpells::Spell_HolyFadeInWithLightBeam, true);
                p_Summoner->CastSpell(me, eSpells::Spell_RideVehicle, true);

                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conversation_WarframeSummoned, p_Summoner, nullptr, p_Summoner->GetPosition()))
                        delete l_Conversation;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_lightforged_warframe_126143AI(p_Creature);
        }
};

/// Labradorite - 126121
class npc_labradorite_126121 : public CreatureScript
{
    public:
        npc_labradorite_126121() : CreatureScript("npc_labradorite_126121") { }
        struct npc_labradorite_126121AI : public ScriptedAI
        {
            npc_labradorite_126121AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }
            EventMap m_Events;

            enum eObjectives
            {
                Obj_BlueGem = 292114
            };
            enum eSpells
            {
                Spell_BlueBeam = 250475,
                Spell_ActiveVisual = 144373,
                Spell_BlueKC = 250512
            };
            void sGossipHello(Player* p_Player) override
            {
                if (p_Player->GetQuestObjectiveCounter(eObjectives::Obj_BlueGem) == 0)
                {
                    p_Player->PrepareGossipMenu(me, 126121);
                    p_Player->SendPreparedGossip(me);
                }
            }
            void sGossipSelect(Player* p_Player, uint32 p_Sender, uint32 p_Action) override
            {
                if (p_Sender == 126121)
                {
                    p_Player->PlayerTalkClass->SendCloseGossip();
                    p_Player->CastSpell(p_Player, eSpells::Spell_BlueKC, true);
                }
            }
            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);
                if (me->HasUnitState(UnitState::UNIT_STATE_CASTING) || me->HasAura(eSpells::Spell_ActiveVisual))
                    return;
                me->CastSpell(me, eSpells::Spell_BlueBeam);
            }
        };
        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_labradorite_126121AI(p_Creature);
        }
};

/// Chemirine - 126124
class npc_chemirine_126124 : public CreatureScript
{
    public:
        npc_chemirine_126124() : CreatureScript("npc_chemirine_126124") { }
        struct npc_chemirine_126124AI : public ScriptedAI
        {
            npc_chemirine_126124AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }
            EventMap m_Events;
            enum eObjectives
            {
                Obj_OrangeGem = 292117
            };
            enum eSpells
            {
                Spell_OrangeBeam = 250526,
                Spell_ActiveVisual = 144373,
                Spell_OrangeKC = 250514
            };
            void sGossipHello(Player* p_Player) override
            {
                if (p_Player->GetQuestObjectiveCounter(eObjectives::Obj_OrangeGem) == 0)
                {
                    p_Player->PrepareGossipMenu(me, 126124);
                    p_Player->SendPreparedGossip(me);
                }
            }
            void sGossipSelect(Player* p_Player, uint32 p_Sender, uint32 p_Action) override
            {
                if (p_Sender == 126124)
                {
                    p_Player->PlayerTalkClass->SendCloseGossip();
                    p_Player->CastSpell(p_Player, eSpells::Spell_OrangeKC, true);
                }
            }
            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);
                if (me->HasUnitState(UnitState::UNIT_STATE_CASTING) || me->HasAura(eSpells::Spell_ActiveVisual))
                    return;
                me->CastSpell(me, eSpells::Spell_OrangeBeam);
            }
        };
        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_chemirine_126124AI(p_Creature);
        }
};

/// Florid Malachite - 126118
class npc_florid_malachite_126118 : public CreatureScript
{
    public:
        npc_florid_malachite_126118() : CreatureScript("npc_florid_malachite_126118") { }
        struct npc_florid_malachite_126118AI : public ScriptedAI
        {
            npc_florid_malachite_126118AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }
            EventMap m_Events;
            enum eObjectives
            {
                Obj_GreenGem = 292115
            };
            enum eSpells
            {
                Spell_GreenBeam = 250524,
                Spell_ActiveVisual = 144373,
                Spell_GreenKC = 250513
            };
            void sGossipHello(Player* p_Player) override
            {
                if (p_Player->GetQuestObjectiveCounter(eObjectives::Obj_GreenGem) == 0)
                {
                    p_Player->PrepareGossipMenu(me, 126118);
                    p_Player->SendPreparedGossip(me);
                }
            }
            void sGossipSelect(Player* p_Player, uint32 p_Sender, uint32 p_Action) override
            {
                if (p_Sender == 126118)
                {
                    p_Player->PlayerTalkClass->SendCloseGossip();
                    p_Player->CastSpell(p_Player, eSpells::Spell_GreenKC, true);
                }
            }
            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);
                if (me->HasUnitState(UnitState::UNIT_STATE_CASTING) || me->HasAura(eSpells::Spell_ActiveVisual))
                    return;
                me->CastSpell(me, eSpells::Spell_GreenBeam);
            }
        };
        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_florid_malachite_126118AI(p_Creature);
        }
};

/// Argulite - 126123
class npc_argulite_126123 : public CreatureScript
{
    public:
        npc_argulite_126123() : CreatureScript("npc_argulite_126123") { }
        struct npc_argulite_126123AI : public ScriptedAI
        {
            npc_argulite_126123AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }
            EventMap m_Events;
            enum eObjectives
            {
                Obj_PurpleGem = 292118
            };
            enum eSpells
            {
                Spell_PurpleBeam = 250527,
                Spell_ActiveVisual = 144373,
                Spell_PurpleKC = 250515
            };
            void sGossipHello(Player* p_Player) override
            {
                if (p_Player->GetQuestObjectiveCounter(eObjectives::Obj_PurpleGem) == 0)
                {
                    p_Player->PrepareGossipMenu(me, 126123);
                    p_Player->SendPreparedGossip(me);
                }
            }
            void sGossipSelect(Player* p_Player, uint32 p_Sender, uint32 p_Action) override
            {
                if (p_Sender == 126123)
                {
                    p_Player->PlayerTalkClass->SendCloseGossip();
                    p_Player->CastSpell(p_Player, eSpells::Spell_PurpleKC, true);
                }
            }
            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);
                if (me->HasUnitState(UnitState::UNIT_STATE_CASTING) || me->HasAura(eSpells::Spell_ActiveVisual))
                    return;
                me->CastSpell(me, eSpells::Spell_PurpleBeam);
            }
        };
        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_argulite_126123AI(p_Creature);
        }
};

/// Lightsphene - 126125
class npc_lightsphene_126125 : public CreatureScript
{
    public:
        npc_lightsphene_126125() : CreatureScript("npc_lightsphene_126125") { }
        struct npc_lightsphene_126125AI : public ScriptedAI
        {
            npc_lightsphene_126125AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }
            EventMap m_Events;
            enum eObjectives
            {
                Obj_YellowGem = 292116
            };
            enum eSpells
            {
                Spell_YellowBeam = 250525,
                Spell_ActiveVisual = 144373,
                Spell_YellowKC = 250517
            };
            void sGossipHello(Player* p_Player) override
            {
                if (p_Player->GetQuestObjectiveCounter(eObjectives::Obj_YellowGem) == 0)
                {
                    p_Player->PrepareGossipMenu(me, 126125);
                    p_Player->SendPreparedGossip(me);
                }
            }
            void sGossipSelect(Player* p_Player, uint32 p_Sender, uint32 p_Action) override
            {
                if (p_Sender == 126125)
                {
                    p_Player->PlayerTalkClass->SendCloseGossip();
                    p_Player->CastSpell(p_Player, eSpells::Spell_YellowKC, true);
                }
            }
            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);
                if (me->HasUnitState(UnitState::UNIT_STATE_CASTING) || me->HasAura(eSpells::Spell_ActiveVisual))
                    return;
                me->CastSpell(me, eSpells::Spell_YellowBeam);
            }
        };
        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_lightsphene_126125AI(p_Creature);
        }
};

/// Hesselian - 126119
class npc_hesselian_126119 : public CreatureScript
{
    public:
        npc_hesselian_126119() : CreatureScript("npc_hesselian_126119") { }
        struct npc_hesselian_126119AI : public ScriptedAI
        {
            npc_hesselian_126119AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }
            EventMap m_Events;
            enum eObjectives
            {
                Obj_RedGem = 291497
            };
            enum eSpells
            {
                Spell_RedBeam = 250523,
                Spell_ActiveVisual = 144373,
                Spell_RedKC = 250516
            };
            void sGossipHello(Player* p_Player) override
            {
                if (p_Player->GetQuestObjectiveCounter(eObjectives::Obj_RedGem) == 0)
                {
                    p_Player->PrepareGossipMenu(me, 126119);
                    p_Player->SendPreparedGossip(me);
                }
            }
            void sGossipSelect(Player* p_Player, uint32 p_Sender, uint32 p_Action) override
            {
                if (p_Sender == 126119)
                {
                    p_Player->PlayerTalkClass->SendCloseGossip();
                    p_Player->CastSpell(p_Player, eSpells::Spell_RedKC, true);
                }
            }
            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);
                if (me->HasUnitState(UnitState::UNIT_STATE_CASTING) || me->HasAura(eSpells::Spell_ActiveVisual))
                    return;
                me->CastSpell(me, eSpells::Spell_RedBeam);
            }
        };
        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_hesselian_126119AI(p_Creature);
        }
};

/// Beam Caster - 126188
class npc_bream_caster_126188 : public CreatureScript
{
    public:
        npc_bream_caster_126188() : CreatureScript("npc_bream_caster_126188") { }
        struct npc_bream_caster_126188AI : public ScriptedAI
        {
            npc_bream_caster_126188AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }
            EventMap m_Events;
            enum eSpells
            {
                Spell_FinalBeam = 250534
            };
            enum eNpcs
            {
                Npc_BeamTarget = 126186
            };
            void UpdateAI(uint32 const p_Diff) override
            {
                m_Events.Update(p_Diff);
                if (me->HasUnitState(UnitState::UNIT_STATE_CASTING))
                    return;
                if (Creature* l_Target = me->FindNearestCreature(eNpcs::Npc_BeamTarget, 10.0f, true))
                    me->CastSpell(l_Target, eSpells::Spell_FinalBeam);
            }
        };
        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_bream_caster_126188AI(p_Creature);
        }
};

/// Vorel's Chest - 272744
class gob_vorel_chest_272744 : public GameObjectScript
{
    public:
        gob_vorel_chest_272744() : GameObjectScript("gob_vorel_chest_272744") { }
        struct gob_vorel_chest_272744AI : public GameObjectAI
        {
            gob_vorel_chest_272744AI(GameObject* go) : GameObjectAI(go) { }
            void OnBuildDynFlags(uint16& p_DynFlags, Player* p_Player) override
            {
                if (!p_Player->HasInPhaseList(4807512))
                {
                    p_DynFlags = GO_DYNFLAG_LO_NO_INTERACT;
                }
            }
        };
        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_vorel_chest_272744AI(go);
        }
};

/// Prophet Velen - 128722
class npc_prophet_velen_128722 : public CreatureScript
{
    public:
        npc_prophet_velen_128722() : CreatureScript("npc_prophet_velen_128722") { }

        struct npc_prophet_velen_128722AI : public ScriptedAI
        {
            npc_prophet_velen_128722AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eQuests
            {
                Quest_CrestOfKnowledge = 47654,
                Quest_CustomQuestAfterCrestOfKnowledge = 4765400
            };

            enum eActions
            {
                Action_VelenMoveToPedestal = 38,
                Action_VelenMoveToConsole = 39
            };

            enum ePoints
            {
                Point_MoveToPedestalEnd = 1,
                Point_MoveToConsoleEnd = 2
            };

            enum eKillcredits
            {
                Killcredit_EyeOfProphecySecured = 126435
            };

            enum eSpells
            {
                Spell_VindicaarGoesGold = 250892
            };

            enum eConversations
            {
                Conv_VelenMoveToConsole = 5761
            };

            ObjectGuid m_SummonerGuid;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
                me->RemoveFlag(UNIT_FIELD_NPC_FLAGS, 3);
            }

            void DoAction(int32 const p_Action) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_Action)
                {
                case eActions::Action_VelenMoveToPedestal:
                {
                    me->AddDelayedEvent([this]() -> void
                    {
                        Position l_MovePos = { 4661.69f, 9846.68f, 60.2488f };

                        me->SetWalk(true);
                        me->GetMotionMaster()->MovePoint(ePoints::Point_MoveToPedestalEnd, l_MovePos);
                    }, 2000);

                    break;
                }
                case eActions::Action_VelenMoveToConsole:
                {
                    l_Player->AddDelayedEvent([l_Player]() -> void
                    {
                        if (Conversation* l_Conversation = new Conversation)
                        {
                            if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_VelenMoveToConsole, l_Player, nullptr, l_Player->GetPosition()))
                                delete l_Conversation;
                        }
                    }, 3000);

                    me->AddDelayedEvent([this]() -> void
                    {
                        G3D::Vector3 const Path_VelenToConsole[6] =
                        {
                            { 4673.329f, 9849.459f, 56.51174f },
                            { 4682.579f, 9851.709f, 56.51174f },
                            { 4708.079f, 9857.959f, 56.51174f },
                            { 4721.579f, 9860.959f, 63.76174f },
                            { 4730.597f, 9868.763f, 64.29066f },
                            { 4732.351f, 9870.31f, 64.37394f }
                        };

                        me->GetMotionMaster()->MoveSmoothPath(ePoints::Point_MoveToConsoleEnd, Path_VelenToConsole, 6, true);
                    }, 7000);

                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                Player* l_Player = ObjectAccessor::GetPlayer(*me, m_SummonerGuid);
                if (!l_Player)
                    return;

                switch (p_PointId)
                {
                case ePoints::Point_MoveToPedestalEnd:
                {
                    me->PlayOneShotAnimKitId(12359);
                    me->DespawnOrUnsummon(5000);
                    l_Player->KilledMonsterCredit(eKillcredits::Killcredit_EyeOfProphecySecured);
                    l_Player->DelayedCastSpell(l_Player, eSpells::Spell_VindicaarGoesGold, true, 4000);
                    break;
                }
                case ePoints::Point_MoveToConsoleEnd:
                {
                    if (Quest const* l_Quest = sObjectMgr->GetQuestTemplate(eQuests::Quest_CustomQuestAfterCrestOfKnowledge))
                    {
                        l_Player->RewardQuest(l_Quest, 0, nullptr, false);
                    }

                    me->DespawnOrUnsummon();
                    break;
                }
                default:
                    break;
                }
            }

            void sQuestReward(Player* p_Player, Quest const* p_Quest, uint32 /*p_Option*/) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_CrestOfKnowledge:
                {
                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_VelenMoveToConsole);
                    }

                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_prophet_velen_128722AI(p_Creature);
        }
};

/// Gaal - 125246
class npc_gaal_125246 : public CreatureScript
{
    public:
        npc_gaal_125246() : CreatureScript("npc_gaal_125246") { }

        struct npc_gaal_125246AI : public ScriptedAI
        {
            npc_gaal_125246AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eQuests
            {
                Quest_ForgingAKeyToThePast = 48803
            };

            enum ePoints
            {
                Point_MoveToForgeEnd = 1,
                Point_MoveFromForgeEnd = 2
            };

            enum eSpells
            {
                Spell_ReforgingArmoryKey = 249330
            };

            enum eKillcredits
            {
                Killcredit_WaitAsTheKeyIsReforged = 127269
            };

            ObjectGuid m_SummonerGuid;

            void IsSummonedBy(Unit* p_Summoner) override
            {
                m_SummonerGuid = p_Summoner->GetGUID();
            }

            void sQuestAccept(Player* p_Player, Quest const* p_Quest) override
            {
                switch (p_Quest->GetQuestId())
                {
                case eQuests::Quest_ForgingAKeyToThePast:
                {
                    uint64 l_PlayerGuid = p_Player->GetGUID();

                    me->AddToHideList(l_PlayerGuid, 23000);
                    p_Player->UpdateObjectVisibility(true);

                    if (Creature* l_Creature = p_Player->SummonCreature(me->GetEntry(), me->GetPosition(), TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->RemoveFlag(UNIT_FIELD_NPC_FLAGS, UNIT_NPC_FLAG_QUESTGIVER | UNIT_NPC_FLAG_VENDOR | UNIT_NPC_FLAG_REPAIR);
                        l_Creature->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);

                        l_Creature->AddDelayedEvent([l_Creature, l_PlayerGuid]() -> void
                        {
                            if (Player* l_Player = ObjectAccessor::GetPlayer(*l_Creature, l_PlayerGuid))
                            {
                                l_Creature->SetFacingToObject(l_Player);
                                l_Creature->AI()->Talk(0, l_PlayerGuid);
                            }
                        }, 2000);

                        l_Creature->AddDelayedEvent([l_Creature]() -> void
                        {
                            Position l_MovePosition = { 951.2518f, 1660.868f, 529.0437f };

                            l_Creature->SetWalk(true);
                            l_Creature->GetMotionMaster()->MovePoint(ePoints::Point_MoveToForgeEnd, l_MovePosition);
                        }, 4000);
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void MovementInform(uint32 /*p_Type*/, uint32 p_PointId) override
            {
                switch (p_PointId)
                {
                case ePoints::Point_MoveToForgeEnd:
                {
                    uint64 l_PlayerGuid = m_SummonerGuid;

                    me->SetFacingTo(3.344378f);
                    DoCast(eSpells::Spell_ReforgingArmoryKey);

                    me->AddDelayedEvent([this, l_PlayerGuid]() -> void
                    {
                        if (Player* l_Player = ObjectAccessor::GetPlayer(*me, l_PlayerGuid))
                        {
                            Talk(1, l_PlayerGuid);
                        }
                    }, 5000);

                    me->AddDelayedEvent([this]() -> void
                    {
                        Position l_MovePosition = { 953.5695f, 1659.172f, 529.0437f };

                        me->SetWalk(true);
                        me->GetMotionMaster()->MovePoint(ePoints::Point_MoveFromForgeEnd, l_MovePosition);
                    }, 11000);

                    break;
                }
                case ePoints::Point_MoveFromForgeEnd:
                {
                    uint64 l_PlayerGuid = m_SummonerGuid;

                    me->AddDelayedEvent([this, l_PlayerGuid]() -> void
                    {
                        if (Player* l_Player = ObjectAccessor::GetPlayer(*me, l_PlayerGuid))
                        {
                            me->SetFacingToObject(l_Player);
                            Talk(2, l_PlayerGuid);
                        }
                    }, 1000);

                    me->AddDelayedEvent([this, l_PlayerGuid]() -> void
                    {
                        if (Player* l_Player = ObjectAccessor::GetPlayer(*me, l_PlayerGuid))
                        {
                            l_Player->KilledMonsterCredit(eKillcredits::Killcredit_WaitAsTheKeyIsReforged);
                        }

                        me->SetFacingTo(5.82762f);
                        me->DespawnOrUnsummon();
                    }, 5000);

                    break;
                }
                default:
                    break;
                }
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_gaal_125246AI(p_Creature);
        }
};

/// Commander Atalaa - 125620
class npc_commander_atalaa_125620 : public CreatureScript
{
    public:
        npc_commander_atalaa_125620() : CreatureScript("npc_commander_atalaa_125620") { }

        struct npc_commander_atalaa_125620AI : public ScriptedAI
        {
            npc_commander_atalaa_125620AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_HolyWell = 249677,
                Spell_BlindRecompense = 249682,
                Spell_HolyRetribution = 250366,
                Spell_LightsGrace = 249891,
                Spell_BlessedHammer = 250714
            };

            enum eEvents
            {
                Event_CastHolyWell = 1,
                Event_CastBlindRecompense = 2,
                Event_CastHolyRetribution = 3,
                Event_CastBlessedHammer = 4
            };

            EventMap m_Events;
            bool m_SecondPhaseStarted = false;

            void Reset() override
            {
                m_Events.Reset();
                m_SecondPhaseStarted = false;
            }

            void DamageTaken(Unit* /*attacker*/, uint32& /*damage*/, SpellInfo const* /*p_SpellInfo*/) override
            {
                if (me->HealthBelowPct(50) && !m_SecondPhaseStarted)
                {
                    Talk(1);
                    DoCast(eSpells::Spell_LightsGrace, true);
                    m_Events.ScheduleEvent(eEvents::Event_CastBlessedHammer, 1000);
                    m_SecondPhaseStarted = true;
                }
            }

            void JustDied(Unit* /*killer*/) override
            {
                Talk(2);
            }

            void EnterCombat(Unit* /*victim*/) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastHolyWell, 5000);
                m_Events.ScheduleEvent(eEvents::Event_CastBlindRecompense, 11000);
                m_Events.ScheduleEvent(eEvents::Event_CastHolyRetribution, 17000);
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                if (!UpdateVictim())
                    return;

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastHolyWell:
                {
                    DoCast(eSpells::Spell_HolyWell);
                    m_Events.ScheduleEvent(eEvents::Event_CastHolyWell, urand(23000, 34000));
                    break;
                }
                case eEvents::Event_CastBlindRecompense:
                {
                    DoCast(eSpells::Spell_BlindRecompense);
                    m_Events.ScheduleEvent(eEvents::Event_CastBlindRecompense, 11000);
                    break;
                }
                case eEvents::Event_CastHolyRetribution:
                {
                    DoCast(eSpells::Spell_HolyRetribution);
                    m_Events.ScheduleEvent(eEvents::Event_CastHolyRetribution, urand(23000, 34000));
                    break;
                }
                case eEvents::Event_CastBlessedHammer:
                {
                    DoCast(eSpells::Spell_BlessedHammer);
                    m_Events.ScheduleEvent(eEvents::Event_CastBlessedHammer, urand(20000, 30000));
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_commander_atalaa_125620AI(p_Creature);
        }
};

/// High Inquisitor Raalgar - 121544
class npc_high_inquisitor_raalgar_121544 : public CreatureScript
{
    public:
        npc_high_inquisitor_raalgar_121544() : CreatureScript("npc_high_inquisitor_raalgar_121544") { }

        struct npc_high_inquisitor_raalgar_121544AI : public ScriptedAI
        {
            npc_high_inquisitor_raalgar_121544AI(Creature* p_Creature) : ScriptedAI(p_Creature) { }

            enum eSpells
            {
                Spell_FelEntropy = 254265,
                Spell_ExpulseShadows = 203373,
                Spell_ExpulseShadowsTarget = 223641,
                Spell_FelHeartBond = 248022
            };

            enum eEvents
            {
                Event_CastFelEntropy = 1,
                Event_CastExpulseShadows = 2
            };

            EventMap m_Events;
            std::vector<ObjectGuid> m_PlayerGuids;
            bool m_EightyPctLine = false;
            bool m_FiftyPctLine = false;
            bool m_HealthRestored = false;

            void MoveInLineOfSight(Unit* p_Who) override
            {
                Player* l_Player = p_Who->ToPlayer();
                if (!l_Player)
                    return;

                if (me->GetExactDist2d(p_Who) < 40.0f && !me->isInCombat())
                {
                    if (std::find(m_PlayerGuids.begin(), m_PlayerGuids.end(), l_Player->GetGUID()) == m_PlayerGuids.end())
                    {
                        Talk(0, l_Player->GetGUID());
                        m_PlayerGuids.push_back(l_Player->GetGUID());
                    }
                }
            }

            void Reset() override
            {
                m_Events.Reset();
                m_PlayerGuids.clear();
                m_EightyPctLine = false;
                m_FiftyPctLine = false;
                m_HealthRestored = false;
            }

            void EnterCombat(Unit* /*victim*/) override
            {
                m_Events.ScheduleEvent(eEvents::Event_CastFelEntropy, 4000);
                m_Events.ScheduleEvent(eEvents::Event_CastExpulseShadows, 8000);
            }

            void DamageTaken(Unit* p_Attacker, uint32& p_Damage, SpellInfo const* /*p_SpellInfo*/) override
            {
                if (p_Damage >= me->GetHealth() && !m_HealthRestored)
                {
                    p_Damage = 0;
                    me->SetHealth(1);
                }

                if (me->GetHealthPct() <= 80 && !m_EightyPctLine && m_HealthRestored)
                {
                    Talk(2);
                    m_EightyPctLine = true;
                }

                if (me->GetHealthPct() <= 50 && !m_FiftyPctLine)
                {
                    Talk(1);
                    m_FiftyPctLine = true;
                }

                if (me->GetHealthPct() <= 10 && !m_HealthRestored)
                {
                    me->CastStop();
                    DoCast(eSpells::Spell_FelHeartBond, true);
                    me->SetHealth(me->CountPctFromMaxHealth(90));
                    m_HealthRestored = true;
                }
            }

            void UpdateAI(uint32 const p_Diff) override
            {
                if (!UpdateVictim())
                    return;

                m_Events.Update(p_Diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_CastFelEntropy:
                {
                    DoCastVictim(eSpells::Spell_FelEntropy);
                    m_Events.ScheduleEvent(eEvents::Event_CastFelEntropy, urand(13000, 17000));
                    break;
                }
                case eEvents::Event_CastExpulseShadows:
                {
                    DoCast(eSpells::Spell_ExpulseShadows);
                    DoCastVictim(eSpells::Spell_ExpulseShadows);
                    m_Events.ScheduleEvent(eEvents::Event_CastExpulseShadows, 17000);
                    break;
                }
                default:
                    break;
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* p_Creature) const override
        {
            return new npc_high_inquisitor_raalgar_121544AI(p_Creature);
        }
};

/// Lightforged Beacon - 271094
class gob_lightforged_beacon_271094 : public GameObjectScript
{
    public:
        gob_lightforged_beacon_271094() : GameObjectScript("gob_lightforged_beacon_271094") { }

        struct gob_lightforged_beacon_271094AI : public GameObjectAI
        {
            gob_lightforged_beacon_271094AI(GameObject* go) : GameObjectAI(go) { }

            void InitializeAI() override
            {
                go->SendGameObjectActivateAnimKit(6011);
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_lightforged_beacon_271094AI(go);
        }
};

/// Light's Judgment - 271124, 273658
class gob_lights_judgments : public GameObjectScript
{
    public:
        gob_lights_judgments() : GameObjectScript("gob_lights_judgments") { }

        struct gob_lights_judgmentsAI : public GameObjectAI
        {
            gob_lights_judgmentsAI(GameObject* go) : GameObjectAI(go) { }

            enum eGobs
            {
                Gob_LightsJudgmentQuestender = 271124,
                Gob_LightsJudgmentVisual = 273658
            };

            void InitializeAI() override
            {
                switch (go->GetEntry())
                {
                case eGobs::Gob_LightsJudgmentQuestender:
                {
                    go->SetAIAnimKitId(11667);
                    break;
                }
                case eGobs::Gob_LightsJudgmentVisual:
                {
                    go->SetAIAnimKitId(10797);
                    go->SetUInt32Value(GAMEOBJECT_FIELD_SPELL_VISUAL_ID, 26930);
                    go->SetUInt32Value(GAMEOBJECT_FIELD_STATE_SPELL_VISUAL_ID, 26930);
                    break;
                }
                default:
                    break;
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_lights_judgmentsAI(go);
        }
};

/// Teleportation Crystal - 273787
class gob_teleportation_crystal_273787 : public GameObjectScript
{
    public:
        gob_teleportation_crystal_273787() : GameObjectScript("gob_teleportation_crystal_273787") { }

        struct gob_teleportation_crystal_273787AI : public GameObjectAI
        {
            gob_teleportation_crystal_273787AI(GameObject* go) : GameObjectAI(go) { }

            void InitializeAI() override
            {
                go->SetUInt32Value(GAMEOBJECT_FIELD_STATE_SPELL_VISUAL_ID, 37794);
            }

            void OnLootStateChanged(uint32 p_State, Unit* p_Unit) override
            {
                if (p_State == 2 && p_Unit->ToPlayer())
                {
                    go->AddToHideList(p_Unit->GetGUID(), 360000);
                    go->DestroyForPlayer(p_Unit->ToPlayer());

                    if (GameObject* l_Gob = p_Unit->SummonGameObject(go->GetEntry(), go->GetPosition(), 0, 0, p_Unit->GetGUID()))
                    {
                        l_Gob->SetUInt32Value(GAMEOBJECT_FIELD_STATE_SPELL_VISUAL_ID, 8743);
                        l_Gob->SetFlag(GAMEOBJECT_FIELD_FLAGS, 20);
                        l_Gob->SetGoState(GOState::GO_STATE_ACTIVE_ALTERNATIVE);
                        l_Gob->AddDelayedEvent([l_Gob]() -> void
                        {
                            l_Gob->Delete();
                        }, 120000);
                    }
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_teleportation_crystal_273787AI(go);
        }
};

/// Lightforged Beacon - 275101
class gob_lightforged_beacon_275101 : public GameObjectScript
{
    public:
        gob_lightforged_beacon_275101() : GameObjectScript("gob_lightforged_beacon_275101") { }

        struct gob_lightforged_beacon_275101AI : public GameObjectAI
        {
            gob_lightforged_beacon_275101AI(GameObject* go) : GameObjectAI(go) { }

            enum eEvents
            {
                Event_SummonTuralyon = 1
            };

            enum eKillcredits
            {
                Killcredit_VisualBeaconPlaced = 292684
            };

            enum eActions
            {
                Action_TuralyonTeleported = 1,
                Action_StartEvent = 2
            };

            enum eNpcs
            {
                Npc_Turalyon = 126954
            };

            enum eSpells
            {
                Spell_BeaconPlacedConversation = 252069
            };

            Position const m_TuralyonSpawnPos = { -2934.64f, 8798.25f, -231.503f };
            EventMap m_Events;

            void InitializeAI() override
            {
                if (go->HasInPhaseList(9832))
                {
                    go->SetUInt32Value(GAMEOBJECT_FIELD_SPELL_VISUAL_ID, 8742);
                    go->SetUInt32Value(GAMEOBJECT_FIELD_STATE_SPELL_VISUAL_ID, 37794);
                }
                else
                {
                    go->SetUInt32Value(GAMEOBJECT_FIELD_SPELL_VISUAL_ID, 8742);
                    go->SetUInt32Value(GAMEOBJECT_FIELD_STATE_SPELL_VISUAL_ID, 8743);
                }
            }

            void OnLootStateChanged(uint32 p_State, Unit* p_Unit) override
            {
                if (p_State == 2 && p_Unit->ToPlayer())
                {
                    if (GameObject* l_Gob = p_Unit->SummonGameObject(go->GetEntry(), go->GetPosition(), 0, 0, p_Unit->GetGUID()))
                    {
                        p_Unit->CastSpell(p_Unit, eSpells::Spell_BeaconPlacedConversation, true);
                        l_Gob->SetOwnerGUID(p_Unit->GetGUID());
                        l_Gob->SetUInt32Value(GAMEOBJECT_FIELD_SPELL_VISUAL_ID, 8742);
                        l_Gob->SetUInt32Value(GAMEOBJECT_FIELD_STATE_SPELL_VISUAL_ID, 8743);
                        l_Gob->SendGameObjectActivateAnimKit(8308);
                        l_Gob->SetFlag(GAMEOBJECT_FIELD_FLAGS, 20);
                        l_Gob->SetGoState(GOState::GO_STATE_ACTIVE_ALTERNATIVE);
                        l_Gob->AI()->DoAction(eActions::Action_StartEvent);
                    }
                }
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_StartEvent:
                {
                    m_Events.ScheduleEvent(eEvents::Event_SummonTuralyon, 4000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SummonTuralyon:
                {
                    if (Player* l_Player = ObjectAccessor::GetPlayer(*go, go->GetOwnerGUID()))
                    {
                        if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_Turalyon, m_TuralyonSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                        {
                            l_Creature->AI()->DoAction(eActions::Action_TuralyonTeleported);
                        }

                        l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_VisualBeaconPlaced);
                        go->Delete();
                    }
                    break;
                }
                default:
                    break;
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_lightforged_beacon_275101AI(go);
        }
};

/// Spire Stabilizer - 272619
class gob_spire_stabilizer_272619 : public GameObjectScript
{
    public:
        gob_spire_stabilizer_272619() : GameObjectScript("gob_spire_stabilizer_272619") { }

        struct gob_spire_stabilizer_272619AI : public GameObjectAI
        {
            gob_spire_stabilizer_272619AI(GameObject* go) : GameObjectAI(go) { }

            enum eKillcredits
            {
                Killcredit_SpireOfWoe_B_Destroyed = 125217,
                Killcredit_SpireOfWoe_C_Destroyed = 125219,
                Killcredit_SpireOfWoe_D_Destroyed = 125220,
                Killcredit_SpireOfWoe_E_Destroyed = 291439,
                Killcredit_SpireOfWoe_F_Destroyed = 291430
            };

            void OnLootStateChanged(uint32 p_State, Unit* p_Unit) override
            {
                if (p_State == 2)
                {
                    if (Player* l_Player = p_Unit->ToPlayer())
                    {
                        if (go->HasInPhaseList(9875))
                        {
                            l_Player->KilledMonsterCredit(eKillcredits::Killcredit_SpireOfWoe_B_Destroyed);
                        }
                        else if (go->HasInPhaseList(9915))
                        {
                            l_Player->KilledMonsterCredit(eKillcredits::Killcredit_SpireOfWoe_C_Destroyed);
                        }
                        else if (go->HasInPhaseList(9918))
                        {
                            l_Player->KilledMonsterCredit(eKillcredits::Killcredit_SpireOfWoe_D_Destroyed);
                        }
                        else if (go->HasInPhaseList(9894))
                        {
                            l_Player->KilledMonsterCredit(eKillcredits::Killcredit_SpireOfWoe_E_Destroyed);
                        }
                        else if (go->HasInPhaseList(9914))
                        {
                            l_Player->KilledMonsterCredit(eKillcredits::Killcredit_SpireOfWoe_F_Destroyed);
                        }

                        go->AddToHideList(p_Unit->GetGUID(), 360000);
                    }
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_spire_stabilizer_272619AI(go);
        }
};

/// Ancient Pylon - 268745
class gob_ancient_pylon_268745 : public GameObjectScript
{
    public:
        gob_ancient_pylon_268745() : GameObjectScript("gob_ancient_pylon_268745") { }

        struct gob_ancient_pylon_268745AI : public GameObjectAI
        {
            gob_ancient_pylon_268745AI(GameObject* go) : GameObjectAI(go) { }

            enum eQuests
            {
                Quest_DefenselessAndAfraid = 46818
            };

            enum eItems
            {
                Item_StolenPylonCore = 152408
            };

            void OnBuildDynFlags(uint16& p_DynFlags, Player* p_Player) override
            {
                if (!p_Player->HasItemCount(eItems::Item_StolenPylonCore))
                {
                    p_DynFlags = GO_DYNFLAG_LO_NO_INTERACT;
                }
            }

            void OnLootStateChanged(uint32 p_State, Unit* p_Unit) override
            {
                if (p_State == 2 && p_Unit->ToPlayer())
                {
                    go->DestroyForPlayer(p_Unit->ToPlayer());

                    if (GameObject* l_Gob = p_Unit->SummonGameObject(go->GetEntry(), go->GetPosition(), 0, 0, p_Unit->GetGUID()))
                    {
                        l_Gob->SetOwnerGUID(p_Unit->GetGUID());
                        l_Gob->SetFlag(GAMEOBJECT_FIELD_FLAGS, 20);
                        l_Gob->SetGoState(GOState::GO_STATE_ACTIVE);
                        p_Unit->ToPlayer()->DestroyItemCount(eItems::Item_StolenPylonCore, 1, true);
                    }
                }
            }

            void UpdateAI(uint32 p_Diff) override
            {
                if (Player* l_Player = ObjectAccessor::GetPlayer(*go, go->GetOwnerGUID()))
                {
                    if (l_Player->GetQuestStatus(eQuests::Quest_DefenselessAndAfraid) == QUEST_STATUS_COMPLETE ||
                        !l_Player->IsInWorld())
                    {
                        go->Delete();
                    }
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_ancient_pylon_268745AI(go);
        }
};

/// Argunite Matrix - 268760
class gob_argunite_matrix_268760 : public GameObjectScript
{
    public:
        gob_argunite_matrix_268760() : GameObjectScript("gob_argunite_matrix_268760") { }

        struct gob_argunite_matrix_268760AI : public GameObjectAI
        {
            gob_argunite_matrix_268760AI(GameObject* go) : GameObjectAI(go) { }

            G3D::Vector3 const Path_BunnyFirst[10] =
            {
                { 4888.889f, 9821.978f, -88.55353f },
                { 4897.604f, 9822.286f, -88.59631f },
                { 4908.693f, 9822.954f, -82.47685f },
                { 4912.693f, 9822.454f, -79.72685f },
                { 4917.783f, 9822.122f, -76.85739f },
                { 4953.643f, 9821.718f, -76.94072f },
                { 4987.292f, 9807.027f, -78.19628f },
                { 4999.268f, 9799.766f, -77.14563f },
                { 5021.282f, 9781.182f, -76.42351f },
                { 5028.842f, 9774.598f, -76.68848f }
            };

            G3D::Vector3 const Path_BunnySecond[10] =
            {
                { 4888.732f, 9823.652f, -88.79141f },
                { 4897.29f, 9823.971f, -88.57209f },
                { 4908.33f, 9824.695f, -82.54906f },
                { 4915.33f, 9824.195f, -78.04906f },
                { 4916.33f, 9823.945f, -77.54906f },
                { 4917.37f, 9823.919f, -77.02602f },
                { 4953.307f, 9823.688f, -76.89999f },
                { 4973.627f, 9823.551f, -78.19628f },
                { 5014.188f, 9822.86f, -76.84715f },
                { 5047.969f, 9823.677f, -76.79626f }
            };

            G3D::Vector3 const Path_BunnyThird[11] =
            {
                { 4888.811f, 9825.912f, -88.54922f },
                { 4897.446f, 9825.768f, -88.5877f },
                { 4908.536f, 9826.384f, -82.50458f },
                { 4911.286f, 9826.134f, -80.50458f },
                { 4913.286f, 9825.884f, -79.25458f },
                { 4915.286f, 9825.634f, -77.75458f },
                { 4917.626f, 9825.5f, -76.92146f },
                { 4953.51f, 9824.999f, -76.87299f },
                { 4976.253f, 9838.496f, -78.19628f },
                { 4996.183f, 9850.609f, -76.81253f },
                { 5026.846f, 9869.633f, -75.42628f }
            };

            enum eActions
            {
                Action_MatrixSummoned = 1
            };

            enum eEvents
            {
                Event_SummonMoveBunnys = 1,
                Event_Killcredit = 2
            };

            enum eNpcs
            {
                Npc_FxStalker = 120693
            };

            enum eSpells
            {
                Spell_MatrixFireUp = 250430,
                Spell_MatrixBunny = 250431
            };

            enum ePoints
            {
                Point_BunnyPathEnd = 1
            };

            enum eQuests
            {
                Quest_ConsecratingGround = 47066
            };

            enum eKillcredits
            {
                Killcredit_MatrixActivated = 289937
            };

            EventMap m_Events;
            Position const m_FirstBunnySpawnPos = { 4880.174f, 9822.169f, -90.01073f };
            Position const m_SecondBunnySpawnPos = { 4880.174f, 9823.334f, -90.01073f };
            Position const m_ThirdBunnySpawnPos = { 4880.174f, 9824.558f, -90.01073f };
            Position const m_VisualBunnySpawnPos = { 4879.806f, 9823.274f, -90.01354f };

            void InitializeAI() override
            {
                if (go->HasInPhaseList(9242))
                {
                    go->SetUInt32Value(GAMEOBJECT_FIELD_STATE_ANIM_KIT_ID, 13014);
                }
                else if (go->HasInPhaseList(8654))
                {
                    go->SetUInt32Value(GAMEOBJECT_FIELD_STATE_ANIM_KIT_ID, 8859);
                    go->SetFlag(GAMEOBJECT_FIELD_FLAGS, 20);
                }
            }

            void OnLootStateChanged(uint32 p_State, Unit* p_Unit) override
            {
                if (p_State == 2 && p_Unit->ToPlayer())
                {
                    go->DestroyForPlayer(p_Unit->ToPlayer());

                    if (GameObject* l_Gob = p_Unit->SummonGameObject(go->GetEntry(), go->GetPosition(), 0, 0, p_Unit->GetGUID()))
                    {
                        if (Creature* l_Creature = p_Unit->SummonCreature(eNpcs::Npc_FxStalker, m_VisualBunnySpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Unit->GetGUID()))
                        {
                            l_Creature->CastSpell(l_Creature, eSpells::Spell_MatrixFireUp, true);
                            l_Creature->DespawnOrUnsummon(5000);
                        }

                        l_Gob->SetOwnerGUID(p_Unit->GetGUID());
                        l_Gob->SetUInt32Value(GAMEOBJECT_FIELD_STATE_ANIM_KIT_ID, 13013);
                        l_Gob->SetGoState(GOState::GO_STATE_ACTIVE);
                        l_Gob->SetFlag(GAMEOBJECT_FIELD_FLAGS, 20);
                        l_Gob->AI()->DoAction(eActions::Action_MatrixSummoned);
                    }
                }
            }

            void DoAction(int32 const p_Action) override
            {
                switch (p_Action)
                {
                case eActions::Action_MatrixSummoned:
                {
                    m_Events.ScheduleEvent(eEvents::Event_SummonMoveBunnys, 5000);
                    m_Events.ScheduleEvent(eEvents::Event_Killcredit, 6000);
                    break;
                }
                default:
                    break;
                }
            }

            void UpdateAI(uint32 p_Diff) override
            {
                m_Events.Update(p_Diff);

                switch (m_Events.ExecuteEvent())
                {
                case eEvents::Event_SummonMoveBunnys:
                {
                    if (Player* l_Player = ObjectAccessor::GetPlayer(*go, go->GetOwnerGUID()))
                    {
                        if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_FxStalker, m_FirstBunnySpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                        {
                            l_Creature->SetSpeed(MOVE_FLIGHT, 2.0f);
                            l_Creature->CastSpell(l_Creature, eSpells::Spell_MatrixBunny, true);
                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_BunnyPathEnd, Path_BunnyFirst, 10, false);
                        }

                        if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_FxStalker, m_SecondBunnySpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                        {
                            l_Creature->SetSpeed(MOVE_FLIGHT, 2.0f);
                            l_Creature->CastSpell(l_Creature, eSpells::Spell_MatrixBunny, true);
                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_BunnyPathEnd, Path_BunnySecond, 10, false);
                        }

                        if (Creature* l_Creature = l_Player->SummonCreature(eNpcs::Npc_FxStalker, m_ThirdBunnySpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                        {
                            l_Creature->SetSpeed(MOVE_FLIGHT, 2.0f);
                            l_Creature->CastSpell(l_Creature, eSpells::Spell_MatrixBunny, true);
                            l_Creature->GetMotionMaster()->MoveSmoothPath(ePoints::Point_BunnyPathEnd, Path_BunnyThird, 11, false);
                        }
                    }

                    break;
                }
                case eEvents::Event_Killcredit:
                {
                    if (Player* l_Player = ObjectAccessor::GetPlayer(*go, go->GetOwnerGUID()))
                    {
                        l_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_MatrixActivated);
                    }

                    go->Delete();
                    break;
                }
                default:
                    break;
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_argunite_matrix_268760AI(go);
        }
};

/// Sigil of Awakening - 272692
class gob_sigil_of_awakening_272692 : public GameObjectScript
{
    public:
        gob_sigil_of_awakening_272692() : GameObjectScript("gob_sigil_of_awakening_272692") { }

        struct gob_sigil_of_awakening_272692AI : public GameObjectAI
        {
            gob_sigil_of_awakening_272692AI(GameObject* go) : GameObjectAI(go) { }

            void InitializeAI() override
            {
                if (go->HasInPhaseList(9026))
                {
                    go->SetUInt32Value(GAMEOBJECT_FIELD_STATE_SPELL_VISUAL_ID, 37794);
                }
                else if (go->HasInPhaseList(9268))
                {
                    go->SetGoState(GOState::GO_STATE_ACTIVE);
                    go->SetFlag(GAMEOBJECT_FIELD_FLAGS, 20);
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_sigil_of_awakening_272692AI(go);
        }
};

/// Legion Portal - 275108
class gob_legion_portal_275108 : public GameObjectScript
{
    public:
        gob_legion_portal_275108() : GameObjectScript("gob_legion_portal_275108") { }

        struct gob_legion_portal_275108AI : public GameObjectAI
        {
            gob_legion_portal_275108AI(GameObject* go) : GameObjectAI(go) { }

            enum eNpcs
            {
                Npc_LegionPortal = 127271
            };

            enum eKillcredits
            {
                Killcredit_LegionPortalsClosed = 125128
            };

            void OnLootStateChanged(uint32 p_State, Unit* p_Unit) override
            {
                if (p_State == 2 && p_Unit->ToPlayer())
                {
                    p_Unit->ToPlayer()->KilledMonsterCredit(eKillcredits::Killcredit_LegionPortalsClosed);
                    go->AddToHideList(p_Unit->GetGUID(), 360000);
                    go->DestroyForPlayer(p_Unit->ToPlayer());

                    if (Creature* l_Creature = p_Unit->FindNearestCreature(eNpcs::Npc_LegionPortal, 10.0f, true))
                    {
                        l_Creature->AddToHideList(p_Unit->GetGUID(), 360000);
                        l_Creature->DestroyForPlayer(p_Unit->ToPlayer());
                    }

                    if (GameObject* l_Gob = p_Unit->SummonGameObject(go->GetEntry(), go->GetPosition(), 0, 0, p_Unit->GetGUID()))
                    {
                        l_Gob->SetFlag(GAMEOBJECT_FIELD_FLAGS, 20);

                        l_Gob->AddDelayedEvent([l_Gob]() -> void
                        {
                            l_Gob->Delete();
                        }, 360000);
                    }
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_legion_portal_275108AI(go);
        }
};

/// Frantic Wall Scrawling - 271100
class gob_frantic_wall_scrawling_271100 : public GameObjectScript
{
    public:
        gob_frantic_wall_scrawling_271100() : GameObjectScript("gob_frantic_wall_scrawling_271100") { }

        struct gob_frantic_wall_scrawling_271100AI : public GameObjectAI
        {
            gob_frantic_wall_scrawling_271100AI(GameObject* go) : GameObjectAI(go) { }

            enum eNpcs
            {
                Npc_EchoOfArkhaan = 121538,
                Npc_HopelessEcho = 126382
            };

            enum ePoints
            {
                Point_ArkhaanMoveEnd = 1
            };

            enum eObjectives
            {
                Obj_WallScrawlingsInspected = 292305
            };

            Position const m_EchoOfArkhaanSpawnPos = { 5177.874f, 9979.77f, -91.04076f, 2.104622f };
            Position const m_FirstHopelessEchoSpawnPos = { 5177.909f, 9983.369f, -91.34322f, 4.822932f };
            Position const m_SecondHopelessEchoSpawnPos = { 5175.375f, 9983.896f, -91.40933f, 5.172915f };
            Position const m_ThirdHopelessEchoSpawnPos = { 5173.721f, 9980.622f, -91.23189f, 5.72154f };

            void OnLootStateChanged(uint32 p_State, Unit* p_Unit) override
            {
                if (p_State == 2)
                {
                    if (Player* l_Player = p_Unit->ToPlayer())
                    {
                        if (l_Player->GetQuestObjectiveCounter(eObjectives::Obj_WallScrawlingsInspected) == 0)
                        {
                            if (Creature* l_Arkhaan = l_Player->SummonCreature(eNpcs::Npc_EchoOfArkhaan, m_EchoOfArkhaanSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                uint64 l_PlayerGuid = l_Player->GetGUID();

                                l_Arkhaan->AddDelayedEvent([l_Arkhaan, l_PlayerGuid]() -> void
                                {
                                    if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Arkhaan, l_PlayerGuid))
                                        l_Arkhaan->AI()->Talk(0, l_PlayerGuid);
                                }, 1000);

                                l_Arkhaan->AddDelayedEvent([l_Arkhaan]() -> void
                                {
                                    l_Arkhaan->SetWalk(true);
                                    l_Arkhaan->GetMotionMaster()->MovePoint(ePoints::Point_ArkhaanMoveEnd, 5181.25f, 9974.12f, -91.20016f);
                                }, 2000);

                                l_Arkhaan->AddDelayedEvent([l_Arkhaan]() -> void
                                {
                                    l_Arkhaan->HandleEmoteCommand(EMOTE_ONESHOT_SPELL_CAST_OMNI);
                                }, 7000);

                                l_Arkhaan->AddDelayedEvent([l_Arkhaan, l_PlayerGuid]() -> void
                                {
                                    l_Arkhaan->SetFacingTo(2.042035f);

                                    if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Arkhaan, l_PlayerGuid))
                                        l_Arkhaan->AI()->Talk(1, l_PlayerGuid);
                                }, 11000);

                                l_Arkhaan->AddDelayedEvent([l_Arkhaan]() -> void
                                {
                                    l_Arkhaan->GetMotionMaster()->MovePoint(ePoints::Point_ArkhaanMoveEnd, 5178.98f, 9978.575f, -91.03213f);
                                    l_Arkhaan->DespawnOrUnsummon(1000);
                                }, 18000);
                            }

                            if (Creature* l_FirstHopelessEcho = l_Player->SummonCreature(eNpcs::Npc_HopelessEcho, m_FirstHopelessEchoSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                l_FirstHopelessEcho->SetUInt32Value(UNIT_FIELD_BYTES_1, 8);
                                l_FirstHopelessEcho->DespawnOrUnsummon(19000);
                            }

                            if (Creature* l_SecondHopelessEcho = l_Player->SummonCreature(eNpcs::Npc_HopelessEcho, m_SecondHopelessEchoSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                l_SecondHopelessEcho->DespawnOrUnsummon(19000);

                                l_SecondHopelessEcho->AddDelayedEvent([l_SecondHopelessEcho]() -> void
                                {
                                    l_SecondHopelessEcho->HandleEmoteCommand(EMOTE_ONESHOT_CRY);
                                }, 4000);

                                l_SecondHopelessEcho->AddDelayedEvent([l_SecondHopelessEcho]() -> void
                                {
                                    l_SecondHopelessEcho->HandleEmoteCommand(EMOTE_ONESHOT_CRY);
                                }, 10000);

                                l_SecondHopelessEcho->AddDelayedEvent([l_SecondHopelessEcho]() -> void
                                {
                                    l_SecondHopelessEcho->HandleEmoteCommand(EMOTE_ONESHOT_CRY);
                                }, 12000);
                            }

                            if (Creature* l_ThirdHopelessEcho = l_Player->SummonCreature(eNpcs::Npc_HopelessEcho, m_ThirdHopelessEchoSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                l_ThirdHopelessEcho->SetUInt32Value(UNIT_FIELD_BYTES_1, 1);
                                l_ThirdHopelessEcho->DespawnOrUnsummon(19000);
                            }
                        }
                    }
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_frantic_wall_scrawling_271100AI(go);
        }
};

/// Abandoned Altar - 271097
class gob_abandoned_altar_271097 : public GameObjectScript
{
    public:
        gob_abandoned_altar_271097() : GameObjectScript("gob_abandoned_altar_271097") { }

        struct gob_abandoned_altar_271097AI : public GameObjectAI
        {
            gob_abandoned_altar_271097AI(GameObject* go) : GameObjectAI(go) { }

            enum eNpcs
            {
                Npc_EchoOfArkhaan = 121538,
                Npc_HopelessEcho = 126382
            };

            enum eObjectives
            {
                Obj_AbandonedAltarInspected = 290493
            };

            Position const m_EchoOfArkhaanSpawnPos = { 5053.571f, 10032.61f, -84.12098f, 0.2458662f };
            Position const m_FirstHopelessEchoSpawnPos = { 5060.363f, 10033.37f, -84.81707f, 3.289991f };
            Position const m_SecondHopelessEchoSpawnPos = { 5061.524f, 10036.21f, -84.61334f, 3.569282f };

            void OnLootStateChanged(uint32 p_State, Unit* p_Unit) override
            {
                if (p_State == 2)
                {
                    if (Player* l_Player = p_Unit->ToPlayer())
                    {
                        if (l_Player->GetQuestObjectiveCounter(eObjectives::Obj_AbandonedAltarInspected) == 0)
                        {
                            if (Creature* l_Arkhaan = l_Player->SummonCreature(eNpcs::Npc_EchoOfArkhaan, m_EchoOfArkhaanSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                uint64 l_PlayerGuid = l_Player->GetGUID();

                                l_Arkhaan->DespawnOrUnsummon(11000);

                                l_Arkhaan->AddDelayedEvent([l_Arkhaan, l_PlayerGuid]() -> void
                                {
                                    if (Player* l_Pl = ObjectAccessor::GetPlayer(*l_Arkhaan, l_PlayerGuid))
                                        l_Arkhaan->AI()->Talk(2, l_PlayerGuid);
                                }, 2000);
                            }

                            if (Creature* l_FirstHopelessEcho = l_Player->SummonCreature(eNpcs::Npc_HopelessEcho, m_FirstHopelessEchoSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                l_FirstHopelessEcho->DespawnOrUnsummon(11000);

                                l_FirstHopelessEcho->AddDelayedEvent([l_FirstHopelessEcho]() -> void
                                {
                                    l_FirstHopelessEcho->HandleEmoteCommand(EMOTE_ONESHOT_CRY);
                                }, 4000);

                                l_FirstHopelessEcho->AddDelayedEvent([l_FirstHopelessEcho]() -> void
                                {
                                    l_FirstHopelessEcho->HandleEmoteCommand(EMOTE_ONESHOT_CRY);
                                }, 10000);
                            }

                            if (Creature* l_SecondHopelessEcho = l_Player->SummonCreature(eNpcs::Npc_HopelessEcho, m_SecondHopelessEchoSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                l_SecondHopelessEcho->DespawnOrUnsummon(11000);

                                l_SecondHopelessEcho->AddDelayedEvent([l_SecondHopelessEcho]() -> void
                                {
                                    l_SecondHopelessEcho->HandleEmoteCommand(EMOTE_ONESHOT_CRY);
                                }, 2000);

                                l_SecondHopelessEcho->AddDelayedEvent([l_SecondHopelessEcho]() -> void
                                {
                                    l_SecondHopelessEcho->HandleEmoteCommand(EMOTE_ONESHOT_TALK_EXCLAMATION);
                                }, 8000);
                            }
                        }
                    }
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_abandoned_altar_271097AI(go);
        }
};

/// Discarded Naaru Figurine - 271098
class gob_discarded_naaru_figurine_271098 : public GameObjectScript
{
    public:
        gob_discarded_naaru_figurine_271098() : GameObjectScript("gob_discarded_naaru_figurine_271098") { }

        struct gob_discarded_naaru_figurine_271098AI : public GameObjectAI
        {
            gob_discarded_naaru_figurine_271098AI(GameObject* go) : GameObjectAI(go) { }

            enum eNpcs
            {
                Npc_EchoOfArkhaan = 121538,
                Npc_HopelessEcho = 126382
            };

            enum eObjectives
            {
                Obj_NaaruFigurineInspected = 290491
            };

            Position const m_EchoOfArkhaanSpawnPos = { 5296.937f, 9992.643f, -92.70403f, 4.066505f };
            Position const m_FirstHopelessEchoSpawnPos = { 5293.516f, 9988.677f, -92.78737f, 0.8127584f };
            Position const m_SecondHopelessEchoSpawnPos = { 5294.694f, 9986.045f, -92.76399f, 0.9662811f };
            Position const m_ThirdHopelessEchoSpawnPos = { 5297.042f, 9987.602f, -92.85601f, 1.394546f };

            void OnLootStateChanged(uint32 p_State, Unit* p_Unit) override
            {
                if (p_State == 2)
                {
                    if (Player* l_Player = p_Unit->ToPlayer())
                    {
                        if (l_Player->GetQuestObjectiveCounter(eObjectives::Obj_NaaruFigurineInspected) == 0)
                        {
                            if (Creature* l_Arkhaan = l_Player->SummonCreature(eNpcs::Npc_EchoOfArkhaan, m_EchoOfArkhaanSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                l_Arkhaan->DespawnOrUnsummon(21000);

                                uint64 l_PlayerGUID = l_Player->GetGUID();
                                l_Arkhaan->AddDelayedEvent([l_Arkhaan, l_PlayerGUID]() -> void
                                {
                                    l_Arkhaan->AI()->Talk(3, l_PlayerGUID);
                                }, 1000);

                                l_Arkhaan->AddDelayedEvent([l_Arkhaan, l_PlayerGUID]() -> void
                                {
                                    l_Arkhaan->AI()->Talk(4, l_PlayerGUID);
                                }, 12000);
                            }

                            if (Creature* l_FirstHopelessEcho = l_Player->SummonCreature(eNpcs::Npc_HopelessEcho, m_FirstHopelessEchoSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                l_FirstHopelessEcho->SetUInt32Value(UNIT_FIELD_BYTES_1, 1);
                                l_FirstHopelessEcho->DespawnOrUnsummon(21000);
                            }

                            if (Creature* l_SecondHopelessEcho = l_Player->SummonCreature(eNpcs::Npc_HopelessEcho, m_SecondHopelessEchoSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                l_SecondHopelessEcho->SetUInt32Value(UNIT_FIELD_BYTES_1, 1);
                                l_SecondHopelessEcho->DespawnOrUnsummon(21000);
                            }

                            if (Creature* l_ThirdHopelessEcho = l_Player->SummonCreature(eNpcs::Npc_HopelessEcho, m_ThirdHopelessEchoSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                            {
                                l_ThirdHopelessEcho->SetUInt32Value(UNIT_FIELD_BYTES_1, 1);
                                l_ThirdHopelessEcho->DespawnOrUnsummon(21000);
                            }
                        }
                    }
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_discarded_naaru_figurine_271098AI(go);
        }
};

/// Sacred Stone - 268767
class gob_sacred_stone_268767 : public GameObjectScript
{
    public:
        gob_sacred_stone_268767() : GameObjectScript("gob_sacred_stone_268767") { }

        struct gob_sacred_stone_268767AI : public GameObjectAI
        {
            gob_sacred_stone_268767AI(GameObject* go) : GameObjectAI(go) { }

            enum eSpells
            {
                Spell_WitnessingAggramarRise = 255198
            };

            bool GossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 p_Action) override
            {
                p_Player->PlayerTalkClass->SendCloseGossip();

                switch (p_Action)
                {
                case 0:
                {
                    p_Player->CastSpell(p_Player, eSpells::Spell_WitnessingAggramarRise, true);
                    break;
                }
                case 1:
                {
                    p_Player->PlayScene(1879, p_Player);
                    break;
                }
                case 2:
                {
                    p_Player->PlayScene(1880, p_Player);
                    break;
                }
                case 3:
                {
                    p_Player->PlayScene(1878, p_Player);
                    break;
                }
                case 4:
                {
                    p_Player->PlayScene(1879, p_Player);
                    break;
                }
                case 5:
                {
                    p_Player->PlayScene(1880, p_Player);
                    break;
                }
                default:
                    break;
                }

                return true;
            }

        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_sacred_stone_268767AI(go);
        }
};

/// Vindicaar Beacon - 276199
class gob_vindicaar_beacon_276199 : public GameObjectScript
{
    public:
        gob_vindicaar_beacon_276199() : GameObjectScript("gob_vindicaar_beacon_276199") { }

        struct gob_vindicaar_beacon_276199AI : public GameObjectAI
        {
            gob_vindicaar_beacon_276199AI(GameObject* go) : GameObjectAI(go) { }

            enum eNpcs
            {
                Npc_Beacon = 126951
            };

            enum eKillcredits
            {
                Killcredit_BeaconPlaced = 2927570
            };

            Position const m_BeaconSpawnPos = { 5417.008f, 10013.32f, -81.75384f, 6.105673f };

            void OnLootStateChanged(uint32 p_State, Unit* p_Unit) override
            {
                if (p_State == 2 && p_Unit->ToPlayer())
                {
                    if (Creature* l_Creature = p_Unit->SummonCreature(eNpcs::Npc_Beacon, m_BeaconSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Unit->GetGUID()))
                    {
                        l_Creature->SetUInt32Value(UNIT_FIELD_STATE_ANIM_KIT_ID, 12994);
                        l_Creature->DespawnOrUnsummon(4000);
                    }

                    p_Unit->AddDelayedEvent([p_Unit]() -> void
                    {
                        p_Unit->ToPlayer()->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_BeaconPlaced);
                    }, 4000);
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_vindicaar_beacon_276199AI(go);
        }
};

/// Netherlight Crucible - 273271
class gob_netherlight_crucible_273271 : public GameObjectScript
{
    public:
        gob_netherlight_crucible_273271() : GameObjectScript("gob_netherlight_crucible_273271") { }

        struct gob_netherlight_crucible_273271AI : public GameObjectAI
        {
            gob_netherlight_crucible_273271AI(GameObject* go) : GameObjectAI(go) { }

            enum eQuests
            {
                Quest_TheNetherlightCrucible = 49224
            };

            enum eAchievements
            {
                Achievement_Netherlight = 12072
            };

            void OnBuildDynFlags(uint16& p_DynFlags, Player* p_Player) override
            {
                if ((!p_Player->HasQuest(eQuests::Quest_TheNetherlightCrucible) &&
                    !p_Player->IsQuestRewarded(eQuests::Quest_TheNetherlightCrucible))
                    && !p_Player->HasAchieved(eAchievements::Achievement_Netherlight))
                {
                    p_DynFlags = GO_DYNFLAG_LO_NO_INTERACT;
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_netherlight_crucible_273271AI(go);
        }
};

/// Crest of Knowledge - 273716
class gob_crest_of_knowledge_273716 : public GameObjectScript
{
    public:
        gob_crest_of_knowledge_273716() : GameObjectScript("gob_crest_of_knowledge_273716") { }

        struct gob_crest_of_knowledge_273716AI : public GameObjectAI
        {
            gob_crest_of_knowledge_273716AI(GameObject* go) : GameObjectAI(go) { }

            void InitializeAI() override
            {
                if (go->HasInPhaseList(4765400))
                {
                    go->SetUInt32Value(GAMEOBJECT_FIELD_STATE_SPELL_VISUAL_ID, 37794);
                }
                else if (go->HasInPhaseList(4765401))
                {
                    go->SetGoState(GOState::GO_STATE_ACTIVE);
                    go->SetFlag(GAMEOBJECT_FIELD_FLAGS, 20);
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_crest_of_knowledge_273716AI(go);
        }
};

/// Vindicaar
class gob_the_vindicaar : public GameObjectScript
{
    public:
        gob_the_vindicaar() : GameObjectScript("gob_the_vindicaar") { }

        struct gob_the_vindicaarAI : public GameObjectAI
        {
            gob_the_vindicaarAI(GameObject* go) : GameObjectAI(go) { }

            enum eQuests
            {
                Quest_TheCrestOfKnowledge = 47654
            };

            void OnBuildDisplayId(uint32& p_DisplayId, Player* p_Player) override
            {
                if (p_Player->GetQuestStatus(eQuests::Quest_TheCrestOfKnowledge) == QUEST_STATUS_COMPLETE ||
                    p_Player->IsQuestRewarded(eQuests::Quest_TheCrestOfKnowledge))
                {
                    p_DisplayId = 41743;
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_the_vindicaarAI(go);
        }
};

/// Gilded Triumvirate Chest - 272918
class gob_gilded_triumvirate_chest_272918 : public GameObjectScript
{
    public:
        gob_gilded_triumvirate_chest_272918() : GameObjectScript("gob_gilded_triumvirate_chest_272918") { }

        struct gob_gilded_triumvirate_chest_272918AI : public GameObjectAI
        {
            gob_gilded_triumvirate_chest_272918AI(GameObject* go) : GameObjectAI(go) { }

            enum eObjectives
            {
                Obj_SecureTheArmory = 291711
            };

            void OnBuildDynFlags(uint16& p_DynFlags, Player* p_Player) override
            {
                if (!p_Player->GetQuestObjectiveCounter(eObjectives::Obj_SecureTheArmory))
                {
                    p_DynFlags = GO_DYNFLAG_LO_NO_INTERACT;
                }
            }
        };

        GameObjectAI* GetAI(GameObject* go) const override
        {
            return new gob_gilded_triumvirate_chest_272918AI(go);
        }
};

/// Holy Dissolve Out - 105616
class spell_gen_holy_dissolve_out : public SpellScriptLoader
{
    public:
        spell_gen_holy_dissolve_out() : SpellScriptLoader("spell_gen_holy_dissolve_out") { }

        class spell_gen_holy_dissolve_out_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_holy_dissolve_out_SpellScript);

            void HandleAfterCast()
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster || !l_Caster->ToCreature())
                    return;

                l_Caster->SendPlaySpellVisualKit(85644, 0, 0);
                l_Caster->ToCreature()->DespawnOrUnsummon();
            }

            void Register() override
            {
                AfterCast += SpellCastFn(spell_gen_holy_dissolve_out_SpellScript::HandleAfterCast);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_holy_dissolve_out_SpellScript();
        }
};

/// Set Health - 244971, 244972
class spell_gen_set_health : public SpellScriptLoader
{
    public:
        spell_gen_set_health() : SpellScriptLoader("spell_gen_set_health") { }

        class spell_gen_set_health_AuraScript : public AuraScript
        {
            PrepareAuraScript(spell_gen_set_health_AuraScript);

            enum eSpells
            {
                Spell_SetHealth_15_55 = 244971,
                Spell_SetHealth_65_85 = 244972
            };

            void HandleAfterApply(AuraEffect const* /* p_AuraEffect */, AuraEffectHandleModes /* p_Mode */)
            {
                Unit* l_Target = GetTarget();
                if (!l_Target || !l_Target->ToCreature())
                    return;

                switch (m_scriptSpellId)
                {
                case eSpells::Spell_SetHealth_15_55:
                {
                    l_Target->DisableHealthRegen();
                    l_Target->SetHealth(CalculatePct(l_Target->GetMaxHealth(), urand(15, 55)));
                    break;
                }
                case eSpells::Spell_SetHealth_65_85:
                {
                    l_Target->DisableHealthRegen();
                    l_Target->SetHealth(CalculatePct(l_Target->GetMaxHealth(), urand(65, 85)));
                    break;
                }
                default:
                    break;
                }
            }

            void Register() override
            {
                AfterEffectApply += AuraEffectApplyFn(spell_gen_set_health_AuraScript::HandleAfterApply, EFFECT_1, SPELL_AURA_INTERRUPT_REGEN, AURA_EFFECT_HANDLE_REAL);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_gen_set_health_AuraScript();
        }
};

/// Reckless Stomp - 250863
class spell_gen_reckless_stomp : public SpellScriptLoader
{
    public:
        spell_gen_reckless_stomp() : SpellScriptLoader("spell_gen_reckless_stomp") { }

        class spell_gen_reckless_stomp_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_reckless_stomp_SpellScript);

            enum eSpells
            {
                Spell_RecklessStompWave = 250868
            };

            void HandleAfterCast()
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster || !l_Caster->ToCreature())
                    return;

                for (uint8 l_Itr = 0; l_Itr < 30; l_Itr++)
                {
                    l_Caster->CastSpell(l_Caster, eSpells::Spell_RecklessStompWave, false);
                }
            }

            void Register() override
            {
                AfterCast += SpellCastFn(spell_gen_reckless_stomp_SpellScript::HandleAfterCast);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_reckless_stomp_SpellScript();
        }
};

/// Felshock Bombardment - 250880
class spell_gen_felshock_bombardment : public SpellScriptLoader
{
    public:
        spell_gen_felshock_bombardment() : SpellScriptLoader("spell_gen_felshock_bombardment") { }

        class spell_gen_felshock_bombardment_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_felshock_bombardment_SpellScript);

            enum eSpells
            {
                Spell_FelshockBombardmentVisual = 250887
            };

            void HandleAfterCast()
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster || !l_Caster->ToCreature())
                    return;

                l_Caster->CastSpell(l_Caster, eSpells::Spell_FelshockBombardmentVisual, true);
            }

            void Register() override
            {
                AfterCast += SpellCastFn(spell_gen_felshock_bombardment_SpellScript::HandleAfterCast);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_felshock_bombardment_SpellScript();
        }
};

/// Crystal Activating - 240423
class spell_gen_crystal_activating : public SpellScriptLoader
{
    public:
        spell_gen_crystal_activating() : SpellScriptLoader("spell_gen_crystal_activating") { }

        class spell_gen_crystal_activating_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_crystal_activating_SpellScript);

            enum eNpcs
            {
                Npc_GenericBunny = 54638,
                Npc_SignalCrystal = 123344
            };

            enum eSpells
            {
                Spell_HolyDissolveOut = 105616
            };

            enum eActions
            {
                Action_BunnyStartEvent = 4
            };

            Position const m_GenericBunnySpawnPos = { 985.7344f, 1711.802f, 515.8705f, 4.865082f };
            Position const m_SignalCrystalSpawnPos = { 985.7344f, 1711.802f, 517.9254f, 4.865082f };

            void HandleAfterCast()
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                if (Creature* l_Creature = l_Caster->SummonCreature(eNpcs::Npc_GenericBunny, m_GenericBunnySpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Caster->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_BunnyStartEvent);
                }

                if (Creature* l_Creature = l_Caster->SummonCreature(eNpcs::Npc_SignalCrystal, m_SignalCrystalSpawnPos, TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 7000, 0, l_Caster->GetGUID()))
                {
                    l_Creature->CastSpell(l_Creature, eSpells::Spell_HolyDissolveOut, true);
                }
            }

            void Register() override
            {
                AfterCast += SpellCastFn(spell_gen_crystal_activating_SpellScript::HandleAfterCast);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_crystal_activating_SpellScript();
        }
};

/// Glaive Blast - 240958
class spell_gen_glaive_blast : public SpellScriptLoader
{
    public:
        spell_gen_glaive_blast() : SpellScriptLoader("spell_gen_glaive_blast") { }

        class spell_gen_glaive_blast_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_glaive_blast_SpellScript);

            enum eSpells
            {
                Spell_PermanentFeignDeath = 186571
            };

            enum eNpcs
            {
                Npc_DarkfallenSlave = 120915
            };

            void FilterTargets(std::list<WorldObject*>& p_Targets)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster || p_Targets.empty())
                    return;

                p_Targets.remove_if([l_Caster](WorldObject* p_Target) -> bool
                {
                    if (Unit* l_Target = p_Target->ToUnit())
                    {
                        if (TempSummon* l_Creature = l_Caster->ToTempSummon())
                        {
                            if (TempSummon* l_Ts = l_Target->ToTempSummon())
                            {
                                if (l_Creature->GetSummonerGUID() == l_Ts->GetSummonerGUID())
                                {
                                    return false;
                                }
                            }
                        }
                    }

                    return true;
                });
            }

            void HandleHitTarget(SpellEffIndex /*p_EffectIndex*/)
            {
                Unit* l_Target = GetHitUnit();
                if (!l_Target || !l_Target->ToCreature() ||
                    l_Target->GetEntry() != eNpcs::Npc_DarkfallenSlave)
                    return;

                l_Target->CastSpell(l_Target, eSpells::Spell_PermanentFeignDeath, true);
                l_Target->ToCreature()->DespawnOrUnsummon(6000);
            }

            void Register() override
            {
                OnObjectAreaTargetSelect += SpellObjectAreaTargetSelectFn(spell_gen_glaive_blast_SpellScript::FilterTargets, EFFECT_0, TARGET_UNIT_DEST_AREA_ENTRY);
                OnEffectHitTarget += SpellEffectFn(spell_gen_glaive_blast_SpellScript::HandleHitTarget, EFFECT_0, SPELL_EFFECT_DUMMY);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_glaive_blast_SpellScript();
        }
};

/// Permanent Feign Death
class spell_gen_permanent_feign_death_argus : public SpellScriptLoader
{
    public:
        spell_gen_permanent_feign_death_argus() : SpellScriptLoader("spell_gen_permanent_feign_death_argus") { }

        class spell_gen_permanent_feign_death_argus_AuraScript : public AuraScript
        {
            PrepareAuraScript(spell_gen_permanent_feign_death_argus_AuraScript);

            void HandleAfterApply(AuraEffect const* /* p_AuraEffect */, AuraEffectHandleModes /* p_Mode */)
            {
                Unit* l_Target = GetTarget();
                if (!l_Target || !l_Target->ToCreature())
                    return;

                l_Target->SetFlag(UNIT_FIELD_FLAGS, 537166592);
                l_Target->SetFlag(UNIT_FIELD_FLAGS_2, 33554433);
                l_Target->SetFlag(UNIT_FIELD_FLAGS_3, 8192);
                l_Target->SetUInt32Value(UNIT_FIELD_BYTES_1, 262144);
                l_Target->SetUInt32Value(UNIT_FIELD_EMOTE_STATE, 0);
            }

            void Register() override
            {
                if (m_scriptSpellId == 114371)
                    AfterEffectApply += AuraEffectApplyFn(spell_gen_permanent_feign_death_argus_AuraScript::HandleAfterApply, EFFECT_0, SPELL_AURA_FEIGN_DEATH, AURA_EFFECT_HANDLE_REAL);
                else
                    AfterEffectApply += AuraEffectApplyFn(spell_gen_permanent_feign_death_argus_AuraScript::HandleAfterApply, EFFECT_0, SPELL_AURA_DUMMY, AURA_EFFECT_HANDLE_REAL);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_gen_permanent_feign_death_argus_AuraScript();
        }
};

/// Grip of the Pit King - 241185
class spell_gen_grip_of_the_pit_king : public SpellScriptLoader
{
    public:
        spell_gen_grip_of_the_pit_king() : SpellScriptLoader("spell_gen_grip_of_the_pit_king") { }

        class spell_gen_grip_of_the_pit_king_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_grip_of_the_pit_king_SpellScript);

            enum eSpells
            {
                Spell_GripOfThePitKingStun = 241194
            };

            void FilterTargets(std::list<WorldObject*>& p_Targets)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster || p_Targets.empty())
                    return;

                p_Targets.remove_if([l_Caster](WorldObject* p_Target) -> bool
                {
                    if (Unit* l_Target = p_Target->ToUnit())
                    {
                        if (TempSummon* l_Aggonar = l_Caster->ToTempSummon())
                        {
                            if (TempSummon* l_Ts = l_Target->ToTempSummon())
                            {
                                if (l_Aggonar->GetSummonerGUID() == l_Ts->GetSummonerGUID())
                                {
                                    return false;
                                }
                            }
                            else if (l_Target->IsPlayer() && l_Aggonar->GetSummonerGUID() == l_Target->GetGUID())
                            {
                                return false;
                            }
                        }
                    }

                    return true;
                });
            }

            void HandleHitTarget(SpellEffIndex /*p_EffectIndex*/)
            {
                Unit* l_Target = GetHitUnit();
                if (!l_Target)
                    return;

                l_Target->DelayedCastSpell(l_Target, eSpells::Spell_GripOfThePitKingStun, true, 1500);
            }

            void Register() override
            {
                OnObjectAreaTargetSelect += SpellObjectAreaTargetSelectFn(spell_gen_grip_of_the_pit_king_SpellScript::FilterTargets, EFFECT_0, TARGET_UNIT_SRC_AREA_ENEMY);
                OnObjectAreaTargetSelect += SpellObjectAreaTargetSelectFn(spell_gen_grip_of_the_pit_king_SpellScript::FilterTargets, EFFECT_1, TARGET_UNIT_SRC_AREA_ENTRY);
                OnEffectHitTarget += SpellEffectFn(spell_gen_grip_of_the_pit_king_SpellScript::HandleHitTarget, EFFECT_0, SPELL_EFFECT_KNOCK_BACK);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_grip_of_the_pit_king_SpellScript();
        }
};

/// Shadow Flurry - 241015
class spell_gen_shadow_flurry : public SpellScriptLoader
{
    public:
        spell_gen_shadow_flurry() : SpellScriptLoader("spell_gen_shadow_flurry") { }

        class spell_gen_shadow_flurry_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_shadow_flurry_SpellScript);

            enum eNpcs
            {
                Npc_BurningFiend = 120914
            };

            enum eSpells
            {
                Spell_Suicide = 45254
            };

            void HandleHitTarget(SpellEffIndex /*p_EffectIndex*/)
            {
                Unit* l_Target = GetHitUnit();
                if (!l_Target || !l_Target->ToCreature())
                    return;

                if (l_Target->GetEntry() == eNpcs::Npc_BurningFiend)
                {
                    l_Target->CastSpell(l_Target, eSpells::Spell_Suicide, true);
                }
            }

            void Register() override
            {
                OnEffectHitTarget += SpellEffectFn(spell_gen_shadow_flurry_SpellScript::HandleHitTarget, EFFECT_0, SPELL_EFFECT_DUMMY);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_shadow_flurry_SpellScript();
        }
};

/// Unstable Fel Crystal - 251225
class spell_gen_unstable_fel_crystal : public SpellScriptLoader
{
    public:
        spell_gen_unstable_fel_crystal() : SpellScriptLoader("spell_gen_unstable_fel_crystal") { }

        class spell_gen_unstable_fel_crystal_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_unstable_fel_crystal_SpellScript);

            enum eSpells
            {
                Spell_UnstableFelCrystal = 251233
            };

            void HandleHitTarget(SpellEffIndex /*p_EffectIndex*/)
            {
                Unit* l_Caster = GetCaster();
                Unit* l_Target = GetHitUnit();
                if (!l_Caster || !l_Target)
                    return;

                l_Caster->CastSpell(l_Target, eSpells::Spell_UnstableFelCrystal, true);
            }

            void Register() override
            {
                OnEffectHitTarget += SpellEffectFn(spell_gen_unstable_fel_crystal_SpellScript::HandleHitTarget, EFFECT_0, SPELL_EFFECT_DUMMY);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_unstable_fel_crystal_SpellScript();
        }
};

/// Prevent damage to other players. Need for personal events.
class spell_gen_prevent_damage_to_others : public SpellScriptLoader
{
    public:
        spell_gen_prevent_damage_to_others() : SpellScriptLoader("spell_gen_prevent_damage_to_others") { }

        class spell_gen_prevent_damage_to_others_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_prevent_damage_to_others_SpellScript);

            enum eSpells
            {
                Spell_RecklessStomp = 250863,
                Spell_FelfireCrash = 250869,
                Spell_FelshockBombardment = 250885,
                Spell_GlaiveBlastDamage = 244623,
                Spell_MoltenFel = 241557,
                Spell_FelBlast = 248624
            };

            enum eNpcs
            {
                Npc_Garzoth = 122999
            };

            void FilterTargets(std::list<WorldObject*>& p_Targets)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster || p_Targets.empty() || l_Caster->GetEntry() == eNpcs::Npc_Garzoth)
                    return;

                p_Targets.remove_if([l_Caster](WorldObject* p_Target) -> bool
                {
                    if (Unit* l_Target = p_Target->ToUnit())
                    {
                        if (TempSummon* l_Creature = l_Caster->ToTempSummon())
                        {
                            if (TempSummon* l_Ts = l_Target->ToTempSummon())
                            {
                                if (l_Creature->GetSummonerGUID() == l_Ts->GetSummonerGUID())
                                {
                                    return false;
                                }
                            }
                            else if (l_Target->IsPlayer() && l_Creature->GetSummonerGUID() == l_Target->GetGUID())
                            {
                                return false;
                            }
                        }
                    }

                    return true;
                });
            }

            void Register() override
            {
                if (m_scriptSpellId == eSpells::Spell_RecklessStomp)
                {
                    OnObjectAreaTargetSelect += SpellObjectAreaTargetSelectFn(spell_gen_prevent_damage_to_others_SpellScript::FilterTargets, EFFECT_1, TARGET_UNIT_SRC_AREA_ENEMY);
                }
                else if (m_scriptSpellId == eSpells::Spell_FelshockBombardment)
                {
                    OnObjectAreaTargetSelect += SpellObjectAreaTargetSelectFn(spell_gen_prevent_damage_to_others_SpellScript::FilterTargets, EFFECT_0, TARGET_UNIT_SRC_AREA_ENEMY);
                }
                else if (m_scriptSpellId == eSpells::Spell_GlaiveBlastDamage)
                {
                    OnObjectAreaTargetSelect += SpellObjectAreaTargetSelectFn(spell_gen_prevent_damage_to_others_SpellScript::FilterTargets, EFFECT_0, TARGET_UNIT_DEST_AREA_ENEMY);
                }
                else if (m_scriptSpellId == eSpells::Spell_MoltenFel)
                {
                    OnObjectAreaTargetSelect += SpellObjectAreaTargetSelectFn(spell_gen_prevent_damage_to_others_SpellScript::FilterTargets, EFFECT_0, TARGET_UNIT_DEST_AREA_ENEMY);
                }
                else if (m_scriptSpellId == eSpells::Spell_FelfireCrash)
                {
                    OnObjectAreaTargetSelect += SpellObjectAreaTargetSelectFn(spell_gen_prevent_damage_to_others_SpellScript::FilterTargets, EFFECT_0, TARGET_UNIT_DEST_AREA_ENEMY);
                }
                else if (m_scriptSpellId == eSpells::Spell_FelBlast)
                {
                    OnObjectAreaTargetSelect += SpellObjectAreaTargetSelectFn(spell_gen_prevent_damage_to_others_SpellScript::FilterTargets, EFFECT_0, TARGET_UNIT_DEST_AREA_ENTRY);
                }
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_prevent_damage_to_others_SpellScript();
        }
};

/// Flurry - 238622
class spell_gen_flurry : public SpellScriptLoader
{
    public:
        spell_gen_flurry() : SpellScriptLoader("spell_gen_flurry") { }

        class  spell_gen_flurry_AuraScript : public AuraScript
        {
            PrepareAuraScript(spell_gen_flurry_AuraScript);

            enum eSpells
            {
                Spell_FlurryDamage = 238623
            };

            void HandleOnPeriodic(AuraEffect const* /*p_AuraEffect*/)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                l_Caster->CastSpell(l_Caster, eSpells::Spell_FlurryDamage, true);
            }

            void Register() override
            {
                OnEffectPeriodic += AuraEffectPeriodicFn(spell_gen_flurry_AuraScript::HandleOnPeriodic, EFFECT_0, SPELL_AURA_PERIODIC_TRIGGER_SPELL);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_gen_flurry_AuraScript();
        }
};

/// Witnessing - 248160
class spell_gen_witnessing : public SpellScriptLoader
{
    public:
        spell_gen_witnessing() : SpellScriptLoader("spell_gen_witnessing") { }

        class spell_gen_witnessing_AuraScript : public AuraScript
        {
            PrepareAuraScript(spell_gen_witnessing_AuraScript);

            enum eSpells
            {
                Spell_KillCredit = 248159
            };

            void HandleAfterRemove(AuraEffect const* /* p_AuraEffect */, AuraEffectHandleModes /* p_Mode */)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster || !l_Caster->ToPlayer())
                    return;

                l_Caster->CastSpell(l_Caster, eSpells::Spell_KillCredit, true);
            }

            void Register() override
            {
                AfterEffectRemove += AuraEffectRemoveFn(spell_gen_witnessing_AuraScript::HandleAfterRemove, EFFECT_0, SPELL_AURA_ACTIVATE_SCENE, AURA_EFFECT_HANDLE_REAL);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_gen_witnessing_AuraScript();
        }
};

/// Crystal Activating Destiny Point - 251359
class spell_gen_crystal_activating_on_destiny_point : public SpellScriptLoader
{
    public:
        spell_gen_crystal_activating_on_destiny_point() : SpellScriptLoader("spell_gen_crystal_activating_on_destiny_point") { }

        class spell_gen_crystal_activating_on_destiny_point_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_crystal_activating_on_destiny_point_SpellScript);

            enum eNpcs
            {
                Npc_GenericBunny = 54638,
                Npc_SignalCrystal = 123344
            };

            enum eSpells
            {
                Spell_HolyDissolveOut = 105616
            };

            enum eActions
            {
                Action_BunnyDestinyPointStartEvent = 2
            };

            Position const m_GenericBunnyDestinyPointSpawnPos = { 1437.274f, 1444.061f, 491.3899f, 4.865082f };
            Position const m_SignalCrystalDestinyPointSpawnPos = { 1437.274f, 1444.061f, 492.3897f, 4.865082f };

            void HandleAfterCast()
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                if (Creature* l_Creature = l_Caster->SummonCreature(eNpcs::Npc_GenericBunny, m_GenericBunnyDestinyPointSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Caster->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_BunnyDestinyPointStartEvent);
                }

                if (Creature* l_Creature = l_Caster->SummonCreature(eNpcs::Npc_SignalCrystal, m_SignalCrystalDestinyPointSpawnPos, TempSummonType::TEMPSUMMON_TIMED_DESPAWN, 7000, 0, l_Caster->GetGUID()))
                {
                    l_Creature->CastSpell(l_Creature, eSpells::Spell_HolyDissolveOut, true);
                }
            }

            void Register() override
            {
                AfterCast += SpellCastFn(spell_gen_crystal_activating_on_destiny_point_SpellScript::HandleAfterCast);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_crystal_activating_on_destiny_point_SpellScript();
        }
};

/// Fel Orbs - 251733
class spell_gen_fel_orbs : public SpellScriptLoader
{
    public:
        spell_gen_fel_orbs() : SpellScriptLoader("spell_gen_fel_orbs") { }

        class spell_gen_fel_orbs_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_fel_orbs_SpellScript);

            enum eSpells
            {
                Spell_FelOrbsMissiles = 251732
            };

            void HandleAfterCast()
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster || !l_Caster->ToCreature())
                    return;

                for (uint8 l_Itr = 0; l_Itr < 3; l_Itr++)
                {
                    l_Caster->CastSpell(l_Caster, eSpells::Spell_FelOrbsMissiles, false);
                }
            }

            void Register() override
            {
                AfterCast += SpellCastFn(spell_gen_fel_orbs_SpellScript::HandleAfterCast);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_fel_orbs_SpellScript();
        }
};

/// Mass Fel Eruption - 251745
class spell_gen_mass_fel_eruption : public SpellScriptLoader
{
    public:
        spell_gen_mass_fel_eruption() : SpellScriptLoader("spell_gen_mass_fel_eruption") { }

        class spell_gen_mass_fel_eruption_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_mass_fel_eruption_SpellScript);

            enum eSpells
            {
                Spell_FelEruption = 251748
            };

            enum eNpcs
            {
                Npc_LordNathraxasStalker = 126821
            };

            int32 m_Delay = 0;

            void FilterTargets(std::list<WorldObject*>& p_Targets)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster || p_Targets.empty())
                    return;

                p_Targets.remove_if([l_Caster](WorldObject* p_Target) -> bool
                {
                    if (Creature* l_Target = p_Target->ToCreature())
                    {
                        if (l_Target->GetEntry() == eNpcs::Npc_LordNathraxasStalker)
                        {
                            return false;
                        }
                    }

                    return true;
                });
            }

            void HandleHitTarget(SpellEffIndex /*p_EffectIndex*/)
            {
                Unit* l_Target = GetHitUnit();
                if (!l_Target)
                    return;

                l_Target->DelayedCastSpell(l_Target, eSpells::Spell_FelEruption, true, m_Delay);
                m_Delay += 500;
            }

            void Register() override
            {
                OnObjectAreaTargetSelect += SpellObjectAreaTargetSelectFn(spell_gen_mass_fel_eruption_SpellScript::FilterTargets, EFFECT_0, TARGET_UNIT_SRC_AREA_ENTRY);
                OnEffectHitTarget += SpellEffectFn(spell_gen_mass_fel_eruption_SpellScript::HandleHitTarget, EFFECT_0, SPELL_EFFECT_DUMMY);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_mass_fel_eruption_SpellScript();
        }
};

/// Fel Eruption - 251748
class spell_gen_fel_eruption : public SpellScriptLoader
{
    public:
        spell_gen_fel_eruption() : SpellScriptLoader("spell_gen_fel_eruption") { }

        class spell_gen_fel_eruption_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_fel_eruption_SpellScript);

            enum eSpells
            {
                Spell_FelEruptionMissile = 251749
            };

            void HandleHitTarget(SpellEffIndex /*p_EffectIndex*/)
            {
                Unit* l_Caster = GetCaster();
                Unit* l_Target = GetHitUnit();
                if (!l_Caster || !l_Target)
                    return;

                l_Caster->CastSpell(l_Target->GetPosition(), eSpells::Spell_FelEruptionMissile, true);
            }

            void Register() override
            {
                OnEffectHitTarget += SpellEffectFn(spell_gen_fel_eruption_SpellScript::HandleHitTarget, EFFECT_0, SPELL_EFFECT_DUMMY);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_fel_eruption_SpellScript();
        }
};

/// The Arrival - 248544
class spell_gen_the_arrival : public SpellScriptLoader
{
    public:
        spell_gen_the_arrival() : SpellScriptLoader("spell_gen_the_arrival") { }

        class spell_gen_the_arrival_AuraScript : public AuraScript
        {
            PrepareAuraScript(spell_gen_the_arrival_AuraScript);

            enum eSpells
            {
                Spell_TeleportToVindicaar = 248543
            };

            void HandleAfterRemove(AuraEffect const* /* p_AuraEffect */, AuraEffectHandleModes /* p_Mode */)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster || !l_Caster->ToPlayer())
                    return;

                l_Caster->CastSpell(l_Caster, eSpells::Spell_TeleportToVindicaar, true);
            }

            void Register() override
            {
                AfterEffectRemove += AuraEffectRemoveFn(spell_gen_the_arrival_AuraScript::HandleAfterRemove, EFFECT_0, SPELL_AURA_ACTIVATE_SCENE, AURA_EFFECT_HANDLE_REAL);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_gen_the_arrival_AuraScript();
        }
};

/// No NPC Damage - 155893
class spell_gen_no_npc_damage : public SpellScriptLoader
{
    public:
        spell_gen_no_npc_damage() : SpellScriptLoader("spell_gen_no_npc_damage") { }

        class spell_gen_no_npc_damage_Aurascript : public AuraScript
        {
            PrepareAuraScript(spell_gen_no_npc_damage_Aurascript);

            void OnAbsorb(AuraEffect* /*p_AurEff*/, DamageInfo& p_DmgInfo, uint32& p_AbsorbAmount)
            {
                Unit* l_Caster = GetCaster();
                Unit* l_Actor = p_DmgInfo.GetActor();
                if (!l_Caster || !l_Actor || !l_Actor->ToCreature() || l_Actor->ToTempSummon())
                    return;

                if (l_Caster->GetHealthPct() <= 70)
                {
                    p_AbsorbAmount = p_DmgInfo.GetAmount();
                }
                else
                {
                    p_AbsorbAmount = 0;
                }
            }

            void CalculateAmount(AuraEffect const* /*p_AurEff*/, int32& p_Amount, bool& /*p_CanBeRecalculated*/)
            {
                p_Amount = -1;
            }

            void Register() override
            {
                DoEffectCalcAmount += AuraEffectCalcAmountFn(spell_gen_no_npc_damage_Aurascript::CalculateAmount, EFFECT_0, SPELL_AURA_SCHOOL_ABSORB);
                OnEffectAbsorb += AuraEffectAbsorbFn(spell_gen_no_npc_damage_Aurascript::OnAbsorb, EFFECT_0, SPELL_AURA_SCHOOL_ABSORB);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_gen_no_npc_damage_Aurascript();
        }
};

/// Jostling - 247481
class spell_gen_jostling : public SpellScriptLoader
{
    public:
        spell_gen_jostling() : SpellScriptLoader("spell_gen_jostling") { }

        class spell_gen_jostling_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_jostling_SpellScript);

            enum eNpcs
            {
                Npc_Ymera = 123413
            };

            enum eActions
            {
                Action_YmeraStartJostling = 1
            };

            enum eKillcredits
            {
                Killcredit_QuoramActivated = 2911990
            };

            Position const m_YmeraSpawnPos = { 5525.587f, 9600.099f, -75.82684f, 4.849638f };

            void HandleAfterCast()
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                Player* l_Player = l_Caster->ToPlayer();
                if (!l_Player)
                    return;

                l_Player->KilledMonsterCredit(eKillcredits::Killcredit_QuoramActivated);

                if (Creature* l_Ymera = l_Player->SummonCreature(eNpcs::Npc_Ymera, m_YmeraSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Player->GetGUID()))
                {
                    l_Ymera->AI()->DoAction(eActions::Action_YmeraStartJostling);
                }
            }

            void Register() override
            {
                AfterCast += SpellCastFn(spell_gen_jostling_SpellScript::HandleAfterCast);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_jostling_SpellScript();
        }
};

/// Sculpture Blessings - 243765, 243770, 243757
class spell_gen_sculpture_blessings : public SpellScriptLoader
{
    public:
        spell_gen_sculpture_blessings() : SpellScriptLoader("spell_gen_sculpture_blessings") { }

        class spell_gen_sculpture_blessings_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_sculpture_blessings_SpellScript);

            enum eSpells
            {
                // Child Auras
                Spell_Red = 243755,
                Spell_Blue = 243761,
                Spell_Yellow = 243762,
                // Red Sculpture
                Spell_RedSculptureBlessingDummy = 243757,
                Spell_RedReceiveBlessingCast = 243760,
                Spell_RedRemoveChildAura = 243758,
                // Blue Sculpture
                Spell_BlueSculptureBlessingDummy = 243765,
                Spell_BlueReceiveBlessingCast = 243764,
                Spell_BlueRemoveChildAura = 243763,
                // Yellow Sculpture
                Spell_YellowSculptureBlessingDummy = 243770,
                Spell_YellowReceiveBlessingCast = 243769,
                Spell_YellowRemoveChildAura = 243768,
            };

            void HandleAfterCast()
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                switch (m_scriptSpellId)
                {
                case eSpells::Spell_RedSculptureBlessingDummy:
                {
                    if (!l_Caster->HasAura(eSpells::Spell_Red) && !l_Caster->HasAura(eSpells::Spell_Blue) && !l_Caster->HasAura(eSpells::Spell_Yellow))
                    {
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_RedReceiveBlessingCast, false);
                    }
                    else if (!l_Caster->HasAura(eSpells::Spell_Red) && l_Caster->HasAura(eSpells::Spell_Blue))
                    {
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_RedReceiveBlessingCast, false);
                    }
                    else if (!l_Caster->HasAura(eSpells::Spell_Red) && l_Caster->HasAura(eSpells::Spell_Yellow))
                    {
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_RedReceiveBlessingCast, false);
                    }
                    else
                    {
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_RedRemoveChildAura, true);
                    }

                    break;
                }
                case eSpells::Spell_BlueSculptureBlessingDummy:
                {
                    if (!l_Caster->HasAura(eSpells::Spell_Blue) && !l_Caster->HasAura(eSpells::Spell_Red) && !l_Caster->HasAura(eSpells::Spell_Yellow))
                    {
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_BlueReceiveBlessingCast, false);
                    }
                    else if (!l_Caster->HasAura(eSpells::Spell_Blue) && l_Caster->HasAura(eSpells::Spell_Red))
                    {
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_BlueReceiveBlessingCast, false);
                    }
                    else if (!l_Caster->HasAura(eSpells::Spell_Blue) && l_Caster->HasAura(eSpells::Spell_Yellow))
                    {
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_BlueReceiveBlessingCast, false);
                    }
                    else
                    {
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_BlueRemoveChildAura, true);
                    }

                    break;
                }
                case eSpells::Spell_YellowSculptureBlessingDummy:
                {
                    if (!l_Caster->HasAura(eSpells::Spell_Yellow) && !l_Caster->HasAura(eSpells::Spell_Blue) && !l_Caster->HasAura(eSpells::Spell_Red))
                    {
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_YellowReceiveBlessingCast, false);
                    }
                    else if (!l_Caster->HasAura(eSpells::Spell_Yellow) && l_Caster->HasAura(eSpells::Spell_Blue))
                    {
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_YellowReceiveBlessingCast, false);
                    }
                    else if (!l_Caster->HasAura(eSpells::Spell_Yellow) && l_Caster->HasAura(eSpells::Spell_Red))
                    {
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_YellowReceiveBlessingCast, false);
                    }
                    else
                    {
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_YellowRemoveChildAura, true);
                    }

                    break;
                }
                default:
                    break;
                }
            }

            void Register() override
            {
                AfterCast += SpellCastFn(spell_gen_sculpture_blessings_SpellScript::HandleAfterCast);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_sculpture_blessings_SpellScript();
        }
};

/// Prismatic Child Auras - 243755, 243761, 243762
class spell_gen_prismatic_child_auras : public SpellScriptLoader
{
    public:
        spell_gen_prismatic_child_auras() : SpellScriptLoader("spell_gen_prismatic_child_auras") { }

        class spell_gen_prismatic_child_auras_AuraScript : public AuraScript
        {
            PrepareAuraScript(spell_gen_prismatic_child_auras_AuraScript);

            void ChangePhases(Unit* p_Caster)
            {
                if (Player* l_Player = p_Caster->ToPlayer())
                {
                    if (l_Player->GetQuestObjectiveCounter(eObjectives::Obj_FragmentOfGuile) == 0)
                        l_Player->SetInPhase(5610, true, true);
                    if (l_Player->GetQuestObjectiveCounter(eObjectives::Obj_FragmentOfAcuity) == 0)
                        l_Player->SetInPhase(5611, true, true);
                    if (l_Player->GetQuestObjectiveCounter(eObjectives::Obj_FragmentOfWit) == 0)
                        l_Player->SetInPhase(5612, true, true);

                    l_Player->SetInPhase(5616, true, false);
                    l_Player->SetInPhase(5617, true, false);
                    l_Player->SetInPhase(5618, true, false);
                }
            }

            enum eSpells
            {
                // Parent Aura
                Spell_Prismatic = 243775,
                // Child Auras
                Spell_Red = 243755,
                Spell_Blue = 243761,
                Spell_Yellow = 243762
            };

            enum eVisuals
            {
                Visual_Red = 119533,
                Visual_Blue = 119539,
                Visual_Yellow = 119538,
                Visual_Red_Blue_Purple = 119534,
                Visual_Red_Yellow_Orange = 119535,
                Visual_Yellow_Blue_Green = 119537,
                Visual_Yellow_Red_Blue = 119536
            };

            enum eObjectives
            {
                Obj_FragmentOfAcuity = 290757,
                Obj_FragmentOfWit = 290901,
                Obj_FragmentOfGuile = 292420
            };

            void HandleAfterApply(AuraEffect const* /* p_AuraEffect */, AuraEffectHandleModes /* p_Mode */)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                uint32 SpellVisualId = 0;

                if (l_Caster->HasAura(Spell_Yellow) && l_Caster->HasAura(Spell_Red) && l_Caster->HasAura(Spell_Blue))
                    SpellVisualId = Visual_Yellow_Red_Blue;
                else if (l_Caster->HasAura(Spell_Red) && l_Caster->HasAura(Spell_Blue))
                    SpellVisualId = Visual_Red_Blue_Purple;
                else if (l_Caster->HasAura(Spell_Red) && l_Caster->HasAura(Spell_Yellow))
                    SpellVisualId = Visual_Red_Yellow_Orange;
                else if (l_Caster->HasAura(Spell_Yellow) && l_Caster->HasAura(Spell_Blue))
                    SpellVisualId = Visual_Yellow_Blue_Green;
                else if (l_Caster->HasAura(Spell_Red))
                    SpellVisualId = Visual_Red;
                else if (l_Caster->HasAura(Spell_Yellow))
                    SpellVisualId = Visual_Yellow;
                else if (l_Caster->HasAura(Spell_Blue))
                    SpellVisualId = Visual_Blue;

                Aura* l_Aura = l_Caster->GetAura(eSpells::Spell_Prismatic);
                if (!l_Aura)
                    l_Aura = l_Caster->AddAura(eSpells::Spell_Prismatic, l_Caster);

                l_Aura->SetSpellXSpellVisualID(SpellVisualId);

                AuraApplication* l_AuraApplication = l_Aura->GetApplicationOfTarget(l_Caster->GetGUID());
                if (!l_AuraApplication)
                    return;

                switch (SpellVisualId)
                {
                case eVisuals::Visual_Red_Blue_Purple:
                {
                    l_Caster->SetInPhase(5610, true, false);
                    l_Caster->SetInPhase(5618, true, true);
                    break;
                }
                case eVisuals::Visual_Red_Yellow_Orange:
                {
                    l_Caster->SetInPhase(5612, true, false);
                    l_Caster->SetInPhase(5617, true, true);
                    break;
                }
                case eVisuals::Visual_Yellow_Blue_Green:
                {
                    l_Caster->SetInPhase(5611, true, false);
                    l_Caster->SetInPhase(5616, true, true);
                    break;
                }
                default:
                {
                    ChangePhases(l_Caster);
                    break;
                }
                }

                l_AuraApplication->ClientUpdate();
            }

            void HandleAfterRemove(AuraEffect const* /* p_AuraEffect */, AuraEffectHandleModes /* p_Mode */)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                uint32 SpellVisualId = 0;

                if (l_Caster->HasAura(Spell_Yellow) && l_Caster->HasAura(Spell_Red) && l_Caster->HasAura(Spell_Blue))
                    SpellVisualId = Visual_Yellow_Red_Blue;
                else if (l_Caster->HasAura(Spell_Red) && l_Caster->HasAura(Spell_Blue))
                    SpellVisualId = Visual_Red_Blue_Purple;
                else if (l_Caster->HasAura(Spell_Red) && l_Caster->HasAura(Spell_Yellow))
                    SpellVisualId = Visual_Red_Yellow_Orange;
                else if (l_Caster->HasAura(Spell_Yellow) && l_Caster->HasAura(Spell_Blue))
                    SpellVisualId = Visual_Yellow_Blue_Green;
                else if (l_Caster->HasAura(Spell_Red))
                    SpellVisualId = Visual_Red;
                else if (l_Caster->HasAura(Spell_Yellow))
                    SpellVisualId = Visual_Yellow;
                else if (l_Caster->HasAura(Spell_Blue))
                    SpellVisualId = Visual_Blue;

                Aura* l_Aura = l_Caster->GetAura(eSpells::Spell_Prismatic);
                if (!l_Aura)
                    l_Aura = l_Caster->AddAura(eSpells::Spell_Prismatic, l_Caster);

                l_Aura->SetSpellXSpellVisualID(SpellVisualId);

                AuraApplication* l_AuraApplication = l_Aura->GetApplicationOfTarget(l_Caster->GetGUID());
                if (!l_AuraApplication)
                    return;

                switch (SpellVisualId)
                {
                case eVisuals::Visual_Red_Blue_Purple:
                {
                    l_Caster->SetInPhase(5610, true, false);
                    l_Caster->SetInPhase(5618, true, true);
                    break;
                }
                case eVisuals::Visual_Red_Yellow_Orange:
                {
                    l_Caster->SetInPhase(5612, true, false);
                    l_Caster->SetInPhase(5617, true, true);
                    break;
                }
                case eVisuals::Visual_Yellow_Blue_Green:
                {
                    l_Caster->SetInPhase(5611, true, false);
                    l_Caster->SetInPhase(5616, true, true);
                    break;
                }
                default:
                {
                    ChangePhases(l_Caster);
                    break;
                }
                }

                l_AuraApplication->ClientUpdate();
            }

            void Register() override
            {
                AfterEffectApply += AuraEffectApplyFn(spell_gen_prismatic_child_auras_AuraScript::HandleAfterApply, EFFECT_0, SPELL_AURA_DUMMY, AURA_EFFECT_HANDLE_REAL);
                AfterEffectRemove += AuraEffectRemoveFn(spell_gen_prismatic_child_auras_AuraScript::HandleAfterRemove, EFFECT_0, SPELL_AURA_DUMMY, AURA_EFFECT_HANDLE_REAL);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_gen_prismatic_child_auras_AuraScript();
        }
};

/// Unleashed Familiars - 252281
class spell_gen_unleashed_familiars : public SpellScriptLoader
{
    public:
        spell_gen_unleashed_familiars() : SpellScriptLoader("spell_gen_unleashed_familiars") { }

        class spell_gen_unleashed_familiars_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_unleashed_familiars_SpellScript);

            enum eSpells
            {
                Spell_SummonUnleashedFamiliars = 252282
            };

            void HandleAfterCast()
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                for (uint8 l_Itr = 0; l_Itr < 3; l_Itr++)
                {
                    l_Caster->CastSpell(l_Caster, eSpells::Spell_SummonUnleashedFamiliars, true);
                }
            }

            void Register() override
            {
                AfterCast += SpellCastFn(spell_gen_unleashed_familiars_SpellScript::HandleAfterCast);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_unleashed_familiars_SpellScript();
        }
};

/// Crystalline Defense Grid - 252184
class spell_gen_crystalline_defense_grid : public SpellScriptLoader
{
    public:
        spell_gen_crystalline_defense_grid() : SpellScriptLoader("spell_gen_crystalline_defense_grid") { }

        class spell_gen_crystalline_defense_grid_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_crystalline_defense_grid_SpellScript);

            enum eSpells
            {
                Spell_CrystallineDefenseGridBack = 252186,
                Spell_CrystallineDefenseGridFrontLeft = 252187,
                Spell_CrystallineDefenseGridFrontRight = 252188
            };

            void HandleAfterCast()
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                l_Caster->CastSpell(l_Caster, eSpells::Spell_CrystallineDefenseGridBack, true);
                l_Caster->CastSpell(l_Caster, eSpells::Spell_CrystallineDefenseGridFrontLeft, true);
                l_Caster->CastSpell(l_Caster, eSpells::Spell_CrystallineDefenseGridFrontRight, true);
            }

            void Register() override
            {
                AfterCast += SpellCastFn(spell_gen_crystalline_defense_grid_SpellScript::HandleAfterCast);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_crystalline_defense_grid_SpellScript();
        }
};

/// Laser Field Visual - 246789
class spell_gen_laser_field_visual : public SpellScriptLoader
{
    public:
        spell_gen_laser_field_visual() : SpellScriptLoader("spell_gen_laser_field_visual") { }

        class spell_gen_laser_field_visual_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_laser_field_visual_SpellScript);

            enum eNpcs
            {
                Npc_Laser = 122272
            };

            enum eSpells
            {
                Spell_LaserFieldVisual = 246789,
                Spell_LaserFieldTargeted = 243851
            };

            void FilterTargets(std::list<WorldObject*>& p_Targets)
            {
                p_Targets.remove_if([](WorldObject* p_Target) -> bool
                {
                    if (Creature* l_Target = p_Target->ToCreature())
                    {
                        if (l_Target->GetEntry() == eNpcs::Npc_Laser)
                        {
                            if (l_Target->GetWaypointPath() && !l_Target->HasAura(eSpells::Spell_LaserFieldVisual))
                                return false;
                        }
                    }

                    return true;
                });
            }

            void HandleHitTarget(SpellEffIndex /*p_EffectIndex*/)
            {
                Unit* l_Target = GetHitUnit();
                if (!l_Target)
                    return;

                l_Target->CastSpell(l_Target, eSpells::Spell_LaserFieldTargeted, true);
            }

            void Register() override
            {
                OnObjectAreaTargetSelect += SpellObjectAreaTargetSelectFn(spell_gen_laser_field_visual_SpellScript::FilterTargets, EFFECT_0, TARGET_UNIT_SRC_AREA_ENTRY);
                OnEffectHitTarget += SpellEffectFn(spell_gen_laser_field_visual_SpellScript::HandleHitTarget, EFFECT_0, SPELL_EFFECT_APPLY_AURA);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_laser_field_visual_SpellScript();
        }
};

/// Eldritch Crash - 252312
class spell_gen_eldritch_crash : public SpellScriptLoader
{
    public:
        spell_gen_eldritch_crash() : SpellScriptLoader("spell_gen_eldritch_crash") { }

        class spell_gen_eldritch_crash_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_eldritch_crash_SpellScript);

            enum eSpells
            {
                Spell_EldritchCrashMissile = 252311
            };

            void HandleAfterCast()
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                uint16 l_Delay = 0;

                for (uint8 l_Itr = 0; l_Itr < 15; l_Itr++)
                {
                    l_Caster->DelayedCastSpell(l_Caster, eSpells::Spell_EldritchCrashMissile, true, l_Delay);
                    l_Delay += urand(200, 400);
                }
            }

            void Register() override
            {
                AfterCast += SpellCastFn(spell_gen_eldritch_crash_SpellScript::HandleAfterCast);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_eldritch_crash_SpellScript();
        }
};

/// Energy Breach - 252315
class spell_gen_energy_breach : public SpellScriptLoader
{
    public:
        spell_gen_energy_breach() : SpellScriptLoader("spell_gen_energy_breach") { }

        class spell_gen_energy_breach_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_energy_breach_SpellScript);

            enum eNpcs
            {
                Npc_EnergyBreachStarterStalker = 127133,
                Npc_EnergyBreachCasterStalker = 127136
            };

            enum eSpells
            {
                Spell_EnergyBreachAreatrigger = 252317,
                Spell_EnergyBreachBeam = 252316
            };

            uint16 l_Delay = 0;

            void HandleHitTarget(SpellEffIndex /*p_EffectIndex*/)
            {
                Unit* l_Target = GetHitUnit();
                if (!l_Target || !l_Target->ToCreature())
                    return;

                if (l_Target->GetEntry() == eNpcs::Npc_EnergyBreachStarterStalker)
                {
                    l_Target->CastSpell(l_Target, eSpells::Spell_EnergyBreachAreatrigger, true);
                }
                else if (l_Target->GetEntry() == eNpcs::Npc_EnergyBreachCasterStalker)
                {
                    l_Target->DelayedCastSpell(l_Target, eSpells::Spell_EnergyBreachBeam, true, l_Delay);
                    l_Delay += urand(200, 700);
                }
            }

            void Register() override
            {
                OnEffectHitTarget += SpellEffectFn(spell_gen_energy_breach_SpellScript::HandleHitTarget, EFFECT_0, SPELL_EFFECT_DUMMY);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_energy_breach_SpellScript();
        }
};

/// Enegry Breach Beam - 252316
class spell_gen_enegry_breach_beam : public SpellScriptLoader
{
    public:
        spell_gen_enegry_breach_beam() : SpellScriptLoader("spell_gen_enegry_breach_beam") { }

        class spell_gen_enegry_breach_beam_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_gen_enegry_breach_beam_SpellScript);

            void HandleHitTarget(SpellEffIndex /*p_EffIndex*/)
            {
                Unit* l_Target = GetHitUnit();
                if (!l_Target)
                    return;

                if (!l_Target->IsPlayer())
                {
                    SetHitDamage(0);
                }
            }

            void Register() override
            {
                OnEffectHitTarget += SpellEffectFn(spell_gen_enegry_breach_beam_SpellScript::HandleHitTarget, EFFECT_0, SPELL_EFFECT_SCHOOL_DAMAGE);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_gen_enegry_breach_beam_SpellScript();
        }
};

/// Crossing Over - 245205, 245213
class spell_gen_crossing_over : public SpellScriptLoader
{
    public:
        spell_gen_crossing_over() : SpellScriptLoader("spell_gen_crossing_over") { }

        class spell_gen_crossing_over_AuraScript : public AuraScript
        {
            PrepareAuraScript(spell_gen_crossing_over_AuraScript);

            enum eNpcs
            {
                Npc_Arkhaan = 121546
            };

            enum eSpells
            {
                Spell_CrossingOverEnter = 245205,
                Spell_CrossingOverExit = 245213,
                Spell_VoidRift = 242833
            };

            enum eKillcredits
            {
                Killcredit_PlayerReturnedFromTheVoid = 2900650
            };

            Position const m_ArkhaanSpawnPos = { 5348.934f, 10378.43f, -74.92347f, 5.750522f };

            void HandleAfterRemove(AuraEffect const* /* p_AuraEffect */, AuraEffectHandleModes /* p_Mode */)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster || !l_Caster->ToPlayer())
                    return;

                if (m_scriptSpellId == eSpells::Spell_CrossingOverEnter)
                {
                    l_Caster->CastSpell(l_Caster, eSpells::Spell_VoidRift, true);
                    l_Caster->SummonCreature(eNpcs::Npc_Arkhaan, m_ArkhaanSpawnPos, TempSummonType::TEMPSUMMON_CORPSE_TIMED_DESPAWN, 60000, 0, l_Caster->GetGUID());
                }
                else
                {
                    l_Caster->ToPlayer()->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_PlayerReturnedFromTheVoid);
                }
            }

            void Register() override
            {
                if (m_scriptSpellId == eSpells::Spell_CrossingOverEnter)
                    AfterEffectRemove += AuraEffectRemoveFn(spell_gen_crossing_over_AuraScript::HandleAfterRemove, EFFECT_0, SPELL_AURA_SCREEN_EFFECT, AURA_EFFECT_HANDLE_REAL);
                else
                    AfterEffectRemove += AuraEffectRemoveFn(spell_gen_crossing_over_AuraScript::HandleAfterRemove, EFFECT_1, SPELL_AURA_SCREEN_EFFECT, AURA_EFFECT_HANDLE_REAL);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_gen_crossing_over_AuraScript();
        }
};

/// Cross Over - 255442
class spell_gen_cross_over : public SpellScriptLoader
{
    public:
        spell_gen_cross_over() : SpellScriptLoader("spell_gen_cross_over") { }

        class spell_gen_cross_over_AuraScript : public AuraScript
        {
            PrepareAuraScript(spell_gen_cross_over_AuraScript);

            enum eNpcs
            {
                Npc_Alleria = 121773
            };

            enum eActions
            {
                Action_AlleriaFightWIthNhal = 1
            };

            Position const m_AlleriaSpawnPos = { 5653.247f, 10625.64f, 5.951521f, 1.98914f };

            void HandleAfterRemove(AuraEffect const* /* p_AuraEffect */, AuraEffectHandleModes /* p_Mode */)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster || !l_Caster->ToPlayer())
                    return;

                if (Creature* l_Creature = l_Caster->SummonCreature(eNpcs::Npc_Alleria, m_AlleriaSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, l_Caster->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_AlleriaFightWIthNhal);
                }
            }

            void Register() override
            {
                AfterEffectRemove += AuraEffectRemoveFn(spell_gen_cross_over_AuraScript::HandleAfterRemove, EFFECT_2, SPELL_AURA_SCREEN_EFFECT, AURA_EFFECT_HANDLE_REAL);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_gen_cross_over_AuraScript();
        }
};

/// Unsullied Tokens
/// Called by spells - 252882, 252893, 252883, 252894, 254628, 252895, 254634,
/// 252892, 254641, 252890, 254626, 254631, 253033, 252891, 254624, 254637, 254630,
/// 254646, 254632, 252889, 254617, 254642, 252884, 254638, 254629, 254648, 254633,
/// 254635, 254622, 254645, 254625, 254639, 252886, 254649, 252887, 254636, 254623
class spell_argus_create_unsullied_items : public SpellScriptLoader
{
    public:
        spell_argus_create_unsullied_items() : SpellScriptLoader("spell_argus_create_unsullied_items") { }

        class spell_argus_create_unsullied_items_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_argus_create_unsullied_items_SpellScript);

            uint32 m_ItemID = 0;

            SpellCastResult HandleCheckCast()
            {
                Player* l_Player = GetCaster() ? GetCaster()->ToPlayer() : nullptr;
                if (!l_Player)
                    return SpellCastResult::SPELL_FAILED_ERROR;

                LootStore& l_LootStore = LootTemplates_Spell;
                LootTemplate const* l_LootTemplate = l_LootStore.GetLootFor(GetSpellInfo()->Id);
                if (l_LootTemplate == nullptr)
                    return SpellCastResult::SPELL_FAILED_ERROR;

                std::list<ItemTemplate const*> l_LootTable;
                std::vector<uint32> l_Items;
                l_LootTemplate->FillAutoAssignationLoot(l_LootTable, l_Player, true);

                if (l_LootTable.empty())
                    return SpellCastResult::SPELL_FAILED_ERROR;

                uint32 l_SpecID = l_Player->GetLootSpecId() ? l_Player->GetLootSpecId() : l_Player->GetActiveSpecializationID();

                for (ItemTemplate const* l_Template : l_LootTable)
                {
                    bool l_BreakLoop = false;
                    switch (l_Template->InventoryType)
                    {
                        case InventoryType::INVTYPE_HEAD:
                        case InventoryType::INVTYPE_SHOULDERS:
                        case InventoryType::INVTYPE_CHEST:
                        case InventoryType::INVTYPE_WAIST:
                        case InventoryType::INVTYPE_LEGS:
                        case InventoryType::INVTYPE_FEET:
                        case InventoryType::INVTYPE_WRISTS:
                        case InventoryType::INVTYPE_HANDS:
                        case InventoryType::INVTYPE_ROBE:
                        {
                            if (l_Template->HasSpec((SpecIndex)l_SpecID, l_Player->getLevel()))
                            {
                                m_ItemID = l_Template->ItemId;
                                l_BreakLoop = true;
                            }

                            break;
                        }
                        case InventoryType::INVTYPE_CLOAK:
                        case InventoryType::INVTYPE_NECK:
                        case InventoryType::INVTYPE_FINGER:
                        {
                            m_ItemID = l_Template->ItemId;
                            l_BreakLoop = true;
                            break;
                        }
                        case InventoryType::INVTYPE_TRINKET:
                        {
                            l_Items.push_back(l_Template->ItemId);
                            break;
                        }
                        default:
                        {
                            if (l_Template->IsArtifactRelic())
                            {
                                if (l_Template->IsUsableBySpecialization(l_SpecID, l_Player->getLevel()))
                                {
                                    m_ItemID = l_Template->ItemId;
                                    l_BreakLoop = true;
                                }
                            }

                            break;
                        }
                    }

                    if (l_BreakLoop)
                        break;
                }

                if (!l_Items.empty())
                {
                    std::random_device l_RandomDevice;
                    std::mt19937 l_RandomGenerator(l_RandomDevice());
                    std::shuffle(l_Items.begin(), l_Items.end(), l_RandomGenerator);

                    m_ItemID = l_Items.front();
                }

                if (!m_ItemID)
                    return SpellCastResult::SPELL_FAILED_ERROR;

                ItemPosCountVec l_Destination;
                InventoryResult l_Message = l_Player->CanStoreNewItem(InventorySlot::NULL_BAG, InventorySlot::NULL_SLOT, l_Destination, m_ItemID, 1);

                if (l_Message != InventoryResult::EQUIP_ERR_OK)
                {
                    l_Player->SendEquipError(InventoryResult::EQUIP_ERR_INV_FULL, nullptr);
                    return SpellCastResult::SPELL_FAILED_DONT_REPORT;
                }

                return SpellCastResult::SPELL_CAST_OK;
            }

            void HandleCreateItem(SpellEffIndex p_EffectIndex)
            {
                PreventHitDefaultEffect(p_EffectIndex);

                Player* l_Player = GetCaster() ? GetCaster()->ToPlayer() : nullptr;
                if (!l_Player || !m_ItemID)
                    return;

                ItemContext l_Context = ItemContext::PvPRanked6;

                ItemPosCountVec l_Destination;
                InventoryResult l_Message = l_Player->CanStoreNewItem(InventorySlot::NULL_BAG, InventorySlot::NULL_SLOT, l_Destination, m_ItemID, 1);

                if (l_Message != InventoryResult::EQUIP_ERR_OK)
                    return;

                std::vector<uint32> l_RandomPropertiesPool = { 1707, 1692, 1712, 1697, 1677, 1687 };
                std::vector<uint32> l_BonusList = { 3574, 3528 };
                l_BonusList.push_back(l_RandomPropertiesPool[urand(0, l_RandomPropertiesPool.size() - 1)]);

                Item::GenerateItemBonus(m_ItemID, l_Context, l_BonusList, false, l_Player);
                if (Item* l_Item = l_Player->StoreNewItem(l_Destination, m_ItemID, true, Item::GenerateItemRandomPropertyId(m_ItemID), l_BonusList))
                {
                    l_Player->SendNewItem(l_Item, 1, false, true, false, 0, l_Context);
                    l_Player->SendDisplayToast(m_ItemID, 1, 0, DisplayToastMethod::DISPLAY_TOAST_METHOD_LOOT, ToastTypes::TOAST_TYPE_NEW_ITEM, false, false, l_BonusList);
                }
            }

            void Register() override
            {
                OnCheckCast += SpellCheckCastFn(spell_argus_create_unsullied_items_SpellScript::HandleCheckCast);
                OnEffectHitTarget += SpellEffectFn(spell_argus_create_unsullied_items_SpellScript::HandleCreateItem, EFFECT_0, SPELL_EFFECT_LOOT_BONUS);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_argus_create_unsullied_items_SpellScript();
        }
};

/// Relinquished Tokens selling by Thaumaturge Vashreen on Vindicaar
/// Called by Create Helm - 254783
/// Called by Create Neck - 254784
/// Called by Create Shoulder - 254773
/// Called by Create Cloak - 254774
/// Called by Create Chest - 254775
/// Called by Create Bracer - 254776
/// Called by Create Glove - 254777
/// Called by Create Belt - 254778
/// Called by Create Legs - 254779
/// Called by Create Boot - 254780
/// Called by Create Ring - 254781
/// Called by Create Trinket - 254782
/// Called by Create Arcane Relic - 254785
/// Called by Create Life Relic - 254792
/// Called by Create Blood Relic - 254786
/// Called by Create Frost Relic - 254789
/// Called by Create Fel Relic - 254787
/// Called by Create Fire Relic - 254788
/// Called by Create Storm Relic - 254794
/// Called by Create Holy Relic - 254790
/// Called by Create Iron Relic - 254791
/// Called by Create Shadow Relic - 254793
class spell_argus_create_relinquished_items : public SpellScriptLoader
{
    public:
        spell_argus_create_relinquished_items() : SpellScriptLoader("spell_argus_create_relinquished_items") { }

        class spell_argus_create_relinquished_items_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_argus_create_relinquished_items_SpellScript);

            enum eMaps
            {
                EmeraldNightmare = 1520,
                TrialOfValor = 1648,
                TheNighthold = 1530,
                TombOfSargeras = 1676,
                TheSeatOfTheTriumvirate = 1753
            };

            enum eSpells
            {
                CreateHelm              = 254783,
                CreateNeck              = 254784,
                CreateShoulder          = 254773,
                CreateCloak             = 254774,
                CreateChest             = 254775,
                CreateBracer            = 254776,
                CreateGlove             = 254777,
                CreateBelt              = 254778,
                CreateLegs              = 254779,
                CreateBoot              = 254780,
                CreateRing              = 254781,
                CreateTrinket           = 254782,
                CreateArcaneRelic       = 254785,
                CreateLifeRelic         = 254792,
                CreateBloodRelic        = 254786,
                CreateFrostRelic        = 254789,
                CreateFelRelic          = 254787,
                CreateFireRelic         = 254788,
                CreateStormRelic        = 254794,
                CreateHolyRelic         = 254790,
                CreateIronRelic         = 254791,
                CreateShadowRelic       = 254793
            };

            uint32 m_ItemID = 0;

            bool m_LootInit = false;
            std::array<std::vector<uint32>, InventoryType::MAX_INVTYPE> m_Loots;
            std::vector<uint32> m_Relics;

            void GenerateLootLists()
            {
                std::vector<uint32> l_Maps = *GetChallengeMaps();
                l_Maps.push_back(eMaps::EmeraldNightmare);
                l_Maps.push_back(eMaps::TrialOfValor);
                l_Maps.push_back(eMaps::TheNighthold);
                l_Maps.push_back(eMaps::TombOfSargeras);
                l_Maps.push_back(eMaps::TheSeatOfTheTriumvirate);

                for (uint32 l_MapID : l_Maps)
                {
                    for (uint32 l_LootID : GetItemLootPerMap(l_MapID))
                    {
                        ItemTemplate const* l_Template = sObjectMgr->GetItemTemplate(l_LootID);
                        if (l_Template->GetInventoryType() != INVTYPE_NON_EQUIP)
                        {
                            m_Loots[l_Template->GetInventoryType()].push_back(l_LootID);
                            continue;
                        }

                        if (!l_Template->IsArtifactRelic())
                            continue;

                        m_Relics.push_back(l_LootID);
                    }
                }

                m_LootInit = true;
            }

            bool IsRelicSpell()
            {
                return m_scriptSpellId == eSpells::CreateArcaneRelic ||
                    m_scriptSpellId == eSpells::CreateLifeRelic ||
                    m_scriptSpellId == eSpells::CreateBloodRelic ||
                    m_scriptSpellId == eSpells::CreateFrostRelic ||
                    m_scriptSpellId == eSpells::CreateFelRelic ||
                    m_scriptSpellId == eSpells::CreateFireRelic ||
                    m_scriptSpellId == eSpells::CreateStormRelic ||
                    m_scriptSpellId == eSpells::CreateHolyRelic ||
                    m_scriptSpellId == eSpells::CreateIronRelic ||
                    m_scriptSpellId == eSpells::CreateShadowRelic;
            }

            SpellCastResult HandleCheckCast()
            {
                if (!m_LootInit)
                    GenerateLootLists();

                Player* l_Player = GetCaster() ? GetCaster()->ToPlayer() : nullptr;
                if (!l_Player)
                    return SpellCastResult::SPELL_FAILED_ERROR;

                uint32 l_SpecID = l_Player->GetLootSpecId() ? l_Player->GetLootSpecId() : l_Player->GetActiveSpecializationID();

                std::vector<uint32> l_PossibleLoots;

                InventoryType l_InventoryType = InventoryType::INVTYPE_NON_EQUIP;
                switch (m_scriptSpellId)
                {
                case eSpells::CreateLegs:
                    l_InventoryType = InventoryType::INVTYPE_LEGS;
                    break;
                case eSpells::CreateBelt:
                    l_InventoryType = InventoryType::INVTYPE_WAIST;
                    break;
                case eSpells::CreateTrinket:
                    l_InventoryType = InventoryType::INVTYPE_TRINKET;
                    break;
                case eSpells::CreateShoulder:
                    l_InventoryType = InventoryType::INVTYPE_SHOULDERS;
                    break;
                case eSpells::CreateRing:
                    l_InventoryType = InventoryType::INVTYPE_FINGER;
                    break;
                case eSpells::CreateNeck:
                    l_InventoryType = InventoryType::INVTYPE_NECK;
                    break;
                case eSpells::CreateHelm:
                    l_InventoryType = InventoryType::INVTYPE_HEAD;
                    break;
                case eSpells::CreateGlove:
                    l_InventoryType = InventoryType::INVTYPE_HANDS;
                    break;
                case eSpells::CreateCloak:
                    l_InventoryType = InventoryType::INVTYPE_CLOAK;
                    break;
                case eSpells::CreateChest:
                    l_InventoryType = InventoryType::INVTYPE_CHEST;
                    break;
                case eSpells::CreateBoot:
                    l_InventoryType = InventoryType::INVTYPE_FEET;
                    break;
                case eSpells::CreateBracer:
                    l_InventoryType = InventoryType::INVTYPE_WRISTS;
                    break;
                case eSpells::CreateArcaneRelic:
                case eSpells::CreateLifeRelic:
                case eSpells::CreateBloodRelic:
                case eSpells::CreateFrostRelic:
                case eSpells::CreateFelRelic:
                case eSpells::CreateFireRelic:
                case eSpells::CreateStormRelic:
                case eSpells::CreateHolyRelic:
                case eSpells::CreateIronRelic:
                case eSpells::CreateShadowRelic:
                default:
                    l_InventoryType = InventoryType::INVTYPE_NON_EQUIP;
                    break;
                }

                /// Legendary
                if (l_Player->CompleteLegendaryActivity(LegendaryActivity::RelinquishedToken, 0, true, l_InventoryType))
                    return SpellCastResult::SPELL_CAST_OK;

                if (IsRelicSpell())
                    l_PossibleLoots = m_Relics;
                else
                    l_PossibleLoots = m_Loots[l_InventoryType];

                std::random_device l_RandomDevice;
                std::mt19937 l_RandomGenerator(l_RandomDevice());
                std::shuffle(l_PossibleLoots.begin(), l_PossibleLoots.end(), l_RandomGenerator);

                for (uint32 l_LootID : l_PossibleLoots)
                {
                    ItemTemplate const* l_ItemTemplate = sObjectMgr->GetItemTemplate(l_LootID);
                    if (!l_ItemTemplate || !l_ItemTemplate->IsStuff())
                        continue;

                    if (IsRelicSpell())
                    {
                        GemPropertiesEntry const* l_Gemroperties = sGemPropertiesStore.LookupEntry(l_ItemTemplate->GemProperties);
                        if (!l_Gemroperties)
                            continue;

                        if ((l_Gemroperties->Type == SocketColor::SOCKET_COLOR_RELIC_IRON && m_scriptSpellId == eSpells::CreateIronRelic) ||
                            (l_Gemroperties->Type == SocketColor::SOCKET_COLOR_RELIC_BLOOD && m_scriptSpellId == eSpells::CreateBloodRelic) ||
                            (l_Gemroperties->Type == SocketColor::SOCKET_COLOR_RELIC_SHADOW && m_scriptSpellId == eSpells::CreateShadowRelic) ||
                            (l_Gemroperties->Type == SocketColor::SOCKET_COLOR_RELIC_FEL && m_scriptSpellId == eSpells::CreateFelRelic) ||
                            (l_Gemroperties->Type == SocketColor::SOCKET_COLOR_RELIC_ARCANE && m_scriptSpellId == eSpells::CreateArcaneRelic) ||
                            (l_Gemroperties->Type == SocketColor::SOCKET_COLOR_RELIC_FROST && m_scriptSpellId == eSpells::CreateFrostRelic) ||
                            (l_Gemroperties->Type == SocketColor::SOCKET_COLOR_RELIC_FIRE && m_scriptSpellId == eSpells::CreateFireRelic) ||
                            (l_Gemroperties->Type == SocketColor::SOCKET_COLOR_RELIC_WIND && m_scriptSpellId == eSpells::CreateStormRelic) ||
                            (l_Gemroperties->Type == SocketColor::SOCKET_COLOR_RELIC_LIFE && m_scriptSpellId == eSpells::CreateLifeRelic) ||
                            (l_Gemroperties->Type == SocketColor::SOCKET_COLOR_RELIC_HOLY && m_scriptSpellId == eSpells::CreateHolyRelic))
                        {
                            m_ItemID = l_LootID;
                            break;
                        }
                        else
                            continue;
                    }
                    else if (!l_ItemTemplate->IsUsableBySpecialization(l_SpecID, l_Player->getLevel()))
                        continue;

                    m_ItemID = l_LootID;
                    break;
                }

                if (!m_ItemID)
                    return SpellCastResult::SPELL_FAILED_ERROR;

                ItemPosCountVec l_Destination;
                InventoryResult l_Message = l_Player->CanStoreNewItem(InventorySlot::NULL_BAG, InventorySlot::NULL_SLOT, l_Destination, m_ItemID, 1);

                if (l_Message != InventoryResult::EQUIP_ERR_OK)
                {
                    l_Player->SendEquipError(InventoryResult::EQUIP_ERR_INV_FULL, nullptr);
                    return SpellCastResult::SPELL_FAILED_DONT_REPORT;
                }

                return SpellCastResult::SPELL_CAST_OK;
            }

            void HandleCreateItem(SpellEffIndex p_EffectIndex)
            {
                PreventHitDefaultEffect(p_EffectIndex);

                Player* l_Player = GetCaster() ? GetCaster()->ToPlayer() : nullptr;
                if (!l_Player || !m_ItemID)
                    return;

                ItemContext l_Context = ItemContext::Ilvl910;

                ItemPosCountVec l_Destination;
                InventoryResult l_Message = l_Player->CanStoreNewItem(InventorySlot::NULL_BAG, InventorySlot::NULL_SLOT, l_Destination, m_ItemID, 1);

                if (l_Message != InventoryResult::EQUIP_ERR_OK)
                    return;

                std::vector<uint32> l_BonusList = { 3573, 3528 };
                Item::GenerateItemBonus(m_ItemID, l_Context, l_BonusList, false, l_Player);

                if (Item* l_Item = l_Player->StoreNewItem(l_Destination, m_ItemID, true, Item::GenerateItemRandomPropertyId(m_ItemID), l_BonusList))
                {
                    l_Player->SendNewItem(l_Item, 1, false, true, false, 0, l_Context);
                    l_Player->SendDisplayToast(m_ItemID, 1, 0, DisplayToastMethod::DISPLAY_TOAST_METHOD_LOOT, ToastTypes::TOAST_TYPE_NEW_ITEM, false, false, l_BonusList);
                }
            }

            void Register() override
            {
                OnCheckCast += SpellCheckCastFn(spell_argus_create_relinquished_items_SpellScript::HandleCheckCast);
                OnEffectHitTarget += SpellEffectFn(spell_argus_create_relinquished_items_SpellScript::HandleCreateItem, EFFECT_0, SPELL_EFFECT_LOOT_BONUS);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_argus_create_relinquished_items_SpellScript();
        }
};

/// Eredun Scroll - 246415
class spell_argus_eredun_scroll : public SpellScriptLoader
{
    public:
        spell_argus_eredun_scroll() : SpellScriptLoader("spell_argus_eredun_scroll") { }

        class spell_argus_eredun_scroll_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_argus_eredun_scroll_SpellScript);

            std::vector<uint32> m_Buffs =
            {
                245941,
                246423,
                246424
            };

            void HandleHitTarget(SpellEffIndex /*p_EffIndex*/)
            {
                Unit* l_Target = GetHitUnit();
                if (!l_Target)
                    return;

                std::random_device l_RandomDevice;
                std::mt19937 l_RandomGenerator(l_RandomDevice());
                std::shuffle(m_Buffs.begin(), m_Buffs.end(), l_RandomGenerator);

                for (auto l_l_Itr : m_Buffs)
                {
                    if (!l_Target->HasAura(l_l_Itr))
                    {
                        l_Target->CastSpell(l_Target, l_l_Itr, true);
                        break;
                    }
                }
            }

            void Register() override
            {
                OnEffectHitTarget += SpellEffectFn(spell_argus_eredun_scroll_SpellScript::HandleHitTarget, EFFECT_0, SPELL_EFFECT_SCRIPT_EFFECT);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_argus_eredun_scroll_SpellScript();
        }
};

/// Broken Soul Fragment - 252060
class spell_argus_broken_soul_fragment : public SpellScriptLoader
{
    public:
        spell_argus_broken_soul_fragment() : SpellScriptLoader("spell_argus_broken_soul_fragment") { }

        class spell_argus_broken_soul_fragment_AuraScript : public AuraScript
        {
            PrepareAuraScript(spell_argus_broken_soul_fragment_AuraScript);

            enum eSpells
            {
                Spell_BrokenEssenceAreatrigger = 252062
            };

            void HandleOnProc(ProcEventInfo& /*p_ProcEventInfo*/)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                l_Caster->CastSpell(l_Caster, eSpells::Spell_BrokenEssenceAreatrigger, true);
            }

            void Register() override
            {
                OnProc += AuraProcFn(spell_argus_broken_soul_fragment_AuraScript::HandleOnProc);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_argus_broken_soul_fragment_AuraScript();
        }
};

/// Unlock the Triumvirate Armory - 249655
class spell_argus_unlock_the_triumvirate_armory : public SpellScriptLoader
{
    public:
        spell_argus_unlock_the_triumvirate_armory() : SpellScriptLoader("spell_argus_unlock_the_triumvirate_armory") { }

        class spell_argus_unlock_the_triumvirate_armory_AuraScript : public AuraScript
        {
            PrepareAuraScript(spell_argus_unlock_the_triumvirate_armory_AuraScript);

            enum eNpcs
            {
                Npc_CommanderAtalaa = 125620
            };

            enum eActions
            {
                Action_AtalaaSayLine = 1
            };

            void HandleOnPeriodic(AuraEffect const* /*p_AuraEffect*/)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                l_Caster->CastSpell(l_Caster, GetSpellInfo()->Effects[EFFECT_0].TriggerSpell, true);

                if (Creature* l_Creature = l_Caster->FindNearestCreature(eNpcs::Npc_CommanderAtalaa, 100.0f, true))
                {
                    l_Creature->AI()->Talk(0, l_Caster->GetGUID());
                }
                else if (Creature* l_Creature = l_Caster->FindNearestCreature(eNpcs::Npc_CommanderAtalaa, 100.0f, false))
                {
                    l_Creature->Respawn();
                    l_Creature->AI()->Talk(0, l_Caster->GetGUID());
                }
            }

            void Register() override
            {
                OnEffectPeriodic += AuraEffectPeriodicFn(spell_argus_unlock_the_triumvirate_armory_AuraScript::HandleOnPeriodic, EFFECT_0, SPELL_AURA_PERIODIC_TRIGGER_SPELL);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_argus_unlock_the_triumvirate_armory_AuraScript();
        }
};

/// Blind Recompense - 249681
class spell_argus_blind_recompense : public SpellScriptLoader
{
    public:
        spell_argus_blind_recompense() : SpellScriptLoader("spell_argus_blind_recompense") { }

        class spell_argus_blind_recompense_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_argus_blind_recompense_SpellScript);

            enum eSpells
            {
                Spell_BlindRecompenseDamage = 249684
            };

            void HandleAfterCast()
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                Position const l_CasterPos = l_Caster->GetPosition();
                Position l_DestPos = l_CasterPos;
                uint16 l_Delay = 0;

                for (uint8 l_Itr = 0; l_Itr < 8; l_Itr++)
                {
                    float l_Angle = l_CasterPos.GetOrientation();

                    if (!(l_Itr % 2))
                    {
                        if (!l_Itr)
                        {
                            l_DestPos.SimplePosXYRelocationByAngle(l_DestPos, 4.0f, l_Angle - 0.4f, true);
                        }
                        else
                        {
                            l_DestPos.SimplePosXYRelocationByAngle(l_DestPos, 4.0f, l_Angle - 0.7f, true);
                        }

                        l_DestPos.m_positionZ = l_Caster->GetMap()->GetHeight(l_DestPos.m_positionX, l_DestPos.m_positionY, l_DestPos.m_positionZ);

                        l_Caster->AddDelayedEvent([l_Caster, l_DestPos]() -> void
                        {
                            l_Caster->CastSpell(l_DestPos, eSpells::Spell_BlindRecompenseDamage, true);
                        }, l_Delay);
                    }
                    else
                    {
                        l_DestPos.SimplePosXYRelocationByAngle(l_DestPos, 4.0f, l_Angle + 0.7f, true);
                        l_DestPos.m_positionZ = l_Caster->GetMap()->GetHeight(l_DestPos.m_positionX, l_DestPos.m_positionY, l_DestPos.m_positionZ);

                        l_Caster->AddDelayedEvent([l_Caster, l_DestPos]() -> void
                        {
                            l_Caster->CastSpell(l_DestPos, eSpells::Spell_BlindRecompenseDamage, true);
                        }, l_Delay);
                    }

                    l_Delay += 300;
                }
            }

            void Register() override
            {
                AfterCast += SpellCastFn(spell_argus_blind_recompense_SpellScript::HandleAfterCast);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_argus_blind_recompense_SpellScript();
        }
};

/// Holy Retribution - 249902
class spell_argus_holy_retribution : public SpellScriptLoader
{
    public:
        spell_argus_holy_retribution() : SpellScriptLoader("spell_argus_holy_retribution") { }

        class spell_argus_holy_retribution_AuraScript : public AuraScript
        {
            PrepareAuraScript(spell_argus_holy_retribution_AuraScript);

            enum eSpells
            {
                Spell_HolyRetributionDamage = 249901,
                Spell_HolyRetributionSlow = 249903
            };

            void HandleOnPeriodic(AuraEffect const* /*p_AuraEffect*/)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                Unit* l_Owner = l_Caster->GetAnyOwner();
                if (!l_Owner)
                    return;

                l_Owner->CastSpell(l_Caster, eSpells::Spell_HolyRetributionDamage, true);
                l_Owner->CastSpell(l_Caster, eSpells::Spell_HolyRetributionSlow, true);
            }

            void Register() override
            {
                OnEffectPeriodic += AuraEffectPeriodicFn(spell_argus_holy_retribution_AuraScript::HandleOnPeriodic, EFFECT_0, SPELL_AURA_PERIODIC_DUMMY);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_argus_holy_retribution_AuraScript();
        }
};

/// Armory Door Opened - 249444
class spell_argus_armory_door_opened : public SpellScriptLoader
{
    public:
        spell_argus_armory_door_opened() : SpellScriptLoader("spell_argus_armory_door_opened") { }

        class spell_argus_armory_door_opened_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_argus_armory_door_opened_SpellScript);

            enum eGobs
            {
                Gob_CollisionWall = 272950,
                Gob_ArmorySeal = 272954
            };

            void HandleAfterCast()
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                if (GameObject* l_Gob = l_Caster->FindNearestGameObject(eGobs::Gob_CollisionWall, 50.0f))
                {
                    l_Gob->Delete();
                }

                if (GameObject* l_Gob = l_Caster->FindNearestGameObject(eGobs::Gob_ArmorySeal, 50.0f))
                {
                    l_Gob->Delete();
                }
            }

            void Register() override
            {
                AfterCast += SpellCastFn(spell_argus_armory_door_opened_SpellScript::HandleAfterCast);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_argus_armory_door_opened_SpellScript();
        }
};

/// Light's Judgment - 248185
class spell_argus_lights_judgment_long_overdue : public SpellScriptLoader
{
    public:
        spell_argus_lights_judgment_long_overdue() : SpellScriptLoader("spell_argus_lights_judgment_long_overdue") { }

        class spell_argus_lights_judgment_long_overdue_SpellScript : public SpellScript
        {
            PrepareSpellScript(spell_argus_lights_judgment_long_overdue_SpellScript);

            enum eSpells
            {
                Spell_LightsJudgmentKnockback = 248408
            };

            enum eNpcs
            {
                Npc_ArgussianHeartwell = 124904
            };

            void HandleOnEffectHit(SpellEffIndex /*effIndex*/)
            {
                Unit* l_Caster = GetCaster();
                Unit* l_Target = GetHitUnit();
                WorldLocation const* l_Worldloc = GetHitDest();
                if (!l_Caster || !l_Caster->ToPlayer() || !l_Target ||
                    l_Target->GetEntry() != eNpcs::Npc_ArgussianHeartwell ||
                    !l_Worldloc)
                    return;

                l_Target->AddToHideList(l_Caster->GetGUID(), 360000);
                l_Target->DestroyForPlayer(l_Caster->ToPlayer());
                l_Caster->CastSpell(l_Worldloc, eSpells::Spell_LightsJudgmentKnockback, true);
            }

            void Register() override
            {
                OnEffectHitTarget += SpellEffectFn(spell_argus_lights_judgment_long_overdue_SpellScript::HandleOnEffectHit, EFFECT_0, SPELL_EFFECT_DUMMY);
            }
        };

        SpellScript* GetSpellScript() const override
        {
            return new spell_argus_lights_judgment_long_overdue_SpellScript();
        }
};

/// Fel Heart Bond - 248011
class spell_argus_fel_heart_bond : public SpellScriptLoader
{
    public:
        spell_argus_fel_heart_bond() : SpellScriptLoader("spell_argus_fel_heart_bond") { }

        class spell_argus_fel_heart_bond_AuraScript : public AuraScript
        {
            PrepareAuraScript(spell_argus_fel_heart_bond_AuraScript);

            enum eSpells
            {
                Spell_FelHeartBondHeal = 255222,
                Spell_FelHeartBondImunne = 248022,
                Spell_FelHeartBondCooldown = 248419
            };

            void HandleOnAbsorb(AuraEffect* /*p_AurEff*/, DamageInfo& p_DmgInfo, uint32& p_AbsorbAmount)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                if (int32((l_Caster->GetHealth() - p_DmgInfo.GetAmount())) > 0)
                {
                    p_AbsorbAmount = 0;
                }
                else
                {
                    if (!l_Caster->HasAura(eSpells::Spell_FelHeartBondCooldown))
                    {
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_FelHeartBondImunne, true);
                        l_Caster->CastSpell(l_Caster, eSpells::Spell_FelHeartBondCooldown, true);
                    }
                    else
                    {
                        p_AbsorbAmount = 0;
                    }
                }
            }

            void HandleOnPeriodic(AuraEffect const* /*p_AuraEffect*/)
            {
                Unit* l_Caster = GetCaster();
                if (!l_Caster)
                    return;

                if (!l_Caster->isInCombat())
                {
                    l_Caster->CastSpell(l_Caster, eSpells::Spell_FelHeartBondHeal, true);
                }
            }

            void Register() override
            {
                OnEffectAbsorb += AuraEffectAbsorbFn(spell_argus_fel_heart_bond_AuraScript::HandleOnAbsorb, EFFECT_0, SPELL_AURA_SCHOOL_ABSORB);
                OnEffectPeriodic += AuraEffectPeriodicFn(spell_argus_fel_heart_bond_AuraScript::HandleOnPeriodic, EFFECT_1, SPELL_AURA_PERIODIC_DUMMY);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_argus_fel_heart_bond_AuraScript();
        }
};

// Spire of Woe Trigger - 248564 - 11059
class at_spire_of_woe : public AreaTriggerEntityScript
{
    public:
        at_spire_of_woe() : AreaTriggerEntityScript("at_spire_of_woe"){ }

        enum eSpells
        {
            Spell_WoefulBlast = 248572
        };

        enum eNpcs
        {
            Npc_SpireOfWoe = 125194
        };

        bool OnAddTarget(AreaTrigger* p_Areatrigger, Unit* p_Target) override
        {
            std::list<Creature*> l_CreatureList;
            p_Areatrigger->GetCreatureListWithEntryInGrid(l_CreatureList, eNpcs::Npc_SpireOfWoe, 30.0f);

            if (l_CreatureList.empty())
                return false;

            for (auto l_Itr : l_CreatureList)
            {
                l_Itr->CastSpell(p_Target, eSpells::Spell_WoefulBlast);
            }

            return false;
        }

        bool OnRemoveTarget(AreaTrigger* p_Areatrigger, Unit* p_Target) override
        {
            p_Target->RemoveAurasDueToSpell(eSpells::Spell_WoefulBlast);

            return false;
        }

        AreaTriggerEntityScript* GetAI() const override
        {
            return new at_spire_of_woe();
        }
};

// Broken Essence - Called by spell: 252062
class at_argus_broken_essence : public AreaTriggerEntityScript
{
    public:
        at_argus_broken_essence() : AreaTriggerEntityScript("at_argus_broken_essence"){ }

        enum eSpells
        {
            Spell_BrokenEssenceHeal = 252061
        };

        bool OnAddTarget(AreaTrigger* p_Areatrigger, Unit* p_Target) override
        {
            if (p_Target->ToPlayer() && p_Target == p_Areatrigger->GetCaster())
            {
                p_Target->CastSpell(p_Target, eSpells::Spell_BrokenEssenceHeal, true);
                p_Areatrigger->Remove();
            }

            return false;
        }

        AreaTriggerEntityScript* GetAI() const override
        {
            return new at_argus_broken_essence();
        }
};

// Custom Armor of the Triumvirate Areatrigger - 48231
class at_argus_armor_of_the_triumvirate : public AreaTriggerEntityScript
{
    public:
        at_argus_armor_of_the_triumvirate() : AreaTriggerEntityScript("at_argus_armor_of_the_triumvirate") { }

        enum eSpells
        {
            Spell_OpenTheArmory = 249656
        };

        enum eQuests
        {
            Quest_ArmorOfTheTriumvirate = 48231
        };

        bool OnAddTarget(AreaTrigger* /*p_Areatrigger*/, Unit* p_Target) override
        {
            if (p_Target->ToPlayer() && p_Target->ToPlayer()->HasQuest(eQuests::Quest_ArmorOfTheTriumvirate))
            {
                p_Target->CastSpell(p_Target, eSpells::Spell_OpenTheArmory, true);
            }

            return false;
        }

        bool OnRemoveTarget(AreaTrigger* /*p_Areatrigger*/, Unit* p_Target) override
        {
            p_Target->RemoveAura(eSpells::Spell_OpenTheArmory);
            return false;
        }

        AreaTriggerEntityScript* GetAI() const override
        {
            return new at_argus_armor_of_the_triumvirate();
        }
};

class playerscript_argus_scripts : public PlayerScript
{
    public:
        playerscript_argus_scripts() : PlayerScript("playerscript_argus_scripts") {}

        enum eObjectives
        {
            Obj_EredarEncountered = 289524,
            Obj_FiendEncountered = 292223,
            Obj_ConquerorEncountered = 292222,
            Obj_RubbleCleared = 291227,
            Obj_PlaceTheLightforgedBeacon = 292682,
            Obj_VisionWitnessed = 291094,
            Obj_FifteenDemonsSlain = 291831,
            Obj_ThirtyDemonsSlain = 292579,
            Obj_LordNathraxasSlain = 291338,
            Obj_FragmentOfAcuity = 290757,
            Obj_FragmentOfWit = 290901,
            Obj_FragmentOfGuile = 292420,
            Obj_EnterTheGatekeepersAlcove = 290926,
            Obj_ShipVisible = 291400,
            Obj_EnterTheVoidTear = 290095,
            Obj_DismantledPortalExamined = 290096,
            Obj_ImageOfSaprishExamined = 290652,
            Obj_VoidforgeExamined = 290100,
            Obj_ImbueARelicWithNetherlightFortification = 61985,
            Obj_CrestOfKnowledgePlacedOnMacAree = 292340,
            Obj_HeartwellsMarked = 290069,
            Obj_DemonGarrisonSlain = 291236,
            Obj_CollectVestigesOfLight = 293838,
            Obj_TuralyonAndVelenConversation = 293839
        };

        enum eKillcredits
        {
            Killcredit_ShipVisible = 125145,
            Killcredit_ListenToAlleriasTale = 121230,
            Killcredit_FearVisionSeen = 125791,
            Killcredit_AnotherVisionSeen = 125817,
            Killcredit_GoToTheKrokulHovelByTaxi = 123851,
            Killcredit_CrownOfTheTriumvirateActivated = 126624,
            Killcredit_TuralyonAndVelenConversation = 293839
        };

        enum eConversations
        {
            Conv_EredarEncountered = 5736,
            Conv_FiendEncountered = 5735,
            Conv_ConquerorEncountered = 5737,
            Conv_AggonarInAnger = 4981,
            Conv_ConsoleActivate = 5739,
            Conv_VisionWitnessed = 5390,
            Conv_FifteenDemonsSlain = 5634,
            Conv_ThirtyDemonsSlain = 5636,
            Conv_QuestDawnOfJusticeReward = 5637,
            Conv_LordNathraxasSlain = 5641,
            Conv_SigilLooted = 5309,
            Conv_FirstTalgathConv = 5436,
            Conv_SecondTalgathConv = 5446,
            Conv_AfterAlleriasTaleHeard = 5742,
            Conv_AlleriaFoundSurvivor = 5755,
            Conv_DismantledPortalExamined = 5856,
            Conv_ImageOfSaprishExamined = 5857,
            Conv_VoidforgeExamined = 5858,
            Conv_AfterFearVisionSeen = 5613,
            Conv_AfterVisionOfAnother = 5626,
            Conv_HighInquisitorRaalgarCanBeKilled = 5231
        };

        enum eQuests
        {
            Quest_ThreatReduction = 46841,
            Quest_BringingTheBigGuns = 47526,
            Quest_LightlyRoasted = 47754,
            Quest_DawnOfJustice = 47992,
            Quest_LordOfTheSpire = 47993,
            Quest_GatekeepersChallengeCunning = 47685,
            Quest_TheSigilOfAwakening = 48107,
            Quest_CustomAlleriaAndVereesaEvent = 481072,
            Quest_FlankingManeuvers = 47853,
            Quest_TalgathsForces = 48345,
            Quest_WhispersFromOronaar = 40761,
            Quest_ArkhaansPrayers = 47101,
            Quest_VisionsOfFear = 48272,
            Quest_VisionsOfAnother = 48280,
            Quest_GatekeepersChallengeTenacity = 47689,
            Quest_WoahNelly = 48544,
            Quest_TheNetherlightCrucible = 49224,
            Quest_GatheringLight = 47431,
            Quest_AerialSuperiority = 48285,
            Quest_EmpyrialStrength = 48055,
            Quest_ACrowningAchievement = 48076,
            Quest_CustomArkhaanMoveComplete = 471010,
            Quest_EssenceOfTheLightMother = 49143
        };

        enum eSpells
        {
            Spell_WarpInCompleteScene = 250204,
            Spell_LightsJudgment = 248152,
            Spell_TakeMatrixAndActivateLightsJudgment = 251548,
            Spell_ArcaneBarrier = 245703,
            Spell_RemoveAllChildAuras = 246477,
            Spell_TheSigilOfAwakening = 254576,
            Spell_SummonTuralyon = 247282,
            Spell_Override = 251167,
            Spell_CragscalerSteed = 251804,
            Spell_ChooseLightforgedWarframe = 249003,
            Spell_LightforgedWarframe = 254808,
            Spell_ChooseLightsJudgment = 248244,
            Spell_LightsJudgmentOverride = 254807,
            Spell_ChooseShroudOfArcaneEchoes = 248999,
            Spell_ShroudOfArcaneEchoes = 254809,
            Spell_ChooseFelHeartOfArgus = 248245,
            Spell_FelHeartOfArgus = 254810,
            Spell_EmpyrialRivets = 248864,
            Spell_EmpyrialBlackPlate = 248869,
            Spell_EmpyrialBreastPlate = 248870,
            Spell_EmpyrialChestPlate = 248867,
            Spell_EmpyrialStrengthUnlearn = 248916,
            Spell_EmpyrialFloridMalachiteSetting = 248939,
            Spell_EmpyrialHesselianSetting = 248938,
            Spell_EmpyrialCirclet = 248937,
            Spell_EmpyrialCrown = 248940,
            Spell_EmpyrialCrownUnlearn = 248943
        };

        enum eGobs
        {
            Gob_Rubble = 244989
        };

        enum eNpcs
        {
            Npc_Turalyon = 122621,
            Npc_Alleria = 123595,
            Npc_VelenExodusPoint = 125968,
            Npc_Ymera = 123413,
            Npc_AlleriaForVereesaEvent = 121230,
            Npc_ProphetVelenCrestOfKnowledge = 128722
        };

        enum eActions
        {
            Action_TuralyonMoveToXenedar = 1,
            Action_AlleriaMoveToXenedar = 2,
            Action_AlleriaStartVereesaEvent = 3,
            Action_AlleriaFirstMoveIntoVoid = 37,
            Action_VelenMoveToPedestal = 38
        };

        enum eItems
        {
            Item_FragmentOfAcuity = 151126,
            Item_FragmentOfWit = 151127,
            Item_FragmentOfGuile = 151128,
            Item_SigilOfAwakening = 151476
        };

        enum eTaxiNodes
        {
            Node_KrokulHovel = 1928
        };

        enum eGarrisonMissions
        {
            Mission_DarkfallRidgeSupplies = 1780
        };

        enum eAreas
        {
            KrokuunVindicaar      = 8714,
            MacAreeVindicaar      = 8915,
            AtoranWastesVindicaar = 8916,
        };

        std::array<Position const, 2> m_RubblesSpawnPos =
        { {
            { 1248.931f, 2417.09f, 369.1506f, 5.605561f },
            { 1263.319f, 2436.918f, 381.506f, 5.605561f }
        } };

        Position const m_TuralyonSpawnPos = { 1222.33f, 2387.84f, 367.151f, 1.616825f };
        Position const m_AlleriaSpawnPos = { 1220.217f, 2380.619f, 369.0884f, 2.066292f };
        Position const m_VelenSpawnPos = { 4837.398f, 9743.249f, -65.13998f, 0.2313339f };
        Position const m_GreenShieldPos = { 5648.417969f, 9468.331055f, -66.795563f };
        Position const m_PurpleShieldBottomPos = { 5650.181152f, 9559.284180f, -66.169464f };
        Position const m_PurpleShieldTopPos = { 5665.332031f, 9549.872070f, -62.103710f };
        Position const m_OrangeShieldPos = { 5685.546875f, 9522.186523f, -66.280479f };
        Position const m_HallOfEnlightenmentShieldPos = { 5532.074707f, 9343.777344f, -62.911007f };
        Position const m_AlleriaForVereesaEventSpawnPos = { 471.658f, 1414.3f, 763.85f, 0.7204213f };
        Position const m_TalgathFirstConvPos = { 6195.605957f, 9720.079102f, -78.580238f };
        Position const m_AlleriaInVoidSpawnPos = { 5495.951f, 10319.12f, -100.625f, 5.463523f };
        Position const m_VelenCrestOfKnowledgeSpawnPos = { 4671.06f, 9848.654f, 56.23282f, 3.40401f };

        void OnUpdateZone(Player* p_Player, uint32 p_NewZoneID, uint32 /*p_OldZoneID*/, uint32 p_NewAreaID) override
        {
            if (p_NewZoneID == 8701)
            {
                if (p_Player->GetQuestStatus(eQuests::Quest_GatekeepersChallengeCunning) != QUEST_STATUS_COMPLETE &&
                    !p_Player->IsQuestRewarded(eQuests::Quest_GatekeepersChallengeCunning))
                {
                    if (p_Player->GetQuestObjectiveCounter(eObjectives::Obj_FragmentOfGuile) == 0)
                        p_Player->SetInPhase(5610, true, true);
                    if (p_Player->GetQuestObjectiveCounter(eObjectives::Obj_FragmentOfAcuity) == 0)
                        p_Player->SetInPhase(5611, true, true);
                    if (p_Player->GetQuestObjectiveCounter(eObjectives::Obj_FragmentOfWit) == 0)
                        p_Player->SetInPhase(5612, true, true);
                }
            }

            if (p_NewAreaID == 8714)
            {
                if (!p_Player->IsQuestRewarded(eQuests::Quest_CustomAlleriaAndVereesaEvent) &&
                    p_Player->IsQuestRewarded(eQuests::Quest_TheSigilOfAwakening))
                {
                    if (Quest const* l_Quest = sObjectMgr->GetQuestTemplate(eQuests::Quest_CustomAlleriaAndVereesaEvent))
                    {
                        p_Player->RewardQuest(l_Quest, 0, nullptr, false);
                    }

                    if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_AlleriaForVereesaEvent, m_AlleriaForVereesaEventSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                    {
                        l_Creature->AI()->DoAction(eActions::Action_AlleriaStartVereesaEvent);
                    }
                }
            }
        }

        void OnItemLooted(Player* p_Player, Item* p_Item) override
        {
            switch (p_Item->GetEntry())
            {
            case  eItems::Item_FragmentOfAcuity:
            {
                p_Player->DelayedCastSpell(p_Player, eSpells::Spell_RemoveAllChildAuras, true, 1000);
                p_Player->SetInPhase(5611, true, false);
                break;
            }
            case  eItems::Item_FragmentOfWit:
            {
                p_Player->DelayedCastSpell(p_Player, eSpells::Spell_RemoveAllChildAuras, true, 1000);
                p_Player->SetInPhase(5612, true, false);
                break;
            }
            case  eItems::Item_FragmentOfGuile:
            {
                p_Player->DelayedCastSpell(p_Player, eSpells::Spell_RemoveAllChildAuras, true, 1000);
                p_Player->SetInPhase(5610, true, false);
                break;
            }
            case eItems::Item_SigilOfAwakening:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_SigilLooted, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                p_Player->CastSpell(p_Player, eSpells::Spell_TheSigilOfAwakening, true);
                break;
            }
            default:
                break;
            }
        }

        void OnUpdateMovement(Player* p_Player, uint16 /*p_OpcodeID*/) override
        {
            if (p_Player && p_Player->GetAreaId() == eAreas::KrokuunVindicaar)
            {
                if (p_Player->GetPositionZ() < 715.0f)
                    p_Player->TeleportTo(1220, -852.87f, 4276.52f, 747, 3.f);
            }

            if (p_Player && p_Player->GetAreaId() == eAreas::MacAreeVindicaar)
            {
                if (p_Player->GetPositionZ() < 12.0f)
                    p_Player->TeleportTo(1220, -852.87f, 4276.52f, 747, 3.f);
            }

            if (p_Player && p_Player->GetAreaId() == eAreas::AtoranWastesVindicaar)
            {
                if (p_Player->GetPositionZ() < -121.848f)
                    p_Player->TeleportTo(1220, -852.87f, 4276.52f, 747, 3.f);
            }

            if (p_Player && p_Player->GetAreaId() == 8882)
            {
                if ((p_Player->HasInPhaseList(5610) || p_Player->HasInPhaseList(480971)) && p_Player->GetExactDist(&m_PurpleShieldBottomPos) < 10.0f)
                {
                    p_Player->CastSpell(p_Player, eSpells::Spell_ArcaneBarrier, true);
                }
                else if ((p_Player->HasInPhaseList(5610) || p_Player->HasInPhaseList(480971)) && p_Player->GetExactDist(&m_PurpleShieldTopPos) < 7.0f)
                {
                    p_Player->CastSpell(p_Player, eSpells::Spell_ArcaneBarrier, true);
                }
                else if ((p_Player->HasInPhaseList(5611) || p_Player->HasInPhaseList(480970)) && p_Player->GetExactDist(&m_GreenShieldPos) < 13.0f)
                {
                    p_Player->CastSpell(p_Player, eSpells::Spell_ArcaneBarrier, true);
                }
                else if ((p_Player->HasInPhaseList(5612) || p_Player->HasInPhaseList(480972)) && p_Player->GetExactDist(&m_OrangeShieldPos) < 7.0f)
                {
                    p_Player->CastSpell(p_Player, eSpells::Spell_ArcaneBarrier, true);
                }
                else if (p_Player->GetQuestObjectiveCounter(eObjectives::Obj_EnterTheGatekeepersAlcove) == 0 && p_Player->GetExactDist(&m_HallOfEnlightenmentShieldPos) < 8.0f &&
                    p_Player->HasQuest(eQuests::Quest_GatekeepersChallengeTenacity))
                {
                    p_Player->CastSpell(p_Player, eSpells::Spell_ArcaneBarrier, true);
                }
            }

            if (p_Player && p_Player->GetAreaId() == 8884 && p_Player->GetExactDist(&m_TalgathFirstConvPos) < 50.0f &&
                p_Player->HasQuest(eQuests::Quest_FlankingManeuvers) && p_Player->GetQuestObjectiveCounter(eObjectives::Obj_ShipVisible) == 0)
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_FirstTalgathConv, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                p_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_ShipVisible);
            }
        }

        void OnQuestComplete(Player* p_Player, const Quest* p_Quest) override
        {
            switch (p_Quest->GetQuestId())
            {
            case eQuests::Quest_ThreatReduction:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AggonarInAnger, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                p_Player->RemoveAura(eSpells::Spell_Override);
                break;
            }
            case eQuests::Quest_BringingTheBigGuns:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ConsoleActivate, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                break;
            }
            case eQuests::Quest_FlankingManeuvers:
            {
                if (p_Player->GetQuestStatus(eQuests::Quest_TalgathsForces) == QUEST_STATUS_COMPLETE)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_SecondTalgathConv, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }

                break;
            }
            case eQuests::Quest_TalgathsForces:
            {
                if (p_Player->GetQuestStatus(eQuests::Quest_FlankingManeuvers) == QUEST_STATUS_COMPLETE)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_SecondTalgathConv, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }

                break;
            }
            case eQuests::Quest_WhispersFromOronaar:
            {
                if (p_Player->GetQuestStatus(eQuests::Quest_ArkhaansPrayers) == QUEST_STATUS_COMPLETE)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AlleriaFoundSurvivor, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }

                break;
            }
            case eQuests::Quest_ArkhaansPrayers:
            {
                if (p_Player->GetQuestStatus(eQuests::Quest_WhispersFromOronaar) == QUEST_STATUS_COMPLETE)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AlleriaFoundSurvivor, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }

                break;
            }
            default:
                break;
            }
        }

        void OnLogin(Player* p_Player) override
        {
            if (p_Player->GetQuestRewardStatus(eQuests::Quest_DawnOfJustice) &&
                !p_Player->HasQuest(eQuests::Quest_LordOfTheSpire) &&
                !p_Player->GetQuestRewardStatus(eQuests::Quest_LordOfTheSpire))
            {
                Quest const* l_Quest = sObjectMgr->GetQuestTemplate(eQuests::Quest_LordOfTheSpire);
                if (!l_Quest)
                    return;

                p_Player->AddQuest(l_Quest, nullptr);
            }

            if (p_Player->GetZoneId() == 8701 && p_Player->HasAura(eSpells::Spell_SummonTuralyon))
            {
                Position l_SummonPos;
                p_Player->GetRandomNearPosition(l_SummonPos, 5.0f);
                p_Player->CastSpell(l_SummonPos, eSpells::Spell_SummonTuralyon, true);
            }

            if (p_Player->IsQuestRewarded(eQuests::Quest_WhispersFromOronaar) &&
                p_Player->IsQuestRewarded(eQuests::Quest_ArkhaansPrayers) &&
                !p_Player->IsQuestRewarded(eQuests::Quest_CustomArkhaanMoveComplete))
            {
                if (Quest const* l_Quest = sObjectMgr->GetQuestTemplate(eQuests::Quest_CustomArkhaanMoveComplete))
                {
                    p_Player->RewardQuest(l_Quest, 0, nullptr, false);
                }
            }

            if (p_Player->HasQuest(eQuests::Quest_EssenceOfTheLightMother) &&
                p_Player->GetQuestObjectiveCounter(eObjectives::Obj_CollectVestigesOfLight) == 3 &&
                !p_Player->GetQuestObjectiveCounter(eObjectives::Obj_TuralyonAndVelenConversation))
            {
                p_Player->QuestObjectiveOptionalSatisfy(eKillcredits::Killcredit_TuralyonAndVelenConversation);
            }
        }

        void OnQuestAccept(Player * p_Player, const Quest * p_Quest) override
        {
            switch (p_Quest->GetQuestId())
            {
            case eQuests::Quest_LightlyRoasted:
            {
                p_Player->CastSpell(p_Player, eSpells::Spell_LightsJudgment, true);
                break;
            }
            case eQuests::Quest_WoahNelly:
            {
                p_Player->CastSpell(p_Player, eSpells::Spell_CragscalerSteed, true);
                break;
            }
            case eQuests::Quest_EmpyrialStrength:
            {
                p_Player->learnSpell(eSpells::Spell_EmpyrialBlackPlate, false);
                p_Player->learnSpell(eSpells::Spell_EmpyrialRivets, false);
                p_Player->learnSpell(eSpells::Spell_EmpyrialBreastPlate, false);
                p_Player->learnSpell(eSpells::Spell_EmpyrialChestPlate, false);
                break;
            }
            case eQuests::Quest_ACrowningAchievement:
            {
                p_Player->learnSpell(eSpells::Spell_EmpyrialFloridMalachiteSetting, false);
                p_Player->learnSpell(eSpells::Spell_EmpyrialHesselianSetting, false);
                p_Player->learnSpell(eSpells::Spell_EmpyrialCirclet, false);
                p_Player->learnSpell(eSpells::Spell_EmpyrialCrown, false);
                break;
            }
            default:
                break;
            }
        }

        void OnQuestAbandon(Player* p_Player, Quest const* p_Quest) override
        {
            switch (p_Quest->GetQuestId())
            {
            case eQuests::Quest_LightlyRoasted:
            {
                p_Player->RemoveAura(eSpells::Spell_LightsJudgment);
                break;
            }
            case eQuests::Quest_GatekeepersChallengeCunning:
            {
                p_Player->CastSpell(p_Player, eSpells::Spell_RemoveAllChildAuras, true);
                break;
            }
            case eQuests::Quest_EmpyrialStrength:
            {
                p_Player->CastSpell(p_Player, eSpells::Spell_EmpyrialStrengthUnlearn, true);
                break;
            }
            case eQuests::Quest_ACrowningAchievement:
            {
                p_Player->CastSpell(p_Player, eSpells::Spell_EmpyrialCrownUnlearn, true);
                break;
            }
            default:
                break;
            }
        }

        void OnQuestReward(Player* p_Player, Quest const* p_Quest) override
        {
            switch (p_Quest->GetQuestId())
            {
            case eQuests::Quest_BringingTheBigGuns:
            {
                p_Player->CastSpell(p_Player, eSpells::Spell_WarpInCompleteScene, true);
                break;
            }
            case eQuests::Quest_LightlyRoasted:
            {
                p_Player->RemoveAura(eSpells::Spell_LightsJudgment);
                break;
            }
            case eQuests::Quest_DawnOfJustice:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_QuestDawnOfJusticeReward, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                Quest const* l_Quest = sObjectMgr->GetQuestTemplate(eQuests::Quest_LordOfTheSpire);
                if (!l_Quest)
                    return;

                p_Player->AddQuest(l_Quest, nullptr);
                break;
            }
            case eQuests::Quest_EmpyrialStrength:
            {
                p_Player->CastSpell(p_Player, eSpells::Spell_EmpyrialStrengthUnlearn, true);
                break;
            }
            case eQuests::Quest_WoahNelly:
            {
                MS::Garrison::Manager* l_Garrison = p_Player->GetGarrison();
                if (!l_Garrison)
                    return;

                l_Garrison->AddMission(eGarrisonMissions::Mission_DarkfallRidgeSupplies);
                break;
            }
            case eQuests::Quest_AerialSuperiority:
            {
                p_Player->ExitVehicle();
                p_Player->SetInPhase(9634, true, false);
                break;
            }
            case eQuests::Quest_ACrowningAchievement:
            {
                p_Player->CastSpell(p_Player, eSpells::Spell_EmpyrialCrownUnlearn, true);
                break;
            }
            default:
                break;
            }
        }

        void OnObjectiveValidate(Player* p_Player, uint32 /*p_QuestID*/, uint32 p_ObjectiveID) override
        {
            switch (p_ObjectiveID)
            {
            case eObjectives::Obj_EredarEncountered:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_EredarEncountered, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                break;
            }
            case eObjectives::Obj_FiendEncountered:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_FiendEncountered, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                break;
            }
            case eObjectives::Obj_ConquerorEncountered:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ConquerorEncountered, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                break;
            }
            case eObjectives::Obj_RubbleCleared:
            {
                for (auto l_Itr : m_RubblesSpawnPos)
                {
                    if (GameObject* l_Gob = p_Player->SummonGameObject(eGobs::Gob_Rubble, l_Itr, 0, 0, p_Player->GetGUID()))
                    {
                        l_Gob->SendGameObjectActivateAnimKit(2560);

                        l_Gob->AddDelayedEvent([l_Gob]() -> void
                        {
                            l_Gob->Delete();
                        }, 1000);
                    }
                }

                if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_Turalyon, m_TuralyonSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_TuralyonMoveToXenedar);
                }

                if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_Alleria, m_AlleriaSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_AlleriaMoveToXenedar);
                }

                break;
            }
            case eObjectives::Obj_VisionWitnessed:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_VisionWitnessed, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                break;
            }
            case eObjectives::Obj_FifteenDemonsSlain:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_FifteenDemonsSlain, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                break;
            }
            case eObjectives::Obj_ThirtyDemonsSlain:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ThirtyDemonsSlain, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                break;
            }
            case eObjectives::Obj_LordNathraxasSlain:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_LordNathraxasSlain, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                break;
            }
            case eObjectives::Obj_EnterTheVoidTear:
            {
                if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_AlleriaForVereesaEvent, m_AlleriaInVoidSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_AlleriaFirstMoveIntoVoid);
                }

                break;
            }
            case eObjectives::Obj_DismantledPortalExamined:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_DismantledPortalExamined, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                break;
            }
            case eObjectives::Obj_ImageOfSaprishExamined:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_ImageOfSaprishExamined, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                break;
            }
            case eObjectives::Obj_VoidforgeExamined:
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_VoidforgeExamined, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                break;
            }
            case eObjectives::Obj_CrestOfKnowledgePlacedOnMacAree:
            {
                if (Creature* l_Creature = p_Player->SummonCreature(eNpcs::Npc_ProphetVelenCrestOfKnowledge, m_VelenCrestOfKnowledgeSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID()))
                {
                    l_Creature->AI()->DoAction(eActions::Action_VelenMoveToPedestal);
                }

                break;
            }
            case eObjectives::Obj_HeartwellsMarked:
            case eObjectives::Obj_DemonGarrisonSlain:
            {
                if (p_Player->GetQuestObjectiveCounter(eObjectives::Obj_HeartwellsMarked) == 3 &&
                    p_Player->GetQuestObjectiveCounter(eObjectives::Obj_DemonGarrisonSlain) == 8)
                {
                    if (Conversation* l_Conversation = new Conversation)
                    {
                        if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_HighInquisitorRaalgarCanBeKilled, p_Player, nullptr, p_Player->GetPosition()))
                            delete l_Conversation;
                    }
                }

                break;
            }
            default:
                break;
            }
        }

        void OnPlayerChoiceResponse(Player* p_Player, uint32 p_ChoiceID, uint32 p_ResponseID) override
        {
            if (p_ChoiceID == 317 && p_ResponseID == 782)
            {
                p_Player->CastSpell(p_Player, eSpells::Spell_TakeMatrixAndActivateLightsJudgment, true);
                p_Player->CastSpell(p_Player, eSpells::Spell_LightsJudgmentOverride, true);
            }
            else if (p_ChoiceID == 317 && p_ResponseID == 771)
            {
                p_Player->CastSpell(p_Player, eSpells::Spell_ChooseLightsJudgment, true);
                p_Player->CastSpell(p_Player, eSpells::Spell_LightsJudgmentOverride, true);
                p_Player->RemoveAura(eSpells::Spell_LightforgedWarframe);
                p_Player->RemoveAura(eSpells::Spell_ShroudOfArcaneEchoes);
                p_Player->RemoveAura(eSpells::Spell_FelHeartOfArgus);
            }
            else if (p_ChoiceID == 317 && p_ResponseID == 774)
            {
                p_Player->CastSpell(p_Player, eSpells::Spell_ChooseLightforgedWarframe, true);
                p_Player->CastSpell(p_Player, eSpells::Spell_LightforgedWarframe, true);
                p_Player->RemoveAura(eSpells::Spell_LightsJudgmentOverride);
                p_Player->RemoveAura(eSpells::Spell_ShroudOfArcaneEchoes);
                p_Player->RemoveAura(eSpells::Spell_FelHeartOfArgus);
            }
            else if (p_ChoiceID == 317 && p_ResponseID == 775)
            {
                p_Player->CastSpell(p_Player, eSpells::Spell_ChooseFelHeartOfArgus, true);
                p_Player->CastSpell(p_Player, eSpells::Spell_FelHeartOfArgus, true);
                p_Player->RemoveAura(eSpells::Spell_LightsJudgmentOverride);
                p_Player->RemoveAura(eSpells::Spell_ShroudOfArcaneEchoes);
                p_Player->RemoveAura(eSpells::Spell_LightforgedWarframe);
            }
            else if (p_ChoiceID == 317 && p_ResponseID == 776)
            {
                p_Player->CastSpell(p_Player, eSpells::Spell_ChooseShroudOfArcaneEchoes, true);
                p_Player->CastSpell(p_Player, eSpells::Spell_ShroudOfArcaneEchoes, true);
                p_Player->RemoveAura(eSpells::Spell_LightforgedWarframe);
                p_Player->RemoveAura(eSpells::Spell_LightsJudgmentOverride);
                p_Player->RemoveAura(eSpells::Spell_FelHeartOfArgus);
            }
        }

        void OnSceneCancel(Player* p_Player, uint32 p_SceneInstanceId) override
        {
            if (p_Player->GetSceneInstanceIDByPackage(1883) == p_SceneInstanceId)
            {
                p_Player->SummonCreature(eNpcs::Npc_VelenExodusPoint, m_VelenSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID());
            }
            else if (p_Player->GetSceneInstanceIDByPackage(1887) == p_SceneInstanceId)
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AfterAlleriasTaleHeard, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_ListenToAlleriasTale);
            }
            else if (p_Player->GetSceneInstanceIDByPackage(1879) == p_SceneInstanceId && p_Player->HasQuest(eQuests::Quest_VisionsOfFear))
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AfterFearVisionSeen, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_FearVisionSeen);
            }
            else if (p_Player->GetSceneInstanceIDByPackage(1880) == p_SceneInstanceId && p_Player->HasQuest(eQuests::Quest_VisionsOfAnother))
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AfterVisionOfAnother, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_AnotherVisionSeen);
            }
            else if (p_Player->GetSceneInstanceIDByPackage(1807) == p_SceneInstanceId)
            {
                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_CrownOfTheTriumvirateActivated);
            }
        }

        void OnSceneComplete(Player* p_Player, uint32 p_SceneInstanceID) override
        {
            if (p_Player->GetSceneInstanceIDByPackage(1883) == p_SceneInstanceID)
            {
                p_Player->SummonCreature(eNpcs::Npc_VelenExodusPoint, m_VelenSpawnPos, TempSummonType::TEMPSUMMON_MANUAL_DESPAWN, 0, 0, p_Player->GetGUID());
            }
            else if (p_Player->GetSceneInstanceIDByPackage(1887) == p_SceneInstanceID)
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AfterAlleriasTaleHeard, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_ListenToAlleriasTale);
            }
            else if (p_Player->GetSceneInstanceIDByPackage(1879) == p_SceneInstanceID && p_Player->HasQuest(eQuests::Quest_VisionsOfFear))
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AfterFearVisionSeen, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_FearVisionSeen);
            }
            else if (p_Player->GetSceneInstanceIDByPackage(1880) == p_SceneInstanceID && p_Player->HasQuest(eQuests::Quest_VisionsOfAnother))
            {
                if (Conversation* l_Conversation = new Conversation)
                {
                    if (!l_Conversation->CreateConversation(sObjectMgr->GenerateLowGuid(HighGuid::HIGHGUID_CONVERSATION), eConversations::Conv_AfterVisionOfAnother, p_Player, nullptr, p_Player->GetPosition()))
                        delete l_Conversation;
                }

                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_AnotherVisionSeen);
            }
        }

        void OnSceneTriggerEvent(Player* p_Player, uint32 p_SceneInstanceID, std::string p_Event) override
        {
            if (p_Player->GetSceneInstanceIDByPackage(1807) == p_SceneInstanceID)
            {
                p_Player->KilledMonsterCredit(eKillcredits::Killcredit_CrownOfTheTriumvirateActivated);
            }
        }

        void OnAddRelicTalent(Player* p_Player) override
        {
            if (p_Player->GetQuestStatus(eQuests::Quest_TheNetherlightCrucible) == QUEST_STATUS_INCOMPLETE)
            {
                p_Player->QuestObjectiveSatisfy(eObjectives::Obj_ImbueARelicWithNetherlightFortification, 1, QUEST_OBJECTIVE_TYPE_CRITERIA_TREE);
            }
        }

        void OnActivateArgusTaxi(Player* p_Player, uint32 p_TaxiNodeId) override
        {
            switch (p_TaxiNodeId)
            {
            case eTaxiNodes::Node_KrokulHovel:
            {
                if (p_Player->HasQuest(eQuests::Quest_GatheringLight))
                {
                    p_Player->KilledMonsterCredit(eKillcredits::Killcredit_GoToTheKrokulHovelByTaxi);
                }

                break;
            }
            default:
                break;
            }
        }

        void OnGarrisonMissionComplete(Player* p_Player, uint32 p_MissionId, bool p_Succeeded) override
        {
            switch (p_MissionId)
            {
            case eGarrisonMissions::Mission_DarkfallRidgeSupplies:
            {
                if (!p_Succeeded)
                {
                    MS::Garrison::Manager* l_Garrison = p_Player->GetGarrison();
                    if (!l_Garrison)
                        return;

                    l_Garrison->RemoveMission(eGarrisonMissions::Mission_DarkfallRidgeSupplies);
                    l_Garrison->AddMission(eGarrisonMissions::Mission_DarkfallRidgeSupplies);
                }

                break;
            }
            default:
                break;
            }
        }
};

#ifndef __clang_analyzer__
void AddSC_argus_questline_scripts()
{
    new npc_grand_artificer_romuul_121263();
    new npc_prophet_velen_126307();
    new npc_prophet_velen_119543();
    new npc_illidan_stormrage_119535();
    new npc_chieftain_hatuun_126239();
    new npc_felbound_drudge_123085();
    new npc_legion_devastators();
    new npc_devastator_anchors();
    new npc_eredar_conqueror_120395();
    new npc_argus_rift_122902();
    new npc_illidan_stormrage_123148();
    new npc_prophet_velen_123149();
    new npc_antaen_light_breaker_120361();
    new npc_prophet_velen_123232();
    new npc_jost_122201();
    new npc_divinius_122200();
    new npc_prophet_velen_121345();
    new npc_generic_bunny_54638();
    new npc_high_exarch_turalyon_120529();
    new npc_lothraxion_120643();
    new npc_chieftain_hatuun_119388();
    new npc_darkfallen_slave_121254();
    new npc_darkfallen_slave_120608();
    new npc_high_exarch_turalyon_120953();
    new npc_high_exarch_turalyon_120738();
    new npc_aggonar_119397();
    new npc_burning_fiend_120914();
    new npc_alleria_windrunner_120913();
    new npc_high_exarch_turalyon_122378();
    new npc_alleria_windrunner_120844();
    new npc_high_exarch_turalyon_122621();
    new npc_alleria_windrunner_123595();
    new npc_captain_fareeya_121519();
    new npc_secure_lights_judgment_event();
    new npc_lightforged_battery_122789();
    new npc_prophet_velen_126950();
    new npc_high_exarch_turalyon_126954();
    new npc_magni_bronzebeard_124595();
    new npc_high_exarch_turalyon_120763();
    new npc_illidan_stormrage_124972();
    new npc_fallen_warriors();
    new npc_lightforged_warframe_124987();
    new npc_lightforged_warframe_124988();
    new npc_nathraxxan_rift_126743();
    new npc_lord_nathraxas_125034();
    new npc_prophet_velen_128725();
    new npc_prophet_velen_125968();
    new npc_argus_echoes_summoner_left();
    new npc_argus_echoes_summoner_middle();
    new npc_argus_echoes_summoner_right();
    new npc_citizen_echoes();
    new npc_prophet_velen_120533();
    new npc_archmage_ymera_123413();
    new npc_grand_lector_enaara_123667();
    new npc_captain_fareeya_123668();
    new npc_baraat_the_longshot_123670();
    new npc_grand_vindicator_sorvos_123669();
    new npc_blademaster_telaamon_123671();
    new npc_erratic_power_conduit_123560();
    new npc_fx_stalker_120693();
    new npc_grand_vizier_jarasum_123521();
    new npc_arc_consul_velara_123520();
    new npc_high_wakener_aargon_123522();
    new npc_gatekeepers_image_124077();
    new npc_rune_gauntlet_127397();
    new npc_laser_122272();
    new npc_laser_field_complete_124162();
    new npc_boulders_event_complete_124163();
    new npc_vigilant_quoram_124070();
    new npc_archimonde_124677();
    new npc_return_to_vindicaar_125270();
    new npc_illidan_stormrage_126408();
    new npc_alleria_windrunner_121230();
    new npc_high_exarch_turalyon_124312();
    new npc_high_exarch_turalyon_124477();
    new npc_fel_spreader_124463();
    new npc_soul_harvester_125010();
    new npc_demonfly_nest_125006();
    new npc_talgath_125233();
    new npc_prophet_velen_125239();
    new npc_grand_vindicator_sorvos_125235();
    new npc_blademaster_telaamon_125236();
    new npc_baraat_the_longshot_125237();
    new npc_high_exarch_turalyon_125238();
    new npc_talgath_127085();
    new npc_prophet_velen_128735();
    new npc_investigate_the_ruins_of_oronaar_126368();
    new npc_arkhaan_121518();
    new npc_void_manifestation_121539();
    new npc_arkhaan_121556();
    new npc_alleria_windrunner_121559();
    new npc_arkhaan_121546();
    new npc_alleria_windrunner_121960();
    new npc_locus_walker_121597();
    new npc_void_harvester_121676();
    new npc_alleria_windrunner_121773();
    new npc_locus_walker_121772();
    new npc_nhalathoth_121663();
    new npc_frenzied_plaguewing_122833();
    new npc_wild_cragscaler_123074();
    new npc_wild_cragscaler_123089();
    new npc_cragscaler_steed_126843();
    new npc_lightforged_warframe_126143();
    new npc_labradorite_126121();
    new npc_florid_malachite_126118();
    new npc_chemirine_126124();
    new npc_hesselian_126119();
    new npc_argulite_126123();
    new npc_bream_caster_126188();
    new npc_lightsphene_126125();
    new npc_prophet_velen_128722();
    new npc_gaal_125246();
    new npc_commander_atalaa_125620();
    new npc_high_inquisitor_raalgar_121544();
    new gob_lightforged_beacon_271094();
    new gob_lights_judgments();
    new gob_teleportation_crystal_273787();
    new gob_lightforged_beacon_275101();
    new gob_spire_stabilizer_272619();
    new gob_ancient_pylon_268745();
    new gob_argunite_matrix_268760();
    new gob_sigil_of_awakening_272692();
    new gob_legion_portal_275108();
    new gob_frantic_wall_scrawling_271100();
    new gob_abandoned_altar_271097();
    new gob_discarded_naaru_figurine_271098();
    new gob_sacred_stone_268767();
    new gob_vindicaar_beacon_276199();
    new gob_netherlight_crucible_273271();
    new gob_vorel_chest_272744();
    new gob_crest_of_knowledge_273716();
    new gob_the_vindicaar();
    new gob_gilded_triumvirate_chest_272918();
    new spell_gen_holy_dissolve_out();
    new spell_gen_set_health();
    new spell_gen_reckless_stomp();
    new spell_gen_felshock_bombardment();
    new spell_gen_crystal_activating();
    new spell_gen_glaive_blast();
    new spell_gen_permanent_feign_death_argus();
    new spell_gen_grip_of_the_pit_king();
    new spell_gen_shadow_flurry();
    new spell_gen_unstable_fel_crystal();
    new spell_gen_prevent_damage_to_others();
    new spell_gen_flurry();
    new spell_gen_witnessing();
    new spell_gen_crystal_activating_on_destiny_point();
    new spell_gen_fel_orbs();
    new spell_gen_mass_fel_eruption();
    new spell_gen_fel_eruption();
    new spell_gen_the_arrival();
    new spell_gen_no_npc_damage();
    new spell_gen_jostling();
    new spell_gen_sculpture_blessings();
    new spell_gen_prismatic_child_auras();
    new spell_gen_unleashed_familiars();
    new spell_gen_crystalline_defense_grid();
    new spell_gen_laser_field_visual();
    new spell_gen_eldritch_crash();
    new spell_gen_energy_breach();
    new spell_gen_enegry_breach_beam();
    new spell_gen_crossing_over();
    new spell_gen_cross_over();
    new spell_argus_create_unsullied_items();
    new spell_argus_create_relinquished_items();
    new spell_argus_eredun_scroll();
    new spell_argus_broken_soul_fragment();
    new spell_argus_unlock_the_triumvirate_armory();
    new spell_argus_blind_recompense();
    new spell_argus_holy_retribution();
    new spell_argus_armory_door_opened();
    new spell_argus_lights_judgment_long_overdue();
    new spell_argus_fel_heart_bond();
    new at_spire_of_woe();
    new at_argus_broken_essence();
    new at_argus_armor_of_the_triumvirate();
    new playerscript_argus_scripts();
}
#endif

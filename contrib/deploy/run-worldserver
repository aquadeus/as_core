#!/bin/bash


function sendToMattermost {
    local channel=$1
    local msg=$2
    local color=$3

    if [ -z "$MATTERMOST_WEBHOOK" ]; then
        return 1
    fi

    curl \
        -X POST \
        -H "Content-type: application/json" \
        -d "$(printf '{ "channel": "%s", "attachments": [{ "pretext": "%s", "text": "%s", "color": "%s", "mrkdwn_in": ["pretext", "text"] }] }' \
            "${channel}" \
            "7.3.5" \
            "${msg}" \
            "${color}" \
        )" \
        ${MATTERMOST_WEBHOOK}
}

function runWorldserver {
    ulimit -n 16384

    case ${MODE^^} in
        GDB)
            gdb -batch -x=/usr/local/etc/commands.gdb worldserver
            ;;
        ASAN)
            # for options see https://github.com/google/sanitizers/wiki/AddressSanitizerFlags#run-time-flags
            export ASAN_OPTIONS=${ASAN_OPTIONS:-abort_on_error=1:detect_leaks=0:symbolize=1:debug=true:detect_stack_use_after_return=true:print_stats=true}

            worldserver 2> /tmp/backtrace.log
            ;;
        MUTRACE)
            export MUTRACE_MAX=1000 # show 1000 mutex instead 10
            export MUTRACE_HASH_SIZE=99991 # mutrace warning that we should increase it (default 3371) and we should user a prime number so here we are

            mutrace worldserver 2> /tmp/backtrace.log
            ;;
        CROSS)
            worldserver_cross
            ;;
        CROSS_GDB)
            gdb -batch -x=/usr/local/etc/commands.gdb worldserver_cross
            ;;
        CROSS_ASAN)
            export ASAN_OPTIONS=abort_on_error=1:detect_leaks=0:symbolize=1:debug=true:detect_stack_use_after_return=true:print_stats=true

            worldserver_cross 2> /tmp/backtrace.log
            ;;
        NORMAL|*)
            worldserver 2> /tmp/backtrace.log
            ;;
    esac
}

function processCrashlog {
    crash_log="$1"
    realm_logs="/usr/local/var/log/firestorm"

    pointers_filename=$(ls -l "${realm_logs}/" | grep Pointers.*\.log | tail -n 1 | rev | cut -d ' ' -f 1 | rev)
    pointers_log="${realm_logs}/${pointers_filename}"

    ### In case of Freeze, find the thread that caused it
    ashran_log="${realm_logs}/ashran.log"

    freeze_thread=""
    freeze_info=$(tail -n 5000 $ashran_log | grep freeze | tail -n 1)

    regex_find_map="Map\s([0-9][0-9]*)\s"

    if [[ $freeze_info =~ $regex_find_map ]]
    then
      freeze_thread=$(echo "obase=16; ${BASH_REMATCH[1]}" | bc)
    fi

    ######################################################
    format_crashlog $crash_log $pointers_log "${freeze_info}" "${freeze_thread}"
}

function analyseCrash {
    local crashlog_filename="crashdump_$(date +\%Y-\%m-\%d-\%H-\%M-\%S)"
    local crashlog_link="http://logs.${REALM_NAME//_/-}.firestorm.local/crashlogs/${crashlog_filename}.html"

    if [ ${MODE^^} == "ASAN" ]; then
        # cleanup backtrace.log to get only asan output
        csplit --prefix=/tmp/backtrace-split.log --quiet /tmp/backtrace.log "/================/+1"; mv -f /tmp/backtrace-split.log01 /tmp/backtrace.log
    fi

    mysql_infos=$(cat /usr/local/etc/firestorm/worldserver.conf | sed -nr "s/WorldDatabaseInfo.*\"(.*)\"/\1/p;")
    mysql_host=$(echo ${mysql_infos} | cut -d';' -f1)
    mysql_port=$(echo ${mysql_infos} | cut -d';' -f2)
    mysql_user=$(echo ${mysql_infos} | cut -d';' -f3)
    mysql_passwd=$(echo ${mysql_infos} | cut -d';' -f4)

    mysql \
        -h ${mysql_host} \
        -P ${mysql_port} \
        -u ${mysql_user} \
        -p${mysql_passwd} \
        -e "SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST WHERE COMMAND = 'Execute'" >> /tmp/backtrace.log

    # Only if it's a crash we made the log avalaible
    cp /tmp/backtrace.log /usr/local/var/log/firestorm/crashlogs/$crashlog_filename.log

    processCrashlog "/usr/local/var/log/firestorm/crashlogs/${crashlog_filename}.log"

    local crash_location=$(grep -m 1 -P '#0 .* in' /tmp/backtrace.log)
    local crash_in=$(echo $crash_location | grep -oP 'in \K([^ ]+)')
    local crash_at=$(echo $crash_location | grep -oP ' .*\/\K(.+)')

    sendToMattermost "#jarvis-crash" "_${REALM_NAME}_ (<https://github.com/${GIT_REPO}/commit/${GIT_COMMIT}|${GIT_COMMIT:0:7}>) crashed in \`${crash_in}\` at \`${crash_at}\` <${crashlog_link}|Show more...>" "danger"
    sendToMattermost "#jarvis" "_${REALM_NAME}_ crashed." "danger"
}

function isCrash {
    exit_code=$1

    if [ $exit_code -eq 1 -o $(grep -m1 -icP 'received signal SIG|ERROR: AddressSanitizer' /tmp/backtrace.log) -eq 1 ]; then
        # handle exceptions
        if [ $(grep -m1 -icP 'MapManager::UnloadAll|InstanceSaveManager::Unload' /tmp/backtrace.log) -eq 1 ]; then
            echo 0
        else
            echo 1
        fi
    else
        echo 0
    fi
}


###### MAIN ######

runWorldserver
worldserver_exit_code=$?

echo "worldserver_exit_code: ${worldserver_exit_code}"

if [ "$(isCrash $worldserver_exit_code)" -eq 1 ]; then
    analyseCrash
else
    sendToMattermost "#jarvis" "_${REALM_NAME}_ has been rebooted." "good"
fi
